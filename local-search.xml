<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>六.React教程</title>
    <link href="/2023/11/01/React%E6%95%99%E7%A8%8B/"/>
    <url>/2023/11/01/React%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>React官方中文文档：<a href="https://zh-hans.react.dev/learn/react-developer-tools">https://zh-hans.react.dev/learn/react-developer-tools</a></p><p>官方Github仓库：<a href="https://github.com/reactjs/zh-hans.react.dev">https://github.com/reactjs/zh-hans.react.dev</a></p><p>前端在线编辑器公开沙盒：<a href="https://codesandbox.io/dashboard/recent?workspace=44913078-bd56-4551-abd7-4139b7ec6366">https://codesandbox.io/dashboard/recent?workspace=44913078-bd56-4551-abd7-4139b7ec6366</a></p><p>本地启动项目：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5xjsr1lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5xjsr1lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g yarn<br>yarn <br>yarn dev<br></code></pre></td></tr></table></div></figure><img src="image-20231030163722152.png" alt="image-20231030163722152" style="zoom:50%;" /><img src="image-20231030164520318.png" alt="image-20231030164520318" style="zoom:50%;" /><img src="image-20231030164705426.png" alt="image-20231030164705426" style="zoom:50%;" /><p>安装扩展ESLint【 JavaScript 代码检查工具】，Prettier</p><p>保存并自动格式化：</p><ol><li>按快捷键 <code>Ctrl/Cmd + Shift + P</code>.</li><li>输入 “settings”</li><li>按回车键</li><li>在搜索栏, 输入 “format on save”</li><li>确保勾选 “format on save” 选项</li></ol><p>Chrome插件：<code>React Developer Tools</code></p><img src="image-20231101175313970.png" alt="image-20231101175313970" style="zoom:50%;" /><img src="image-20231101175344676.png" alt="image-20231101175344676" style="zoom:50%;" /><h1 id="一-使用TypeScript"><a href="#一-使用TypeScript" class="headerlink" title="一.使用TypeScript"></a>一.使用TypeScript</h1><p>TypeScript官方文档：<a href="https://www.typescriptlang.org/zh/docs/handbook/">https://www.typescriptlang.org/zh/docs/handbook/</a></p><p>TypeScript 是一种向 JavaScript 代码添加类型定义的常用方法。TypeScript 天然支持 JSX——只需在项目中添加 <a href="https://www.npmjs.com/package/@types/react"><code>@types/react</code></a> 和 <a href="https://www.npmjs.com/package/@types/react-dom"><code>@types/react-dom</code></a> 即可获得完整的 React Web 支持。</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gik3j8lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gik3j8lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install @types/react @types/react-dom<br></code></pre></td></tr></table></div></figure><p>然后在 <code>tsconfig.json</code> 中设置以下编译器选项：</p><ol><li>必须在 <a href="https://www.typescriptlang.org/tsconfig/#lib"><code>lib</code></a> 中包含 <code>dom</code>（注意：如果没有指定 <code>lib</code> 选项，默认情况下会包含 <code>dom</code>）。</li><li><a href="https://www.typescriptlang.org/tsconfig/#jsx"><code>jsx</code></a> 必须设置为一个有效的选项。对于大多数应用程序，<code>preserve</code> 应该足够了。 如果你正在发布一个库，请查阅 <a href="https://www.typescriptlang.org/tsconfig/#jsx"><code>jsx</code> 文档</a> 以选择合适的值。</li></ol><p>为按钮的 <code>title</code> 添加一个描述类型：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n6z0hzlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n6z0hzlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; title &#125;: &#123; title: <span class="hljs-built_in">string</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这种内联语法是为组件提供类型的最简单方法，但是一旦你开始描述几个字段，它可能变得难以管理。相反，你可以使用 <code>interface</code> 或 <code>type</code> 来描述组件的 props：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l9oyholopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l9oyholopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyButtonProps</span> &#123;<br>  <span class="hljs-comment">/* 按钮文字 */</span><br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-comment">/* 按钮是否禁用 */</span><br>  <span class="hljs-attr">disabled</span>: <span class="hljs-built_in">boolean</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; title, disabled &#125;: MyButtonProps</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;disabled&#125;</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to my app<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;我是一个禁用按钮&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;true&#125;/</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>为 state 显式提供一个类型，你可以通过为 <code>useState</code> 调用提供一个类型参数来实现：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lxopmzlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lxopmzlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 显式设置类型为 &quot;boolean&quot;</span><br><span class="hljs-keyword">const</span> [enabled, setEnabled] = useState&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></div></figure><p>在这种情况下，这并不是很有用，但是当你有一个联合类型时，你可能想要提供一个 <code>type</code>。例如，这里的 <code>status</code> 可以是几个不同的字符串之一：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dzkyl5lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dzkyl5lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Status</span> = <span class="hljs-string">&quot;idle&quot;</span> | <span class="hljs-string">&quot;loading&quot;</span> | <span class="hljs-string">&quot;success&quot;</span> | <span class="hljs-string">&quot;error&quot;</span>;<br><br><span class="hljs-keyword">const</span> [status, setStatus] = useState&lt;<span class="hljs-title class_">Status</span>&gt;(<span class="hljs-string">&quot;idle&quot;</span>);<br></code></pre></td></tr></table></div></figure><p>或者，如 <a href="http://localhost:3000/learn/choosing-the-state-structure#principles-for-structuring-state">选择 state 结构原则</a> 中推荐的，你可以将相关的 state 作为一个对象分组，并通过对象类型描述不同的可能性：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ex062ilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ex062ilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">RequestState</span> =<br>  | &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;idle&#x27;</span> &#125;<br>  | &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;loading&#x27;</span> &#125;<br>  | &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-attr">data</span>: <span class="hljs-built_in">any</span> &#125;<br>  | &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-attr">error</span>: <span class="hljs-title class_">Error</span> &#125;;<br><br><span class="hljs-keyword">const</span> [requestState, setRequestState] = useState&lt;<span class="hljs-title class_">RequestState</span><br></code></pre></td></tr></table></div></figure><p><code>useReducer</code>接受一个 reducer 函数和一个初始 state 作为参数，并将从初始 state 推断出 reducer 函数的类型。你可以选择性地为 <code>useReducer</code> 提供类型参数以为 state 提供类型。但是更高的做法仍然是在初始 state 上添加类型：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y1p7fqlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y1p7fqlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123;useReducer&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>   <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span> <br>&#125;;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">CounterAction</span> =<br>  | &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;reset&quot;</span> &#125;<br>  | &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;setCount&quot;</span>; <span class="hljs-attr">value</span>: <span class="hljs-title class_">State</span>[<span class="hljs-string">&quot;count&quot;</span>] &#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">State</span> = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">stateReducer</span>(<span class="hljs-params">state: State, action: CounterAction</span>): <span class="hljs-title class_">State</span> &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;reset&quot;</span>:<br>      <span class="hljs-keyword">return</span> initialState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;setCount&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">count</span>: action.<span class="hljs-property">value</span> &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Unknown action&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(stateReducer, initialState);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addFive</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;setCount&quot;</span>, <span class="hljs-attr">value</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">5</span> &#125;);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">reset</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;reset&quot;</span> &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到我的计数器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>计数： &#123;state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addFive&#125;</span>&gt;</span>加 5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;reset&#125;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101152507530.png" alt="image-20231101152507530" style="zoom:50%;" /><hr><p><a href="http://localhost:3000/reference/react/useContext"><code>useContext</code></a> 是一种无需通过组件传递 props 而可以直接在组件树中传递数据的技术。它是通过创建 provider 组件使用，通常还会创建一个 hook 以在子组件中使用该值。</p><p>从传递给 <code>createContext</code> 调用的值推断 context 提供的值的类型：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kxophtlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kxophtlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Theme</span> = <span class="hljs-string">&quot;light&quot;</span> | <span class="hljs-string">&quot;dark&quot;</span> | <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = createContext&lt;<span class="hljs-title class_">Theme</span>&gt;(<span class="hljs-string">&quot;system&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useGetTheme</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [theme, setTheme] = useState&lt;<span class="hljs-title class_">Theme</span>&gt;(<span class="hljs-string">&#x27;light&#x27;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useGetTheme</span>();<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前主题：&#123;theme&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101155923881.png" alt="image-20231101155923881" style="zoom:50%;" /><p>当你没有一个合理的默认值时，这种技术是有效的，而在这些情况下，<code>null</code> 作为默认值可能感觉是合理的。但是，为了让类型系统理解你的代码，你需要在 <code>createContext</code> 上显式设置 <code>ContextShape | null</code>。</p><p>这会导致一个问题，你需要在 context consumer 中消除 <code>| null</code> 的类型。我们建议让 hook 在运行时检查它的存在，并在不存在时抛出一个错误：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vt6a1clopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vt6a1clopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext, useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// 这是一个简单的示例，但你可以想象一个更复杂的对象</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ComplexObject</span> = &#123;<br>  <span class="hljs-attr">kind</span>: <span class="hljs-built_in">string</span><br>&#125;;<br><br><span class="hljs-comment">// 上下文在类型中创建为 `| null`，以准确反映默认值。</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Context</span> = createContext&lt;<span class="hljs-title class_">ComplexObject</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 这个 hook 会在运行时检查 context 是否存在，并在不存在时抛出一个错误。</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useGetComplexObject</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">object</span> = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">Context</span>);<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">object</span>) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;useGetComplexObject must be used within a Provider&quot;</span>) &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">object</span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">object</span> = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;complex&quot;</span> &#125;), []);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;object&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Context.Provider</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">object</span> = <span class="hljs-title function_">useGetComplexObject</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Current object: &#123;object.kind&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p><a href="http://localhost:3000/reference/react/useMemo"><code>useMemo</code></a> 会从函数调用中创建&#x2F;重新访问记忆化值，只有在第二个参数中传入的依赖项发生变化时，才会重新运行该函数。函数的类型是根据第一个参数中函数的返回值进行推断的，如果希望明确指定，可以为这个钩子提供一个类型参数以指定函数类型。</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-okz9yvlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-okz9yvlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 从 filterTodos 的返回值推断 visibleTodos 的类型</span><br><span class="hljs-keyword">const</span> visibleTodos = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">filterTodos</span>(todos, tab), <br></code></pre></td></tr></table></div></figure><hr><p><a href="http://localhost:3000/reference/react/useCallback"><code>useCallback</code></a> 会在第二个参数中传入的依赖项保持不变的情况下，为函数提供相同的引用。与 <code>useMemo</code> 类似，函数的类型是根据第一个参数中函数的返回值进行推断的，如果希望明确指定，可以为这个钩子提供一个类型参数以指定函数类型。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t6fjqylopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t6fjqylopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> handleClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;, [todos]);<br></code></pre></td></tr></table></div></figure><p>当在 TypeScript 严格模式下，使用 <code>useCallback</code> 需要为回调函数中的参数添加类型注解。这是因为回调函数的类型是根据函数的返回值进行推断的——如果没有参数，那么类型就不能完全理解。</p><p>根据自身的代码风格偏好，你可以使用 React 类型中的 <code>*EventHandler</code> 函数以在定义回调函数的同时为事件处理程序提供类型注解：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yp4klolopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yp4klolopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useState, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Change me&quot;</span>);<br>  <span class="hljs-keyword">const</span> handleChange = useCallback&lt;<span class="hljs-title class_">React</span>.<span class="hljs-property">ChangeEventHandler</span>&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt;&gt;(<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">setValue</span>(event.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">value</span>);<br><br>  &#125;, [setValue])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>值： &#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>在 React 中处理 DOM 事件时，事件的类型通常可以从事件处理程序中推断出来。但是，当你想提取一个函数以传递给事件处理程序时，你需要明确设置事件的类型。</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2p1boalopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2p1boalopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Change me&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">event: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) &#123;<br>    <span class="hljs-title function_">setValue</span>(event.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>值： &#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101170008390.png" alt="image-20231101170008390" style="zoom:50%;" /><p>描述组件的子元素有两种常见方法。第一种是使用 <code>React.ReactNode</code> 类型，这是可以在 JSX 中作为子元素传递的所有可能类型的并集：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dk8tdwlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dk8tdwlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ModalRendererProps</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactNode</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这是对子元素的一个非常宽泛的定义。第二种方法是使用 <code>React.ReactElement</code> 类型，它只包括 JSX 元素，而不包括 JavaScript 原始类型，如 string 或 number：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6dlja7lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6dlja7lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ModalRendererProps</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactElement</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>注意，你不能使用 TypeScript 来描述子元素是某种类型的 JSX 元素，所以你不能使用类型系统来描述一个只接受 <code>&lt;li&gt;</code> 子元素的组件。</p><p>当在 React 中使用内联样式时，你可以使用 <code>React.CSSProperties</code> 来描述传递给 <code>style</code> 属性的对象。这个类型是所有可能的 CSS 属性的并集，它能确保你传递给 <code>style</code> 属性的是有效的 CSS 属性，并且你能在编辑器中获得样式编码提示。</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8q403qlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8q403qlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyComponentProps</span> &#123;<br>  <span class="hljs-attr">style</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">CSSProperties</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="二-入门"><a href="#二-入门" class="headerlink" title="二.入门"></a>二.入门</h1><p>React 应用程序是由 组件 组成的。一个组件是 UI（用户界面）的一部分，它拥有自己的逻辑和外观。组件可以小到一个按钮，也可以大到整个页面。</p><p><mark>React 组件是返回标签的 JavaScript 函数</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tz3ca6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tz3ca6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>I&#x27;m a button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>至此，你已经声明了 <code>MyButton</code>，现在把它嵌套到另一个组件中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p05v9jlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p05v9jlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to my app<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">React 是常规的 JavaScript 函数，除了：<br />1. 它们的名字总是以大写字母开头。<br />2. 它们返回 JSX 标签。</p><p><mark>React 组件必须以大写字母开头，而 HTML 标签则必须是小写字母。</mark></p><p>所使用的标签语法被称为 <em>JSX</em>。</p><p>JSX 比 HTML 更加严格。你必须闭合标签，如 <code>&lt;br /&gt;</code>。你的组件也不能返回多个 JSX 标签。你必须将它们包裹到一个共享的父级中，比如 <code>&lt;div&gt;...&lt;/div&gt;</code> 或使用空的 <code>&lt;&gt;...&lt;/&gt;</code> 包裹：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l9ym7ulopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l9ym7ulopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AboutPage</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello there.<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>How do you do?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>可以使用 <code>className</code> 来指定一个 CSS 的 class。它与 HTML 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/class"><code>class</code></a> 属性的工作方式相同：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5pep28lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5pep28lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;img className=<span class="hljs-string">&quot;avatar&quot;</span> /&gt;<br></code></pre></td></tr></table></div></figure><p>React 并没有规定你如何添加 CSS 文件。最简单的方式是使用 HTML 的 <code>&lt;link&gt;</code> 标签。</p><p class="note note-warning" style="border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;">大括号是{}</p><p>JSX 会让你把标签放到 JavaScript 中。而大括号会让你 “回到” JavaScript 中，这样你就可以从你的代码中嵌入一些变量并展示给用户。例如，这将显示 <code>user.name</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ctmx5zlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ctmx5zlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    &#123;user.name&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>你还可以将 JSX 属性 “转义到 JavaScript”，但你必须使用大括号 而非 引号。例如，<code>className=&quot;avatar&quot;</code> 是将 <code>&quot;avatar&quot;</code> 字符串传递给 <code>className</code>，作为 CSS 的 class。但 <code>src=&#123;user.imageUrl&#125;</code> 会读取 JavaScript 的 <code>user.imageUrl</code> 变量，然后将该值作为 <code>src</code> 属性传递：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tq1v91lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tq1v91lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.imageUrl&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  /&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>你也可以把更为复杂的表达式放入 JSX 的大括号内，例如 <a href="https://javascript.info/operators#string-concatenation-with-binary">字符串拼接</a>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-h5wkljlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-h5wkljlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Hedy Lamarr&#x27;</span>,<br>  <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;https://i.imgur.com/yXOvdOSs.jpg&#x27;</span>,<br>  <span class="hljs-attr">imageSize</span>: <span class="hljs-number">90</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;user.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.imageUrl&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">Photo</span> <span class="hljs-attr">of</span> &#x27; + <span class="hljs-attr">user.name</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">width:</span> <span class="hljs-attr">user.imageSize</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">height:</span> <span class="hljs-attr">user.imageSize</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>style=&#123;&#123;&#125;&#125;</code> 并不是一个特殊的语法，而是 <code>style=&#123; &#125;</code> JSX 大括号内的一个普通 <code>&#123;&#125;</code> 对象。当你的样式依赖于 JavaScript 变量时，你可以使用 <code>style</code> 属性。</p><hr><p><mark>条件渲染</mark>：React 没有特殊的语法来编写条件语句，因此你使用的就是普通的 JavaScript 代码。例如使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else"><code>if</code></a> 语句根据条件引入 JSX：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kwjvvilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kwjvvilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> content;<br><br><span class="hljs-keyword">if</span> (isLoggedIn) &#123;<br>  content = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span></span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  content = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LoginForm</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &#123;content&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>如果你喜欢更为紧凑的代码，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">条件 <code>?</code> 运算符</a>。与 <code>if</code> 不同的是，它工作于 JSX 内部：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7u9xkwlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7u9xkwlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div&gt;<br>  &#123;isLoggedIn ? (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span></span><br>  ) : (<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LoginForm</span> /&gt;</span></span><br>  )&#125;<br>&lt;/div&gt;<br></code></pre></td></tr></table></div></figure><p>当你不需要 <code>else</code> 分支时，你还可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation">逻辑 <code>&amp;&amp;</code> 语法</a>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ak2c4slopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ak2c4slopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div&gt;<br>  &#123;isLoggedIn &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span></span>&#125;<br>&lt;/div&gt;<br></code></pre></td></tr></table></div></figure><hr><p><mark>渲染列表</mark>：例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for"><code>for</code> 循环</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">array 的 <code>map()</code> 函数</a> 来渲染组件列表。</p><p>假设你有一个产品数组：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d00oxxlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d00oxxlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> products = [<br><br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Cabbage&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br><br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Garlic&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br><br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;,<br><br>];<br></code></pre></td></tr></table></div></figure><p>在你的组件中，使用 <code>map()</code> 函数将这个数组转换为 <code>&lt;li&gt;</code> 标签构成的列表:</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8iqklolopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8iqklolopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ShoppingList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> listItems = products.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">product</span> =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color:</span> <span class="hljs-attr">product.isFruit</span> ? &#x27;<span class="hljs-attr">magenta</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">darkgreen</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;product.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p> <code>&lt;li&gt;</code> 有一个 <code>key</code> 属性。对于列表中的每一个元素，你都应该传递一个字符串或者数字给 <code>key</code>，用于在其兄弟节点中唯一标识该元素。</p><p>这些 key 会告诉 React，每个组件对应着数组里的哪一项，所以 React 可以把它们匹配起来。这在数组项进行移动（例如排序）、插入或删除等操作时非常重要。一个合适的 <code>key</code> 可以帮助 React 推断发生了什么，从而得以正确地更新 DOM 树。</p><p>用作 key 的值应该在数据中提前就准备好，而不是在运行时才随手生成。</p><hr><p><mark>响应事件</mark>：通过在组件中声明 事件处理 函数来响应事件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-igfizvlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-igfizvlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;You clicked me!&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Click me</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p class="note note-danger" style="border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;">onClick={handleClick} 的结尾没有小括号！不要 调用 事件处理函数：你只需 把函数传递给事件 即可。当用户点击按钮时 React 会调用你传递的事件处理函数。</p><hr><p><mark>更新界面</mark>：从 React 引入 <a href="http://localhost:3000/reference/react/useState"><code>useState</code></a>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qz0pkflopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qz0pkflopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>现在你可以在你的组件中声明一个 state 变量：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wprzr8lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wprzr8lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>你将从 <code>useState</code> 中获得两样东西：当前的 state（<code>count</code>），以及用于更新它的函数（<code>setCount</code>）。</p><p>第一次显示按钮时，<code>count</code> 的值为 <code>0</code>，因为你把 <code>0</code> 传给了 <code>useState()</code>。当你想改变 state 时，调用 <code>setCount()</code> 并将新的值传递给它。点击该按钮计数器将递增：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9w9krzlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9w9krzlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果你多次渲染同一个组件，每个组件都会拥有自己的 state。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-24y176lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-24y176lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update separately<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101143311372-1698820394429-1.png" alt="image-20231101143311372" style="zoom:50%;" /><p>每个按钮会 “记住” 自己的 <code>count</code>，而不影响其他按钮。</p><img src="image-20231101144402210.png" alt="image-20231101144402210" style="zoom:50%;" /><hr><p><mark>使用hook</mark>：以 <code>use</code> 开头的函数被称为 Hook。<code>useState</code> 是 React 提供的一个内置 Hook。Hook 比普通函数更为严格。你只能在你的组件（或其他 Hook）的 顶层 调用 Hook。如果你想在一个条件或循环中使用 <code>useState</code>，请提取一个新的组件并在组件内部使用它。</p><hr><p><mark>组件间共享数据</mark>：为了使得 <code>MyButton</code> 组件显示相同的 <code>count</code> 并一起更新，你需要将各个按钮的 state “向上” 移动到最接近包含所有按钮的组件之中。</p><img src="image-20231101144445700.png" alt="image-20231101144445700" style="zoom:50%;" /><p>此刻，当你点击任何一个按钮时，<code>MyApp</code> 中的 <code>count</code> 都将改变，同时会改变 <code>MyButton</code> 中的两个 count。</p><p>首先，将 <code>MyButton</code> 的 state 上移到 <code>MyApp</code> 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l6hfx4lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l6hfx4lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update separately<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ... we&#x27;re moving code from here ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>接着，将 <code>MyApp</code> 中的点击事件处理函数以及 state 一同向下传递到 每个 <code>MyButton</code> 中。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dlbngalopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dlbngalopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update together<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>使用这种方式传递的信息被称作 prop。此时 <code>MyApp</code> 组件包含了 <code>count</code> state 以及 <code>handleClick</code> 事件处理函数，并将它们作为 prop 传递给 了每个按钮。</p><p>最后，改变 <code>MyButton</code> 以 读取 从父组件传递来的 prop：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-equj2vlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-equj2vlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; count, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>当你点击按钮时，<code>onClick</code> 处理程序会启动。每个按钮的 <code>onClick</code> prop 会被设置为 <code>MyApp</code> 内的 <code>handleClick</code> 函数，所以函数内的代码会被执行。该代码会调用 <code>setCount(count + 1)</code>，使得 state 变量 <code>count</code> 递增。新的 <code>count</code> 值会被作为 prop 传递给每个按钮，因此它们每次展示的都是最新的值。这被称为“<mark>状态提升</mark>”。通过向上移动 state，我们实现了在组件间共享它。</p><p>完整代码：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sip1avlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sip1avlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update together<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; count, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101145014997.png" alt="image-20231101145014997" style="zoom:50%;" /><h1 id="三-描述用户界面UI"><a href="#三-描述用户界面UI" class="headerlink" title="三.描述用户界面UI"></a>三.描述用户界面UI</h1><h2 id="1-第一个组件"><a href="#1-第一个组件" class="headerlink" title="1.第一个组件"></a>1.第一个组件</h2><p>React 应用是由被称为 组件 的独立 UI 片段构建而成。React 组件本质上是可以任意添加标签的 JavaScript 函数。组件可以小到一个按钮，也可以大到是整个页面。</p><p>React 允许你将标签、CSS 和 JavaScript 组合成自定义“组件”，即 应用程序中可复用的 UI 元素。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kd01oslopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kd01oslopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Amazing scientists<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>开源UI组件仓库：<a href="https://github.com/mui">https://github.com/mui</a></p><p>material-ui文档：<a href="https://mui.com/material-ui">https://mui.com/material-ui</a></p><p>React 组件是一段可以 使用标签进行扩展 的 JavaScript 函数。</p><p>构建组件的方法：</p><ol><li><p>导出组件： <code>export default</code> 前缀是一种 <a href="https://developer.mozilla.org/docs/web/javascript/reference/statements/export">JavaScript 标准语法</a>（非 React 的特性）。它允许你标签一个文件中的主要函数以便你以后可以从其他文件引入它。</p></li><li><p>定义函数： 使用 <code>function Profile() &#123; &#125;</code> 定义名为 <code>Profile</code> 的 JavaScript 函数。</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">React 组件是常规的 JavaScript 函数，但 组件的名称必须以大写字母开头，否则它们将无法运行！</p></li><li><p>添加标签：这个组件返回一个带有 <code>src</code> 和 <code>alt</code> 属性的 <code>&lt;img /&gt;</code> 标签。<code>&lt;img /&gt;</code> 写得像 HTML，但实际上是 JavaScript！这种语法被称为 <a href="http://localhost:3000/learn/writing-markup-with-jsx">JSX</a>，它允许你在 JavaScript 中嵌入使用标签。</p><p>返回语句可以全写在一行上，如下面组件中所示：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zl1ggplopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zl1ggplopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span></span>;<br></code></pre></td></tr></table></div></figure><p><mark>如果你的标签和 <code>return</code> 关键字不在同一行，则必须把它包裹在一对括号中</mark>，如下所示：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ccth8zlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ccth8zlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>没有括号包裹的话，任何在 <code>return</code> 下一行的代码都<a href="https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi">将被忽略</a>！</p></li></ol><p>现在你已经定义了 <code>Profile</code> 组件，你可以在其他组件中使用它。例如，你可以导出一个内部使用了多个 <code>Profile</code> 组件的 <code>Gallery</code> 组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yd0j1xlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yd0j1xlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>区别：</p><ul><li><code>&lt;section&gt;</code> 是小写的，所以 React 知道我们指的是 HTML 标签。</li><li><code>&lt;Profile /&gt;</code> 以大写 <code>P</code> 开头，所以 React 知道我们想要使用名为 <code>Profile</code> 的组件。</li></ul><p> <code>Profile</code> 包含更多的 HTML：<code>&lt;img /&gt;</code>。这是浏览器最后所看到的：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-j2sycllopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-j2sycllopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>因为 <code>Profile</code> 组件在 <code>Gallery</code> 组件中渲染——甚至好几次！——我们可以认为 <code>Gallery</code> 是一个 父组件，将每个 <code>Profile</code> 渲染为一个“孩子”。这是 React 的神奇之处：你可以只定义组件一次，然后按需多处和多次使用。</p><p>组件可以渲染其他组件，但是 请不要嵌套他们的定义：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ihotn8lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ihotn8lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 🔴 永远不要在组件中定义组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>上面这段代码 <a href="http://localhost:3000/learn/preserving-and-resetting-state#different-components-at-the-same-position-reset-state">非常慢，并且会导致 bug 产生</a>。因此，你应该在顶层定义每个组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1vyiy1lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1vyiy1lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// ✅ 在顶层声明组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>当子组件需要使用父组件的数据时，你需要 <a href="http://localhost:3000/learn/passing-props-to-a-component">通过 props 的形式进行传递</a>，而不是嵌套定义。</p><h2 id="2-组件的导入与导出"><a href="#2-组件的导入与导出" class="headerlink" title="2.组件的导入与导出"></a>2.组件的导入与导出</h2><p>对组件进行拆分：</p><ol><li><p>创建 一个新的 JS 文件来存放该组件。</p></li><li><p>导出 该文件中的函数组件（可以使用 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_the_default_export">默认导出</a> 或 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_named_exports">具名导出</a>）</p><ul><li><p>JavaScript 里两个主要用来导出值的方式：默认导出和具名导出。到目前为止，我们的示例中只用到了默认导出。但你可以在一个文件中，选择使用其中一种，或者两种都使用。</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">同一个文件里有且仅有一个默认导出，但是可以有任意多个 具名导出。</p><img src="image-20231103111403523.png" alt="image-20231103111403523" style="zoom:50%;" /><p>组件的导出方式决定了其导入方式。当你用默认导入的方式，导入具名导出的组件时，就会报错。如下表格可以帮你更好地理解它们：</p><table><thead><tr><th>语法</th><th>导出语句</th><th>导入语句</th></tr></thead><tbody><tr><td>默认</td><td><code>export default function Button() &#123;&#125;</code></td><td><code>import Button from &#39;./Button.js&#39;;</code></td></tr><tr><td>具名</td><td><code>export function Button() &#123;&#125;</code></td><td><code>import &#123; Button &#125; from &#39;./Button.js&#39;;</code></td></tr></tbody></table><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">当使用默认导入时，你可以在 `import` 语句后面进行任意命名。比如 `import Banana from './Button.js'`，如此你能获得与默认导出一致的内容。相反，对于具名导入，导入和导出的名字必须一致。这也是为什么称其为 具名 导入的原因！</p><p>通常，文件中仅包含一个组件时，人们会选择默认导出，而当文件中包含多个组件或某个值需要导出时，则会选择具名导出。 无论选择哪种方式，请记得给你的组件和相应的文件命名一个有意义的名字。我们不建议创建未命名的组件，比如 <code>export default () =&gt; &#123;&#125;</code>，因为这样会使得调试变得异常困难。</p></li></ul></li><li><p>在需要使用该组件的文件中 导入（可以根据相应的导出方式使用 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#importing_defaults">默认导入</a> 或 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#import_a_single_export_from_a_module">具名导入</a>）。</p></li></ol><p>这里将 <code>Profile</code> 组件和 <code>Gallery</code> 组件，从 <code>App.js</code> 文件中移动到了 <code>Gallery.js</code> 文件中。修改后，即可在 <code>App.js</code> 中导入 <code>Gallery.js</code> 中的 <code>Gallery</code> 组件：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ooon8plopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ooon8plopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//无论是 &#x27;./Gallery.js&#x27; 还是 &#x27;./Gallery&#x27;，在 React 里都能正常使用，只是前者更符合 原生 ES 模块。</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Gallery</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Gallery.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Gallery</span> /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Gallery.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6sbw9clopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6sbw9clopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/QIrZWGIs.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Alan L. Hart&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家们<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Gallery.js</p><ul><li>定义了 <code>Profile</code> 组件，该组件仅在该文件内使用，没有被导出。</li><li>使用 默认导出 的方式，将 <code>Gallery</code> 组件导出</li></ul><p>App.js</p><ul><li>使用 默认导入 的方式，从 <code>Gallery.js</code> 中导入 <code>Gallery</code> 组件。</li><li>使用 默认导出 的方式，将根组件 <code>App</code> 导出。</li></ul><h2 id="3-使用JSX书写标签语言"><a href="#3-使用JSX书写标签语言" class="headerlink" title="3.使用JSX书写标签语言"></a>3.使用JSX书写标签语言</h2><p>JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。</p><p>随着 Web 的交互性越来越强，逻辑越来越决定页面中的内容。JavaScript 负责 HTML 的内容！这也是为什么 在 React 中，渲染逻辑和标签共同存在于同一个地方——组件。</p><p>将一个按钮的渲染逻辑和标签放在一起可以确保它们在每次编辑时都能保持互相同步。反之，彼此无关的细节是互相隔离的，例如按钮的标签和侧边栏的标签。这样我们在修改其中任意一个组件时会更安全。</p><p>每个 React 组件都是一个 JavaScript 函数，它会返回一些标签，React 会将这些标签渲染到浏览器上。</p><p>JSX and React 是相互独立的 东西。但它们经常一起使用，但你 可以 单独使用它们中的任意一个，JSX 是一种语法扩展，而 React 则是一个 JavaScript 的库。</p><p>JSX 规则：</p><ol><li><p><mark>只能返回一个根元素</mark>：如果想要在一个组件中包含多个元素，需要用一个父标签把它们包裹起来。如果你不想在标签中增加一个额外的 <code>&lt;div&gt;</code>，可以用 <code>&lt;&gt;</code> 和 <code>&lt;/&gt;</code> 元素来代替。这个空标签被称作 *<a href="http://localhost:3000/reference/react/Fragment">Fragment</a>*。React Fragment 允许你将子元素分组，而不会在 HTML 结构中添加额外节点。</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">为什么多个 JSX 标签需要被一个父元素包裹：JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。</p></li><li><p><mark>标签必须正确闭合</mark>：像 <code>&lt;img&gt;</code> 这样的自闭合标签必须书写成 <code>&lt;img /&gt;</code>，而像 <code>&lt;li&gt;oranges</code> 这样只有开始标签的元素必须带有闭合标签，需要改为 <code>&lt;li&gt;oranges&lt;/li&gt;</code>。</p></li><li><p><mark>使用驼峰式命名法给大部分属性命名</mark>：JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在你自己的组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，<mark>变量名称不能包含 <code>-</code> 符号或者像 <code>class</code> 这样的保留字</mark>。</p></li></ol><p>  这就是为什么在 React 中，大部分 HTML 和 SVG 属性都用驼峰式命名法表示。例如，需要用 <code>strokeWidth</code> 代替 <code>stroke-width</code>。由于 <code>class</code> 是一个保留字，所以在 React 中需要用 <code>className</code> 来代替。这也是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/className">DOM 属性中的命名</a>:</p>  <figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-76552ilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-76552ilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;img   src=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span> <br>  alt=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span> <br>  className=<span class="hljs-string">&quot;photo&quot;</span><br>/&gt;<br></code></pre></td></tr></table></div></figure><p> 你可以 <a href="http://localhost:3000/reference/react-dom/components/common">在 React DOM 元素中找到所有对应的属性</a>。</p><p>由于历史原因，<a href="https://developer.mozilla.org/docs/Web/Accessibility/ARIA"><code>aria-*</code></a> 和 <a href="https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes"><code>data-*</code></a> 属性是以带 <code>-</code> 符号的 HTML 格式书写的。</p><p>HTML→JSX转化器：<a href="https://transform.tools/html-to-jsx">https://transform.tools/html-to-jsx</a></p><h2 id="4-在-JSX-中通过大括号使用-JavaScript"><a href="#4-在-JSX-中通过大括号使用-JavaScript" class="headerlink" title="4.在 JSX 中通过大括号使用 JavaScript"></a>4.在 JSX 中通过大括号使用 JavaScript</h2><p>当你想把一个字符串属性传递给 JSX 时，把它放到单引号或双引号中：<code>src=&quot;https://i.imgur.com/7vQD0fPs.jpg&quot;</code></p><p>如果你想要动态地指定 <code>src</code> 或 <code>alt</code> 的值呢？你可以 用 <code>&#123;</code> 和 <code>&#125;</code> 替代 <code>&quot;</code> 和 <code>&quot;</code> 以使用 JavaScript 变量 ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4s24bwlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4s24bwlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> avatar = <span class="hljs-string">&#x27;https://i.imgur.com/7vQD0fPs.jpg&#x27;</span>;<br>  <span class="hljs-keyword">const</span> description = <span class="hljs-string">&#x27;Gregorio Y. Zara&#x27;</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;avatar&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;description&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><mark>大括号内的任何 JavaScript 表达式都能正常运行</mark>，包括像 <code>formatDate()</code> 这样的函数调用：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-07nyf3lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-07nyf3lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDate</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">DateTimeFormat</span>(<br>    <span class="hljs-string">&#x27;zh-CN&#x27;</span>,<br>    &#123; <span class="hljs-attr">weekday</span>: <span class="hljs-string">&#x27;long&#x27;</span> &#125;<br>  ).<span class="hljs-title function_">format</span>(date);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>To Do List for &#123;formatDate(today)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 JSX 中，只能在以下两种场景中使用大括号：</p><ol><li><mark>用作 JSX 标签内的文本</mark>：<code>&lt;h1&gt;&#123;name&#125;&#39;s To Do List&lt;/h1&gt;</code> 是有效的，但是 <code>&lt;&#123;tag&#125;&gt;Gregorio Y. Zara&#39;s To Do List&lt;/&#123;tag&#125;&gt;</code> 无效。</li><li><mark>用作紧跟在 <code>=</code> 符号后的 属性</mark>：<code>src=&#123;avatar&#125;</code> 会读取 <code>avatar</code> 变量，但是 <code>src=&quot;&#123;avatar&#125;&quot;</code> 只会传一个字符串 <code>&#123;avatar&#125;</code>。</li></ol><p><mark>双大括号</mark>：除了字符串、数字和其它 JavaScript 表达式，你甚至可以在 JSX 中传递对象。对象也用大括号表示，例如 <code>&#123; name: &quot;Hedy Lamarr&quot;, inventions: 5 &#125;</code>。因此，为了能在 JSX 中传递，你必须用另一对额外的大括号包裹对象：<code>person=&#123;&#123; name: "Hedy Lamarr", inventions: 5 &#125;&#125;</code>。</p><p>React 不要求你使用内联样式（使用 CSS 类就能满足大部分情况）。但是当你需要内联样式的时候，你可以给 <code>style</code> 属性传递一个对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f6ufsslopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f6ufsslopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              &#123;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">black</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">color:</span> &#x27;<span class="hljs-attr">pink</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          &#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Improve the videophone<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Prepare aeronautics lectures<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Work on the alcohol-fuelled engine<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>内联 <code>style</code> 属性 使用驼峰命名法编写。例如，HTML <code>&lt;ul style=&quot;background-color: black&quot;&gt;</code> 在你的组件里应该写成 <code>&lt;ul style=&#123;&#123; backgroundColor: 'black' &#125;&#125;&gt;</code>。</p><p>可以将多个表达式合并到一个对象中，在 JSX 的大括号内分别使用它们：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ivkvy1lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ivkvy1lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Gregorio Y. Zara&#x27;</span>,<br>  <span class="hljs-attr">theme</span>: &#123;<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;black&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;pink&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;person.theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;person.name&#125;&#x27;s Todos<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span>       <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span>     <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/7vQD0fPs.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Gregorio Y. Zara&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-将props传递给组件"><a href="#5-将props传递给组件" class="headerlink" title="5.将props传递给组件"></a>5.将props传递给组件</h2><p>React 组件使用 props 来互相通信。每个父组件都可以提供 props 给它的子组件，从而将一些信息传递给它。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-711s27lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-711s27lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/1bX5QH6.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Lin Lanying&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>向组件传递props：</p><ol><li><p><mark>将 props 传递给子组件</mark>：<code>person</code>（一个对象）和 <code>size</code>（一个数字）：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1bwx6qlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1bwx6qlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">name:</span> &#x27;<span class="hljs-attr">Lin</span> <span class="hljs-attr">Lanying</span>&#x27;, <span class="hljs-attr">imageId:</span> &#x27;<span class="hljs-attr">1bX5QH6</span>&#x27; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>在子组件中读取 props</mark>：在 <code>function Avatar</code> 之后直接列出它们的名字 <code>person, size</code> 来读取这些 props。这些 props 在 <code>(&#123;</code> 和 <code>&#125;)</code> 之间，并由逗号分隔。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ntqj3blopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ntqj3blopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br>  <span class="hljs-comment">// 在这里 person 和 size 是可访问的</span><br>&#125;<br></code></pre></td></tr></table></div></figure></li></ol><p>props 正是 组件的唯一参数！ React 组件函数接受一个参数，一个 <code>props</code> 对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-aims1ilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-aims1ilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">let</span> person = props.<span class="hljs-property">person</span>;<br>  <span class="hljs-keyword">let</span> size = props.<span class="hljs-property">size</span>;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>通常你不需要整个 <code>props</code> 对象，所以可以将它解构为单独的 props。</p><p>在声明 props 时， 不要忘记 <code>(</code> 和 <code>)</code> 之间的一对花括号 <code>&#123;</code> 和 <code>&#125;</code>  ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1ues26lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1ues26lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>这种语法被称为 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Unpacking_fields_from_objects_passed_as_a_function_parameter">“解构”</a>，等价于于从函数参数中读取属性：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xs16nilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xs16nilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-keyword">let</span> person = props.<span class="hljs-property">person</span>;<br>    <span class="hljs-keyword">let</span> size = props.<span class="hljs-property">size</span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果你想在没有指定值的情况下给 prop 一个默认值，你可以通过在参数后面写 <code>=</code> 和默认值来进行解构：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0lqus4lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0lqus4lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size = <span class="hljs-number">100</span> &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在， 如果 <code>&lt;Avatar person=&#123;...&#125; /&gt;</code> 渲染时没有 <code>size</code> prop，  <code>size</code> 将被赋值为 <code>100</code>。</p><p>默认值仅在缺少 <code>size</code> prop 或 <code>size=&#123;undefined&#125;</code> 时生效。 但是<mark>如果你传递了 <code>size=&#123;null&#125;</code> 或 <code>size=&#123;0&#125;</code>，默认值将不被使用。</mark></p><p>重复：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7hpwt3lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7hpwt3lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params">&#123; person, size, isSepia, thickBorder &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;person&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;size&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isSepia</span>=<span class="hljs-string">&#123;isSepia&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">thickBorder</span>=<span class="hljs-string">&#123;thickBorder&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>改为<mark>使用 JSX 展开语法传递 props</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rskg5elopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rskg5elopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这会将 <code>Profile</code> 的所有 props 转发到 <code>Avatar</code>，而不列出每个名字。</p><p>请克制地使用展开语法。 如果你在所有其他组件中都使用它，那就有问题了。 通常，它表示你应该拆分组件，并将子组件作为 JSX 传递。 </p><p><mark>将 JSX 作为子组件传递</mark>：当您将内容嵌套在 JSX 标签中时，父组件将在名为 <code>children</code> 的 prop 中接收到该内容。例如，下面的 <code>Card</code> 组件将接收一个被设为 <code>&lt;Avatar /&gt;</code> 的 <code>children</code> prop 并将其包裹在 div 中渲染。</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-guxxovlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-guxxovlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Avatar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Avatar.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Card</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;&#123;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name:</span> &#x27;<span class="hljs-attr">Katsuko</span> <span class="hljs-attr">Saruhashi</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">imageId:</span> &#x27;<span class="hljs-attr">YfeOqp2</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Avatar.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g11c83lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g11c83lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; getImageUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./utils.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;getImageUrl(person)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;person.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;size&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height</span>=<span class="hljs-string">&#123;size&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>utils.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nxd8f4lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nxd8f4lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getImageUrl</span>(<span class="hljs-params">person, size = <span class="hljs-string">&#x27;s&#x27;</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-string">&#x27;https://i.imgur.com/&#x27;</span> +<br>    person.<span class="hljs-property">imageId</span> +<br>    size +<br>    <span class="hljs-string">&#x27;.jpg&#x27;</span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>一个组件可能会随着时间的推移收到不同的 props。 Props 并不总是静态的！Props 反映了组件在任何时间点的数据，并不仅仅是在开始时。</p><p>props 是 <a href="https://en.wikipedia.org/wiki/Immutable_object">不可变的</a>（一个计算机科学术语，意思是“不可改变”）。当一个组件需要改变它的 props（例如，响应用户交互或新数据）时，它不得不“请求”它的父组件传递 不同的 props —— 一个新对象！它的旧 props 将被丢弃，最终 JavaScript 引擎将回收它们占用的内存。</p><p>不要尝试“更改 props”。 当你需要响应用户输入（例如更改所选颜色）时，你可以“设置 state”。</p><h2 id="6-条件渲染"><a href="#6-条件渲染" class="headerlink" title="6.条件渲染"></a>6.条件渲染</h2><p> React 中，你可以通过使用 JavaScript 的 <code>if</code> 语句、<code>&amp;&amp;</code> 和 <code>? :</code> 运算符【又称条件运算符，三目运算符】来选择性地渲染 JSX。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lsxilulopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lsxilulopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Item</span>(<span class="hljs-params">&#123; name, isPacked &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (isPacked) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125; ✔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">PackingList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Sally Ride 的行李清单<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;true&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;宇航服&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;true&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;带金箔的头盔&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;false&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Tam 的照片&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231103154214180.png" alt="image-20231103154214180" style="zoom:50%;" /><p>条件运算符：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d8mpsilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d8mpsilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (isPacked) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125; ✔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-puvdkklopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-puvdkklopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;isPacked ? name + &#x27; ✔&#x27; : name&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>使用 <code>&amp;&amp;</code>，你也可以实现仅当 <code>isPacked</code> 为 <code>true</code> 时，渲染勾选符号。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g3t5g1lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g3t5g1lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;name&#125; &#123;isPacked &amp;&amp; &#x27;✔&#x27;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>当 <code>isPacked</code> 为真值时，则（<code>&amp;&amp;</code>）渲染勾选符号，否则，不渲染。</p><p>当 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND">JavaScript &amp;&amp; 表达式</a> 的左侧（我们的条件）为 <code>true</code> 时，它则返回其右侧的值（在我们的例子里是勾选符号）。但条件的结果是 <code>false</code>，则整个表达式会变成 <code>false</code>。在 JSX 里，React 会将 <code>false</code> 视为一个“空值”，就像 <code>null</code> 或者 <code>undefined</code>，这样 React 就不会在这里进行任何渲染。</p><p>切勿将数字放在 <code>&amp;&amp;</code> 左侧：<mark>JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否</mark>。然而，如果左侧是 <code>0</code>，整个表达式将变成左侧的值（<code>0</code>），React 此时则会渲染 <code>0</code> 而不是不进行渲染。</p><p>例如，一个常见的错误是 <code>messageCount &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;</code>。其原本是想当 <code>messageCount</code> 为 0 的时候不进行渲染，但实际上却渲染了 <code>0</code>。</p><p>为了更正，可以将左侧的值改成布尔类型：<code>messageCount &gt; 0 &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;</code>。</p><h2 id="7-渲染列表"><a href="#7-渲染列表" class="headerlink" title="7.渲染列表"></a>7.渲染列表</h2><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-89pus6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-89pus6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>凯瑟琳·约翰逊: 数学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>马里奥·莫利纳: 化学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>穆罕默德·阿卜杜勒·萨拉姆: 物理学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>珀西·莱温·朱利亚: 化学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苏布拉马尼扬·钱德拉塞卡: 天体物理学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cwbibplopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cwbibplopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> people = [<br>  <span class="hljs-string">&#x27;凯瑟琳·约翰逊: 数学家&#x27;</span>,<br>  <span class="hljs-string">&#x27;马里奥·莫利纳: 化学家&#x27;</span>,<br>  <span class="hljs-string">&#x27;穆罕默德·阿卜杜勒·萨拉姆: 物理学家&#x27;</span>,<br>  <span class="hljs-string">&#x27;珀西·莱温·朱利亚: 化学家&#x27;</span>,<br>  <span class="hljs-string">&#x27;苏布拉马尼扬·钱德拉塞卡: 天体物理学家&#x27;</span>,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> listItems = people.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;person&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>输出控制台错误：<code>Warning: Each child in a list should have a unique “key” prop.</code></p><p>解决方法：因为你必须给数组中的每一项都指定一个 <code>key</code>——它可以是字符串或数字的形式，只要能唯一标识出各个数组项就行：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-elsmkplopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-elsmkplopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;li key=&#123;person.<span class="hljs-property">id</span>&#125;&gt;...&lt;/li&gt;<br></code></pre></td></tr></table></div></figure><p><mark>直接放在 <code>map()</code> 方法里的 JSX 元素一般都需要指定 <code>key</code> 值！</mark></p><p>不同来源的数据往往对应不同的 key 值获取方式：</p><ul><li>来自数据库的数据： 如果你的数据是从数据库中获取的，那你可以直接使用数据表中的主键，因为它们天然具有唯一性。</li><li>本地产生数据： 如果你数据的产生和保存都在本地（例如笔记软件里的笔记），那么你可以使用一个自增计数器或者一个类似 <a href="https://www.npmjs.com/package/uuid"><code>uuid</code></a> 的库来生成 key。</li></ul><p>key 需要满足的条件：</p><ol><li>key 值在兄弟节点之间必须是唯一的。 不过不要求全局唯一，在不同的数组中可以使用相同的 key。</li><li>key 值不能改变，否则就失去了使用 key 的意义！所以千万不要在渲染时动态地生成 key。</li></ol><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">你可能会想直接把数组项的索引当作 key 值来用，实际上，如果你没有显式地指定 `key` 值，React 确实默认会这么做。但是数组项的顺序在插入、删除或者重新排序等操作中会发生改变，此时把索引顺序用作 key 值会产生一些微妙且令人困惑的 bug。<br />与之类似，请不要在运行过程中动态地产生 key，像是 `key={Math.random()}` 这种方式。这会导致每次重新渲染后的 key 值都不一样，从而使得所有的组件和 DOM 元素每次都要重新创建。这不仅会造成运行变慢的问题，更有可能导致用户输入的丢失。所以，使用能从给定数据中稳定取得的值才是明智的选择。<p>有一点需要注意，组件不会把 <code>key</code> 当作 props 的一部分。Key 的存在只对 React 本身起到提示作用。如果你的组件需要一个 ID，那么请把它作为一个单独的 prop 传给组件： <code>&lt;Profile key=&#123;id&#125; userId=&#123;id&#125; /&gt;</code>。</p></p><hr><p>data.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yfegfblopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yfegfblopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> people = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;凯瑟琳·约翰逊&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;数学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;太空飞行相关数值的核算&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;MK3eW3A&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;马里奥·莫利纳&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;化学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;北极臭氧空洞的发现&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;mynHUSa&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;穆罕默德·阿卜杜勒·萨拉姆&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;物理学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;关于基本粒子间弱相互作用和电磁相互作用的统一理论&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;bE7W1ji&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;珀西·莱温·朱利亚&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;化学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;开创性的可的松药物、类固醇和避孕药的研究&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;IOjWm71&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;苏布拉马尼扬·钱德拉塞卡&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;天体物理学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;白矮星质量计算&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;lrWQx8l&#x27;</span>,<br>  &#125;,<br>];<br></code></pre></td></tr></table></div></figure><p>utils.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y7fkhtlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y7fkhtlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getImageUrl</span>(<span class="hljs-params">person</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-string">&#x27;https://i.imgur.com/&#x27;</span> +<br>    person.<span class="hljs-property">imageId</span> +<br>    <span class="hljs-string">&#x27;s.jpg&#x27;</span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yfgy5qlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yfgy5qlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; people &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getImageUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./utils.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> chemists = people.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>    person.<span class="hljs-property">profession</span> === <span class="hljs-string">&#x27;化学家&#x27;</span><br>  );<br>  <span class="hljs-keyword">const</span> listItems = chemists.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;getImageUrl(person)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;person.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;person.name&#125;:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="language-xml">        &#123;&#x27; &#x27; + person.profession + &#x27; &#x27;&#125;</span><br><span class="language-xml">        因&#123;person.accomplishment&#125;而闻名世界</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>控制台错误：<code>Warning: Each child in a list should have a unique &quot;key&quot; prop. Check the render method of List. See https://reactjs.org/link/warning-keys for more information.    at li    at List</code></p><p><mark>因为箭头函数会隐式地返回位于 <code>=&gt;</code> 之后的表达式，所以你可以省略 <code>return</code> 语句。</mark></p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-m9mu3alopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-m9mu3alopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> listItems = chemists.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span> <span class="hljs-comment">// 隐式地返回！</span><br><br>);<br></code></pre></td></tr></table></div></figure><p><mark>如果你的 <code>=&gt;</code> 后面跟了一对花括号 <code>&#123;</code> ，那你必须使用 <code>return</code> 来指定返回值！</mark></p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3j4dphlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3j4dphlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> listItems = chemists.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span> &#123; <span class="hljs-comment">// 花括号</span><br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>箭头函数 <code>=&gt; &#123;</code> 后面的部分被称为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body">“块函数体”</a>，块函数体支持多行代码的写法，但要用 <code>return</code> 语句才能指定返回值。假如你忘了写 <code>return</code>，那这个函数什么都不会返回！</p><p>为每个列表项显示多个 DOM 节点：Fragment 语法的简写形式 <code>&lt;&gt; &lt;/&gt;</code> 无法接受 key 值，所以你只能要么把生成的节点用一个 <code>&lt;div&gt;</code> 标签包裹起来，要么使用长一点但更明确的 <code>&lt;Fragment&gt;</code> 写法：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-liwmixlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-liwmixlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Fragment</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> listItems = people.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;person.id&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;person.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;person.bio&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>这里的 Fragment 标签本身并不会出现在 DOM 上，这串代码最终会转换成 <code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>…… 的列表。</p><h2 id="8-保持组件纯粹"><a href="#8-保持组件纯粹" class="headerlink" title="8.保持组件纯粹"></a>8.保持组件纯粹</h2><p>部分 JavaScript 函数是 纯粹 的，这类函数通常被称为纯函数。纯函数仅执行计算操作，不做其他操作。你可以通过将组件按纯函数严格编写，以避免一些随着代码库的增长而出现的、令人困扰的 bug 以及不可预测的行为。</p><p>纯函数的特征：</p><ul><li>只负责自己的任务。它不会更改在该函数调用前就已存在的对象或变量。</li><li>输入相同，则输出相同。给定相同的输入，纯函数应总是返回相同的结果。</li></ul><p>React 假设你编写的所有组件都是纯函数。也就是说，对于相同的输入，你所编写的 React 组件必须总是返回相同的 JSX。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8s4vgalopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8s4vgalopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Recipe</span>(<span class="hljs-params">&#123; drinkers &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>    </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Boil &#123;drinkers&#125; cups of water.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Add &#123;drinkers&#125; spoons of tea and &#123;0.5 * drinkers&#125; spoons of spice.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Add &#123;0.5 * drinkers&#125; cups of milk to boil and sugar to taste.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Spiced Chai Recipe<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>For two<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Recipe</span> <span class="hljs-attr">drinkers</span>=<span class="hljs-string">&#123;2&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>For a gathering<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Recipe</span> <span class="hljs-attr">drinkers</span>=<span class="hljs-string">&#123;4&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>React 的渲染过程必须自始至终是纯粹的。组件应该只 返回 它们的 JSX，而不 改变 在渲染前，就已存在的任何对象或变量 — 这将会使它们变得不纯粹！</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-56awmklopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-56awmklopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> guest = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Bad: changing a preexisting variable!</span><br>  guest = guest + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaSet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p> <a href="http://localhost:3000/learn/passing-props-to-a-component">将 <code>guest</code> 作为 prop 传入</a> 来修复此组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-85qy7flopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-85qy7flopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params">&#123; guest &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaSet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;1&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;2&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;3&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 React 中，你可以在渲染时读取三种输入：<a href="http://localhost:3000/learn/passing-props-to-a-component">props</a>，<a href="http://localhost:3000/learn/state-a-components-memory">state</a> 和 <a href="http://localhost:3000/learn/passing-data-deeply-with-context">context</a>。你应该始终将这些输入视为只读。</p><p>当你想根据用户输入更改某些内容时，你应该 <a href="http://localhost:3000/learn/state-a-components-memory">设置state</a>，而不是直接写入变量。当你的组件正在渲染时，你永远不应该改变预先存在的变量或对象。</p><p>React 提供了 “严格模式”，在严格模式下开发时，它将会调用每个组件函数两次。通过重复调用组件函数，严格模式有助于找到违反这些规则的组件。</p><p>严格模式在生产环境下不生效，因此它不会降低应用程序的速度。如需引入严格模式，你可以用 <code>&lt;React.StrictMode&gt;</code> 包裹根组件。一些框架会默认这样做。</p><hr><p>&#x3D;&#x3D;突变&#x3D;&#x3D;mutation：在渲染过程中，组件改变了 预先存在的 变量的值 。纯函数不会改变函数作用域外的变量、或在函数调用前创建的对象——这会使函数变得不纯粹！</p><p>但是，你完全可以在渲染时更改你刚刚创建的变量和对象。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-79xppolopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-79xppolopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params">&#123; guest &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaGathering</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> cups = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++) &#123;<br>    cups.<span class="hljs-title function_">push</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;i&#125;</span> /&gt;</span></span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> cups;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果 <code>cups</code> 变量或 <code>[]</code> 数组是在 <code>TeaGathering</code> 函数之外创建的，这将是一个很大的问题！因为如果那样的话，当你调用数组的 push 方法时，就会更改 预先存在的 对象。</p><p>但是，这里不会有影响，因为每次渲染时，你都是在 <code>TeaGathering</code> 函数内部创建的它们。TeaGathering 之外的代码并不会知道发生了什么即局部mutation。</p><p> 副作用：更新屏幕、启动动画、更改数据等。它们是 “额外” 发生的事情，与渲染过程无关。</p><p>在 React 中，副作用通常属于 <a href="http://localhost:3000/learn/responding-to-events">事件处理程序</a>。事件处理程序是 React 在你执行某些操作（如单击按钮）时运行的函数。即使事件处理程序是在你的组件 内部 定义的，它们也不会在渲染期间运行！ 因此事件处理程序无需是纯函数。</p><p>如果你用尽一切办法，仍无法为副作用找到合适的事件处理程序，你还可以调用组件中的 <a href="http://localhost:3000/reference/react/useEffect"><code>useEffect</code></a> 方法将其附加到返回的 JSX 中。这会告诉 React 在渲染结束后执行它。然而，这种方法应该是你最后的手段。</p><p>React 为何侧重于纯函数：</p><ol><li>你的组件可以在不同的环境下运行 — 例如，在服务器上！由于它们针对相同的输入，总是返回相同的结果，因此一个组件可以满足多个用户请求。</li><li>你可以为那些输入未更改的组件来 <a href="http://localhost:3000/reference/react/memo">跳过渲染</a>，以提高性能。这是安全的做法，因为纯函数总是返回相同的结果，所以可以安全地缓存它们。</li><li>如果在渲染深层组件树的过程中，某些数据发生了变化，React 可以重新开始渲染，而不会浪费时间完成过时的渲染。纯粹性使得它随时可以安全地停止计算。</li></ol><p>我们正在构建的每个 React 新特性都利用到了纯函数。从数据获取到动画再到性能，保持组件的纯粹可以充分释放 React 范式的能力。</p><h2 id="9-将UI视为树"><a href="#9-将UI视为树" class="headerlink" title="9.将UI视为树"></a>9.将UI视为树</h2><p>React 创建的 UI 树是由渲染过的组件构成的，被称为渲染树。</p><p>渲染树表示 React 应用程序的单个渲染过程。在 <a href="http://localhost:3000/learn/conditional-rendering">条件渲染</a> 中，父组件可以根据传递的数据渲染不同的子组件。每次渲染过程的渲染树可能都不同。</p><p>在 React 应用程序中，可以使用树来建模的另一个关系是应用程序的模块依赖关系。当 <a href="http://localhost:3000/learn/importing-and-exporting-components#exporting-and-importing-a-component">拆分组件</a> 和逻辑到不同的文件中时，就创建了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">JavaScript 模块</a>，在这些模块中可以导出组件、函数或常量。</p><p>模块依赖树中的每个节点都是一个模块，每个分支代表该模块中的 <code>import</code> 语句。</p><p>渲染树：</p><img src="image-20231103171110755.png" alt="image-20231103171110755" style="zoom:50%;" /><p>模块依赖树：</p><img src="image-20231103171127909.png" alt="image-20231103171127909" style="zoom:50%;" /><p>依赖树对于确定运行 React 应用程序所需的模块非常有用。在为生产环境构建 React 应用程序时，通常会有一个构建步骤，该步骤将捆绑所有必要的 JavaScript 以供客户端使用。负责此操作的工具称为 <a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview#the_modern_tooling_ecosystem">bundler（捆绑器）</a>，并且 bundler 将使用依赖树来确定应包含哪些模块。</p><p>随着应用程序的增长，捆绑包大小通常也会增加。大型捆绑包大小对于客户端来说下载和运行成本高昂，并延迟 UI 绘制的时间。了解应用程序的依赖树可能有助于调试这些问题。</p><h1 id="四-添加交互"><a href="#四-添加交互" class="headerlink" title="四.添加交互"></a>四.添加交互</h1><p>在 React 中，随时间变化的数据被称为状态state。你可以向任何组件添加状态，并按需进行更新。</p><h2 id="1-响应事件"><a href="#1-响应事件" class="headerlink" title="1.响应事件"></a>1.响应事件</h2><p>React 允许你向 JSX 中添加事件处理程序。</p><p><code>&lt;button&gt;</code> 等内置组件只支持内置浏览器事件，如 <code>onClick</code>。可以定义 <code>handleClick</code> 函数然后 <a href="http://localhost:3000/learn/passing-props-to-a-component">将其作为 prop 传入</a> <code>&lt;button&gt;</code>。其中 <code>handleClick</code> 是一个 事件处理函数 。<mark>事件处理函数</mark>有如下特点:</p><ul><li>通常在你的组件 内部 定义。</li><li>名称以 <code>handle</code> 开头，后跟事件名称。</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9daathlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9daathlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      点我</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>或者，你也可以在 JSX 中定义一个内联的事件处理函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gbij6vlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gbij6vlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>);<br><br>&#125;&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>或者，直接使用更为简洁箭头函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6smg6flopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6smg6flopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>);<br><br>&#125;&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>传递给事件处理函数的函数应直接传递，而非调用。例如：</p><table><thead><tr><th>传递一个函数（正确）</th><th>调用一个函数（错误）</th></tr></thead><tbody><tr><td><code>&lt;button onClick=&#123;handleClick&#125;&gt;</code></td><td><code>&lt;button onClick=&#123;handleClick()&#125;&gt;</code></td></tr></tbody></table><p>区别很微妙。在第一个示例中，<code>handleClick</code> 函数作为 <code>onClick</code> 事件处理函数传递。这会让 React 记住它，并且只在用户点击按钮时调用你的函数。</p><p>在第二个示例中，<code>handleClick()</code> 中最后的 <code>()</code> 会在 <a href="http://localhost:3000/learn/render-and-commit">渲染</a> 过程中 立即 触发函数，即使没有任何点击。这是因为在 <a href="http://localhost:3000/learn/javascript-in-jsx-with-curly-braces">JSX <code>&#123;</code> 和 <code>&#125;</code></a> 之间的 JavaScript 会立即执行。</p><p>当你编写内联代码时，同样的陷阱可能会以不同的方式出现：</p><table><thead><tr><th>传递一个函数（正确）</th><th>调用一个函数（错误）</th></tr></thead><tbody><tr><td><code>&lt;button onClick=&#123;() =&gt; alert(&#39;...&#39;)&#125;&gt;</code></td><td><code>&lt;button onClick=&#123;alert(&#39;...&#39;)&#125;&gt;</code></td></tr></tbody></table><p>如果按如下方式传递内联代码，并不会在点击时触发，而是会在每次组件渲染时触发：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qlqvk6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qlqvk6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 这个 alert 在组件渲染时触发，而不是点击时触发！</span><br><br>&lt;button onClick=&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>)&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>如果你想要定义内联事件处理函数，请将其包装在匿名函数中，如下所示：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x0dl5zlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x0dl5zlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>)&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>这里创建了一个稍后调用的函数，而不会在每次渲染时执行其内部代码。</p><p>在这两种情况下，你都应该传递一个函数：</p><ul><li><code>&lt;button onClick=&#123;handleClick&#125;&gt;</code> 传递了 <code>handleClick</code> 函数。</li><li><code>&lt;button onClick=&#123;() =&gt; alert(&#39;...&#39;)&#125;&gt;</code> 传递了 <code>() =&gt; alert(&#39;...&#39;)</code> 函数。</li></ul><p>由于事件处理函数声明于组件内部，因此它们可以直接访问组件的 props：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-toxisglopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-toxisglopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AlertButton</span>(<span class="hljs-params">&#123; message, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(message)&#125;&gt;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AlertButton</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&quot;正在播放！&quot;</span>&gt;</span></span><br><span class="language-xml">        播放电影</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">AlertButton</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AlertButton</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&quot;正在上传！&quot;</span>&gt;</span></span><br><span class="language-xml">        上传图片</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">AlertButton</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>通常，我们会在父组件中定义子组件的事件处理函数。比如：置于不同位置的 <code>Button</code> 组件，可能最终执行的功能也不同。</p><p>为此，将组件从父组件接收的 prop 作为事件处理函数传递：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wb46j5lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wb46j5lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">PlayButton</span>(<span class="hljs-params">&#123; movieName &#125;</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePlayClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`正在播放 <span class="hljs-subst">$&#123;movieName&#125;</span>！`</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handlePlayClick&#125;</span>&gt;</span></span><br><span class="language-xml">      播放 &quot;&#123;movieName&#125;&quot;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">UploadButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在上传！&#x27;)&#125;&gt;</span><br><span class="language-xml">      上传图片</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">PlayButton</span> <span class="hljs-attr">movieName</span>=<span class="hljs-string">&quot;魔女宅急便&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">UploadButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>Toolbar</code> 组件渲染了一个 <code>PlayButton</code> 组件和 <code>UploadButton</code> 组件：</p><ul><li><code>PlayButton</code> 将 <code>handlePlayClick</code> 作为 <code>onClick</code> prop 传入 <code>Button</code> 组件内部。</li><li><code>UploadButton</code> 将 <code>() =&gt; alert(&#39;正在上传！&#39;)</code> 作为 <code>onClick</code> prop 传入 <code>Button</code> 组件内部。</li></ul><p>内置组件（<code>&lt;button&gt;</code> 和 <code>&lt;div&gt;</code>）仅支持 <a href="http://localhost:3000/reference/react-dom/components/common#common-props">浏览器事件名称</a>，例如 <code>onClick</code>。但是，当你构建自己的组件时，你可以按你个人喜好命名事件处理函数的 prop。</p><p><mark>按照惯例，事件处理函数 props 应该以 <code>on</code> 开头，后跟一个大写字母。</mark></p><p>例如，<code>Button</code> 组件的 <code>onClick</code> prop 本来也可以被命名为 <code>onSmash</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cf9inylopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cf9inylopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onSmash, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onSmash&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onSmash</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在播放！&#x27;)&#125;&gt;</span><br><span class="language-xml">        播放电影</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onSmash</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在上传！&#x27;)&#125;&gt;</span><br><span class="language-xml">        上传图片</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>&lt;button onClick=&#123;onSmash&#125;&gt;</code> 代表浏览器内置的 <code>&lt;button&gt;</code>（小写）仍然需要使用 <code>onClick</code> prop，而自定义的 <code>Button</code> 组件接收到的 prop 名称可由你决定！</p><p><mark>确保为事件处理程序使用适当的 HTML 标签。例如，要处理点击事件，请使用 <code>&lt;div onClick=&#123;handleClick&#125;&gt;</code>。使用真正的浏览器 <code>&lt;button&gt;</code> 启用内置的浏览器行为，如键盘导航。</mark></p><p>事件处理函数还将捕获任何来自子组件的事件。</p><p><mark>事件传播</mark>：事件会沿着树向上“冒泡”或“传播”：它从事件发生的地方开始，然后沿着树向上传播。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ucbay6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ucbay6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Toolbar&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      alert(&#x27;你点击了 toolbar ！&#x27;);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在播放！&#x27;)&#125;&gt;</span><br><span class="language-xml">        播放电影</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在上传！&#x27;)&#125;&gt;</span><br><span class="language-xml">        上传图片</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="事件传播.gif" alt="事件传播" style="zoom:50%;" /><p>如果你点击任一按钮，它自身的 <code>onClick</code> 将首先执行，然后父级 <code>&lt;div&gt;</code> 的 <code>onClick</code> 会接着执行。因此会出现两条消息。如果你点击 toolbar 本身，将只有父级 <code>&lt;div&gt;</code> 的 <code>onClick</code> 会执行。</p><p>在 React 中所有事件都会传播，除了 <code>onScroll</code>，它仅适用于你附加到的 JSX 标签。</p><p><mark>阻止传播</mark>：事件处理函数接收一个 事件对象 作为唯一的参数。按照惯例，它通常被称为 <code>e</code> ，代表 “event”（事件）。你可以使用此对象来读取有关事件的信息。</p><p>这个事件对象还允许你阻止传播。如果你想阻止一个事件到达父组件，你需要像下面 <code>Button</code> 组件那样调用 <code>e.stopPropagation()</code> ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f7uy77lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f7uy77lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">      e.stopPropagation();</span><br><span class="language-xml">      onClick();</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Toolbar&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      alert(&#x27;你点击了 toolbar ！&#x27;);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在播放！&#x27;)&#125;&gt;</span><br><span class="language-xml">        播放电影</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在上传！&#x27;)&#125;&gt;</span><br><span class="language-xml">        上传图片</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>当你点击按钮时：</p><ol><li><p>React 调用了传递给 <code>&lt;button&gt;</code> 的 <code>onClick</code> 处理函数。</p></li><li><p>定义在Button中的处理函数执行了如下操作：</p><ul><li>调用 <code>e.stopPropagation()</code>，阻止事件进一步冒泡。</li><li>调用 <code>onClick</code> 函数，它是从 <code>Toolbar</code> 组件传递过来的 prop。</li></ul></li><li><p>在 <code>Toolbar</code> 组件中定义的函数，显示按钮对应的 alert。</p></li><li><p>由于传播被阻止，父级 <code>&lt;div&gt;</code> 的 <code>onClick</code> 处理函数不会执行。</p></li></ol><p>由于调用了 <code>e.stopPropagation()</code>，点击按钮现在将只显示一个 alert（来自 <code>&lt;button&gt;</code>），而并非两个（分别来自 <code>&lt;button&gt;</code> 和父级 toolbar <code>&lt;div&gt;</code>）。</p><hr><p><mark>捕获阶段事件</mark>：极少数情况下，你可能需要捕获子元素上的所有事件，即便它们阻止了传播。例如，你可能想对每次点击进行埋点记录，传播逻辑暂且不论。那么你可以通过在事件名称末尾添加 <code>Capture</code> 来实现这一点：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ensr2alopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ensr2alopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div onClickCapture=&#123;<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">/* 这会首先执行 */</span> &#125;&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> e.stopPropagation()&#125; /&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> e.stopPropagation()&#125; /&gt;</span><br>&lt;/div&gt;<br></code></pre></td></tr></table></div></figure><p>每个事件分三个阶段传播：</p><ol><li>它向下传播，调用所有的 <code>onClickCapture</code> 处理函数。</li><li>它执行被点击元素的 <code>onClick</code> 处理函数。</li><li>它向上传播，调用所有的 <code>onClick</code> 处理函数。</li></ol><p>捕获事件对于路由或数据分析之类的代码很有用，但你可能不会在应用程序代码中使用它们。</p><hr><p><mark>传递处理函数作为事件传播的替代方案</mark>：注意，此处的点击事件处理函数先执行了一行代码，然后调用了父组件传递的 <code>onClick</code> prop：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xrtm6ylopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xrtm6ylopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">      e.stopPropagation();</span><br><span class="language-xml">      onClick();</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>你也可以在调用父元素 <code>onClick</code> 函数之前，向这个处理函数添加更多代码。此模式是事件传播的另一种 替代方案 。它让子组件处理事件，同时也让父组件指定一些额外的行为。与事件传播不同，它并非自动。但使用这种模式的好处是你可以清楚地追踪因某个事件的触发而执行的整条代码链。</p><p>如果你依赖于事件传播，而且很难追踪哪些处理程序在执行，及其执行的原因，可以尝试这种方法。</p><hr><p>某些浏览器事件具有与事件相关联的默认行为。例如，点击 <code>&lt;form&gt;</code> 表单内部的按钮会触发表单提交事件，<mark>默认情况下将重新加载整个页面</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nig4xdlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nig4xdlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Signup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;提交表单！&#x27;)&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="默认行为.gif" alt="默认行为" style="zoom:50%;" /><p>可以调用事件对象中的 <code>e.preventDefault()</code> 来阻止这种情况发生：页面不会重新加载。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2rbt1llopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2rbt1llopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Signup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">      e.preventDefault();</span><br><span class="language-xml">      alert(&#x27;提交表单！&#x27;);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>区别：</p><ul><li><a href="https://developer.mozilla.org/docs/Web/API/Event/stopPropagation"><code>e.stopPropagation()</code></a> 阻止触发绑定在外层标签上的事件处理函数。</li><li><a href="https://developer.mozilla.org/docs/Web/API/Event/preventDefault"><code>e.preventDefault()</code></a> 阻止少数事件的默认浏览器行为。</li></ul><p>事件处理函数是执行副作用的最佳位置。</p><p>与渲染函数不同，事件处理函数不需要是 <a href="http://localhost:3000/learn/keeping-components-pure">纯函数</a>，因此它是用来 <em>更改</em> 某些值的绝佳位置。例如，更改输入框的值以响应键入，或者更改列表以响应按钮的触发。但是，为了更改某些信息，你首先需要某种方式存储它。在 React 中，这是通过 <a href="http://localhost:3000/learn/state-a-components-memory">state（组件的记忆）</a> 来完成的。</p><h2 id="2-State：组件的记忆"><a href="#2-State：组件的记忆" class="headerlink" title="2.State：组件的记忆"></a>2.State：组件的记忆</h2><p>可以用 <a href="http://localhost:3000/reference/react/useState"><code>useState</code></a> Hook 为组件添加状态。<em>Hook</em> 是能让你的组件使用 React 功能的特殊函数（状态是这些功能之一），只在 React <a href="http://localhost:3000/learn/render-and-commit#step-1-trigger-a-render">渲染</a>时有效。它们能让你 “hook” 到不同的 React 特性中去。<code>useState</code> Hook 让你声明一个状态变量。它接收初始状态并返回一对值：当前状态，以及一个让你更新状态的设置函数。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zgf0fjlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zgf0fjlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">const</span> [showMore, setShowMore] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></div></figure><p>Hooks ——以 <code>use</code> 开头的函数——只能在组件或<a href="http://localhost:3000/learn/reusing-logic-with-custom-hooks">自定义 Hook</a> 的最顶层调用。 你不能在条件语句、循环语句或其他嵌套函数内调用 Hook。Hook 是函数，但将它们视为关于组件需求的无条件声明会很有帮助。在组件顶部 “use” React 特性，类似于在文件顶部“导入”模块。</p><p>点击 “Next” 按钮应该显示下一个雕塑并将 <code>index</code> 更改为 <code>1</code>，再次点击又更改为 <code>2</code>，以此类推。但这个组件现在不起作用：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xi8ie3lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xi8ie3lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; sculptureList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    index = index + <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> sculpture = sculptureList[index];<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;sculpture.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> </span><br><span class="language-xml">        by &#123;sculpture.artist&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  </span><br><span class="language-xml">        (&#123;index + 1&#125; of &#123;sculptureList.length&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;sculpture.url&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;sculpture.alt&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#123;sculpture.description&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>handleClick()</code> 事件处理函数正在更新局部变量 <code>index</code>。但存在两个原因使得变化不可见：</p><ol><li>局部变量无法在多次渲染中持久保存。 当 React 再次渲染这个组件时，它会从头开始渲染——不会考虑之前对局部变量的任何更改。</li><li>更改局部变量不会触发渲染。 React 没有意识到它需要使用新数据再次渲染组件。</li></ol><p>要使用新数据更新组件，需要做两件事：</p><ol><li>保留 渲染之间的数据。</li><li>触发 React 使用新数据渲染组件（重新渲染）。</li></ol><p><a href="http://localhost:3000/reference/react/useState"><code>useState</code></a> Hook 提供了这两个功能：</p><ol><li>State 变量 用于保存渲染间的数据。</li><li>State setter 函数 更新变量并触发 React 再次渲染组件。</li></ol><p>要添加 state 变量，先从文件顶部的 React 中导入 <code>useState</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-r5zvxilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-r5zvxilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>然后，替换这一行：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8huoorlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8huoorlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></div></figure><p>将其修改为</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-txm2t6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-txm2t6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p><code>index</code> 是一个 state 变量，<code>setIndex</code> 是对应的 setter 函数。</p><p>这里的 <code>[</code> 和 <code>]</code> 语法称为<a href="http://localhost:3000/learn/a-javascript-refresher#array-destructuring">数组解构</a>，它允许你从数组中读取值。 <code>useState</code> 返回的数组总是正好有两项。</p><p>以下展示了它们在 <code>handleClick()</code> 中是如何共同起作用的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-geu1ymlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-geu1ymlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在点击 “Next” 按钮切换当前雕塑：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0l7ibvlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0l7ibvlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; sculptureList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> sculpture = sculptureList[index];<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;sculpture.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> </span><br><span class="language-xml">        by &#123;sculpture.artist&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  </span><br><span class="language-xml">        (&#123;index + 1&#125; of &#123;sculptureList.length&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;sculpture.url&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;sculpture.alt&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#123;sculpture.description&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>useState</code> 的唯一参数是 state 变量的初始值。在这个例子中，<code>index</code> 的初始值被<code>useState(0)</code>设置为 <code>0</code>。</p><p>每次你的组件渲染时，<code>useState</code> 都会给你一个包含两个值的数组：</p><ol><li>state 变量 (<code>index</code>) 会保存上次渲染的值。</li><li>state setter 函数 (<code>setIndex</code>) 可以更新 state 变量并触发 React 重新渲染组件。</li></ol><p>以下是实际发生的情况：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-20ymqzlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-20ymqzlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><ol><li>组件进行第一次渲染。 因为你将 <code>0</code> 作为 <code>index</code> 的初始值传递给 <code>useState</code>，它将返回 <code>[0, setIndex]</code>。 React 记住 <code>0</code> 是最新的 state 值。</li><li>你更新了 state。当用户点击按钮时，它会调用 <code>setIndex(index + 1)</code>。 <code>index</code> 是 <code>0</code>，所以它是 <code>setIndex(1)</code>。这告诉 React 现在记住 <code>index</code> 是 <code>1</code> 并触发下一次渲染。</li><li>组件进行第二次渲染。React 仍然看到 <code>useState(0)</code>，但是因为 React <em>记住</em> 了你将 <code>index</code> 设置为了 <code>1</code>，它将返回 <code>[1, setIndex]</code>。</li><li>以此类推！</li></ol><p><mark>赋予一个组件多个 state 变量</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x4smpwlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x4smpwlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; sculptureList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [showMore, setShowMore] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNextClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleMoreClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setShowMore</span>(!showMore);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> sculpture = sculptureList[index];<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleNextClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;sculpture.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> </span><br><span class="language-xml">        by &#123;sculpture.artist&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  </span><br><span class="language-xml">        (&#123;index + 1&#125; of &#123;sculptureList.length&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleMoreClick&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;showMore ? &#x27;Hide&#x27; : &#x27;Show&#x27;&#125; details</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;showMore &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;sculpture.description&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;sculpture.url&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;sculpture.alt&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果它们不相关，那么存在多个 state 变量是一个好主意，例如本例中的 <code>index</code> 和 <code>showMore</code>。但是，如果你发现经常同时更改两个 state 变量，那么最好将它们合并为一个。例如，如果你有一个包含多个字段的表单，那么有一个值为对象的 state 变量比每个字段对应一个 state 变量更方便。 <a href="http://localhost:3000/learn/choosing-the-state-structure">选择 state 结构</a>在这方面有更多提示。</p><p><code>useState</code> 在调用时没有任何关于它引用的是<em>哪个</em> state 变量的信息。没有传递给 <code>useState</code> 的“标识符”，它是如何知道要返回哪个 state 变量呢？它是否依赖于解析函数之类的魔法？答案是否定的。</p><p>相反，为了使语法更简洁，在同一组件的每次渲染中，Hooks 都依托于一个稳定的调用顺序。这在实践中很有效，因为如果你遵循上面的规则（“只在顶层调用 Hooks”），Hooks 将始终以相同的顺序被调用。此外，<a href="https://www.npmjs.com/package/eslint-plugin-react-hooks">linter 插件</a>也可以捕获大多数错误。</p><p>在 React 内部，为每个组件保存了一个数组，其中每一项都是一个 state 对。它维护当前 state 对的索引值，在渲染之前将其设置为 “0”。每次调用 useState 时，React 都会为你提供一个 state 对并增加索引值。</p><hr><p><mark>State 是隔离且私有的</mark>：State 是屏幕上组件实例内部的状态。换句话说，如果你渲染同一个组件两次，每个副本都会有完全隔离的 state！改变其中一个不会影响另一个。</p><p>state 与声明在模块顶部的普通变量的区别： State 不依赖于特定的函数调用或在代码中的位置，它的作用域“只限于”屏幕上的某块特定区域。</p><p><code>Page</code> 组件“不知道”关于 <code>Gallery</code> state 的任何信息，甚至不知道它是否有任何 state。与 props 不同，&#x3D;&#x3D;state 完全私有于声明它的组件&#x3D;&#x3D;。父组件无法更改它。这使你可以向任何组件添加或删除 state，而不会影响其他组件。</p><p>如果你希望两个画廊保持其 states 同步怎么办？在 React 中执行此操作的正确方法是从子组件中<em>删除</em> state 并将其添加到离它们最近的共享父组件中。</p><h2 id="3-渲染和提交"><a href="#3-渲染和提交" class="headerlink" title="3.渲染和提交"></a>3.渲染和提交</h2><p>组件显示到屏幕之前，其必须被 React 渲染。</p><p>在一个 React 应用中一次屏幕更新都会发生以下三个步骤：触发+渲染+提交</p><ol><li><p><mark>触发一次渲染</mark></p><ul><li><p>有两种原因会导致组件的渲染:</p><ol><li><p>组件的 初次渲染：当应用启动时，会触发初次渲染。框架和沙箱有时会隐藏这部分代码，但它是通过调用目标 DOM 节点的 <a href="http://localhost:3000/reference/react-dom/client/createRoot"><code>createRoot</code></a>，然后用你的组件调用 <code>render</code> 函数完成的：</p><p>index.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gmczr8lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gmczr8lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Image</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;.image.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span></span>);<br></code></pre></td></tr></table></div></figure><p>Image.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0cxnmqlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0cxnmqlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Image</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/ZF6s192.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&#x27;Floralis Genérica&#x27; by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>删除<code>root.render()</code>后，你将会看到组件消失。</p></li><li><p>组件（或者其祖先之一）的 状态发生了改变：一旦组件被初次渲染，你就可以通过使用 <a href="http://localhost:3000/reference/react/useState#setstate"><code>set</code> 函数</a> 更新其状态来触发之后的渲染。更新组件的状态会自动将一次渲染送入队列。</p></li></ol></li></ul></li><li><p><mark>React 渲染你的组件</mark>：在你触发渲染后，React 会调用你的组件来确定要在屏幕上显示的内容。“渲染中” 即 React 在调用你的组件。</p><ul><li>在进行初次渲染时, React 会调用根组件。</li><li>对于后续的渲染, React 会调用内部状态更新触发了渲染的函数组件。</li></ul><p>这个过程是递归的：如果更新后的组件会返回某个另外的组件，那么 React 接下来就会渲染 <em>那个</em> 组件，而如果那个组件又返回了某个组件，那么 React 接下来就会渲染 那个 组件，以此类推。这个过程会持续下去，直到没有更多的嵌套组件并且 React 确切知道哪些东西应该显示到屏幕上为止。</p><p>index.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2lw6q6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2lw6q6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Gallery</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Gallery.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Gallery</span> /&gt;</span></span>);<br></code></pre></td></tr></table></div></figure><p>Gallery.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qb6ontlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qb6ontlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>鼓舞人心的雕塑<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Image</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/ZF6s192.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&#x27;Floralis Genérica&#x27; by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><ul><li>在初次渲染中， React 将会为<code>&lt;section&gt;</code>、<code>&lt;h1&gt;</code> 和三个 <code>&lt;img&gt;</code> 标签 <a href="https://developer.mozilla.org/docs/Web/API/Document/createElement">创建 DOM 节点</a>。</li><li>在一次重渲染过程中, React 将计算它们的哪些属性（如果有的话）自上次渲染以来已更改。在下一步（提交阶段）之前，它不会对这些信息执行任何操作。</li></ul><p>渲染必须始终是一次 <a href="http://localhost:3000/learn/keeping-components-pure">纯计算</a>:</p><ul><li>输入相同，输出相同。 给定相同的输入，组件应始终返回相同的 JSX。（当有人点了西红柿沙拉时，他们不应该收到洋葱沙拉！）</li><li>只做它自己的事情。 它不应更改任何存在于渲染之前的对象或变量。（一个订单不应更改其他任何人的订单。）</li></ul><p>否则，随着代码库复杂性的增加，你可能会遇到令人困惑的错误和不可预测的行为。<mark>在 “严格模式” 下开发时，React 会调用每个组件的函数两次，这可以帮助发现由不纯函数引起的错误。</mark></p></li><li><p><mark>React 把更改提交到 DOM 上</mark>：在渲染（调用）你的组件之后，React 将会修改 DOM。</p><ul><li>对于初次渲染， React 会使用 <a href="https://developer.mozilla.org/docs/Web/API/Node/appendChild"><code>appendChild()</code></a> DOM API 将其创建的所有 DOM 节点放在屏幕上。</li><li>对于重渲染， React 将应用最少的必要操作（在渲染时计算！），以使得 DOM 与最新的渲染输出相互匹配。</li></ul><p>React 仅在渲染之间存在差异时才会更改 DOM 节点。 </p><p>例如，有一个组件，它每秒使用从父组件传递下来的不同属性重新渲染一次。注意，你可以添加一些文本到 <code>&lt;input&gt;</code> 标签，更新它的 <code>value</code>，但是文本不会在组件重渲染时消失：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tltv1slopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tltv1slopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Clock</span>(<span class="hljs-params">&#123; time &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="Clock.gif" alt="Clock" style="zoom:50%;" /><p>之所以会正常运行，是因为在最后一步中，React 只会使用最新的 <code>time</code> 更新 <code>&lt;h1&gt;</code> 标签的内容。它看到 <code>&lt;input&gt;</code> 标签出现在 JSX 中与上次相同的位置，因此 React 不会修改 <code>&lt;input&gt;</code> 标签或它的 <code>value</code>！</p></li></ol><p>在渲染完成并且 React 更新 DOM 之后，浏览器就会重新绘制屏幕。尽管这个过程被称为“浏览器渲染”（browser rendering），但我们还是将它称为“绘制”（painting），以避免在这些文档的其余部分中出现混淆。</p><h2 id="4-state如同一张快照"><a href="#4-state如同一张快照" class="headerlink" title="4.state如同一张快照"></a>4.state如同一张快照</h2><p><mark>设置 state 会触发渲染</mark>：要使界面对输入做出反应，你需要设置其 state。</p><p>当 React 重新渲染一个组件时：</p><ol><li>React 会再次调用你的函数</li><li>函数会返回新的 JSX 快照</li><li>React 会更新界面以匹配返回的快照</li></ol><p>当 React 调用你的组件时，它会为特定的那一次渲染提供一张 state 快照。你的组件会在其 JSX 中返回一张包含一整套新的 props 和事件处理函数的 UI 快照 ，其中所有的值都是 根据那一次渲染中 state 的值 被计算出来的！</p><p>你可能会以为点击“+3”按钮会调用 <code>setNumber(number + 1)</code> 三次从而使计数器递增三次：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yjae9tlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yjae9tlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(number + 1);</span><br><span class="language-xml">        setNumber(number + 1);</span><br><span class="language-xml">        setNumber(number + 1);</span><br><span class="language-xml">      &#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><p><mark>每次点击只会让 <code>number</code> 递增一次！</mark></p><p>设置 state 只会为下一次渲染变更 state 的值。在第一次渲染期间，<code>number</code> 为 <code>0</code>。这也就解释了为什么在 那次渲染中的 <code>onClick</code> 处理函数中，即便在调用了 <code>setNumber(number + 1)</code> 之后，<code>number</code> 的值也仍然是 <code>0</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g8v0kolopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g8v0kolopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setNumber</span>(number + <span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">setNumber</span>(number + <span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">setNumber</span>(number + <span class="hljs-number">1</span>);<br>&#125;&#125;&gt;+<span class="hljs-number">3</span>&lt;/button&gt;<br></code></pre></td></tr></table></div></figure><p>以下是这个按钮的点击事件处理函数通知 React 要做的事情：</p><ol><li><p><code>setNumber(number + 1)</code>：</p><p><code>number</code>是0所以<code>setNumber(0 + 1)</code>。</p><ul><li>React 准备在下一次渲染时将 <code>number</code> 更改为 <code>1</code>。</li></ul></li><li><p><code>setNumber(number + 1)</code>：</p><p><code>number</code>是0所以<code>setNumber(0 + 1)</code>。</p><ul><li>React 准备在下一次渲染时将 <code>number</code> 更改为 <code>1</code>。</li></ul></li><li><p><code>setNumber(number + 1)</code>：</p><p><code>number</code>是0所以<code>setNumber(0 + 1)</code>。</p><ul><li>React 准备在下一次渲染时将 <code>number</code> 更改为 <code>1</code>。</li></ul></li></ol><p>尽管你调用了三次 <code>setNumber(number + 1)</code>，但在 这次渲染的 事件处理函数中 <code>number</code> 会一直是 <code>0</code>，所以你会三次将 state 设置成 <code>1</code>。这就是为什么在你的事件处理函数执行完以后，React 重新渲染的组件中的 <code>number</code> 等于 <code>1</code> 而不是 <code>3</code>。</p><p>你还可以通过在心里把 state 变量替换成它们在你代码中的值来想象这个过程。由于 这次渲染 中的 state 变量 <code>number</code> 是 <code>0</code>，其事件处理函数看起来会像这样：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p3wr40lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p3wr40lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-number">0</span> + <span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-number">0</span> + <span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-number">0</span> + <span class="hljs-number">1</span>);<br>&#125;&#125;&gt;+<span class="hljs-number">3</span>&lt;/button&gt;<br></code></pre></td></tr></table></div></figure><p>对于下一次渲染来说，<code>number</code> 是 <code>1</code>，因此 那次渲染中的 点击事件处理函数看起来会像这样：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vtun5flopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vtun5flopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br>&#125;&#125;&gt;+<span class="hljs-number">3</span>&lt;/button&gt;<br></code></pre></td></tr></table></div></figure><p>这就是为什么再次点击按钮会将计数器设置为 <code>2</code>，下次点击时会设为 <code>3</code>，依此类推。</p><hr><p>点击这个按钮会发出什么警告：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y0xifxlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y0xifxlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(number + 5);</span><br><span class="language-xml">        alert(number);</span><br><span class="language-xml">      &#125;&#125;&gt;+5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="button.gif" alt="button" style="zoom:50%;" /><p>如果你使用之前替换的方法，你就能猜到这个提示框将会显示 “0”：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-43b9cclopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-43b9cclopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setNumber</span>(<span class="hljs-number">0</span> + <span class="hljs-number">5</span>);<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p>但如果你在这个提示框上加上一个定时器， 使得它在组件重新渲染 之后 才触发，又会怎样呢？是会显示 “0” 还是 “5” ？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mmbkrylopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mmbkrylopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(number + 5);</span><br><span class="language-xml">        setTimeout(() =&gt; &#123;</span><br><span class="language-xml">          alert(number);</span><br><span class="language-xml">        &#125;, 3000);</span><br><span class="language-xml">      &#125;&#125;&gt;+5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="timeout.gif" alt="timeout" style="zoom:50%;" /><p>如果使用替代法，就能看到被传入提示框的 state “快照”：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6n7ldjlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6n7ldjlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setNumber</span>(<span class="hljs-number">0</span> + <span class="hljs-number">5</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-number">0</span>);<br>&#125;, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></div></figure><p>到提示框运行时，React 中存储的 state 可能已经发生了更改，但它是使用用户与之交互时状态的快照进行调度的！</p><p><mark>一个 state 变量的值永远不会在一次渲染的内部发生变化</mark>， 即使其事件处理函数的代码是异步的。在 那次渲染的 <code>onClick</code> 内部，<code>number</code> 的值即使在调用 <code>setNumber(number + 5)</code> 之后也还是 <code>0</code>。它的值在 React 通过调用你的组件“获取 UI 的快照”时就被“固定”了。</p><p>下面是一个会在五秒延迟之后发送一条消息的表单。想象以下场景：</p><ol><li>你按下“发送”按钮，向 Alice 发送“你好”。</li><li>在五秒延迟结束之前，将“To”字段的值更改为“Bob”。</li></ol><p>你觉得 <code>alert</code> 会显示什么？它是会显示“你向 Alice 说了你好“还是会显示“你向 Bob 说了你好”？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y289iglopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y289iglopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [to, setTo] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Alice&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [message, setMessage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">`You said <span class="hljs-subst">$&#123;message&#125;</span> to <span class="hljs-subst">$&#123;to&#125;</span>`</span>);<br>    &#125;, <span class="hljs-number">5000</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        To:&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;to&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setTo(e.target.value)&#125;&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Alice&quot;</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bob&quot;</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Message&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;message&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setMessage(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="hello.gif" alt="hello" style="zoom:50%;" /><p>React 会使 state 的值始终”固定“在一次渲染的各个事件处理函数内部。 你无需担心代码运行时 state 是否发生了变化。</p><p>但是，万一你想在重新渲染之前读取最新的 state 怎么办？你应该使用 <a href="http://localhost:3000/learn/queueing-a-series-of-state-updates">状态更新函数</a>。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1ytbvhlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1ytbvhlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TrafficLight</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [walk, setWalk] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setWalk</span>(!walk);<br>    <span class="hljs-title function_">alert</span>(walk ? <span class="hljs-string">&#x27;Stop is next&#x27;</span> : <span class="hljs-string">&#x27;Walk is next&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Change to &#123;walk ? &#x27;Stop&#x27; : &#x27;Walk&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color:</span> <span class="hljs-attr">walk</span> ? &#x27;<span class="hljs-attr">darkgreen</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">darkred</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;walk ? &#x27;Walk&#x27; : &#x27;Stop&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>实现红绿灯组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7f1u44lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7f1u44lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TrafficLight</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [walk, setWalk] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setWalk</span>(!walk);<br>    <span class="hljs-title function_">alert</span>(walk ? <span class="hljs-string">&#x27;Stop is next&#x27;</span> : <span class="hljs-string">&#x27;Walk is next&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Change to &#123;walk ? &#x27;Stop&#x27; : &#x27;Walk&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color:</span> <span class="hljs-attr">walk</span> ? &#x27;<span class="hljs-attr">darkgreen</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">darkred</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;walk ? &#x27;Walk&#x27; : &#x27;Stop&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>把 <code>alert</code> 方法放在 <code>setWalk</code> 方法之前或之后没有区别。那次渲染的 <code>walk</code> 的值是固定的。<mark>调用<code>setWalk</code> 只会为 下次 渲染对它进行变更，而不会影响来自上次渲染的事件处理函数。</mark></p><h2 id="5-把一系列-state-更新加入队列"><a href="#5-把一系列-state-更新加入队列" class="headerlink" title="5.把一系列 state 更新加入队列"></a>5.把一系列 state 更新加入队列</h2><p>设置组件 state 会把一次重新渲染加入队列。但有时你可能会希望在下次渲染加入队列之前对 state 的值执行多次操作。</p><p><mark>React 会等到事件处理函数中的 所有 代码都运行完毕再处理你的 state 更新。</mark></p><p>这让你可以更新多个 state 变量——甚至来自多个组件的 state 变量——而不会触发太多的 <a href="http://localhost:3000/learn/render-and-commit#re-renders-when-state-updates">重新渲染</a>。但这也意味着只有在你的事件处理函数及其中任何代码执行完成 之后，UI 才会更新。这种特性也就是 批处理，它会使你的 React 应用运行得更快。它还会帮你避免处理只更新了一部分 state 变量的令人困惑的“半成品”渲染。</p><p>React 不会跨多个需要刻意触发的事件（如点击）进行批处理——每次点击都是单独处理的。请放心，React 只会在一般来说安全的情况下才进行批处理。这可以确保，例如，如果第一次点击按钮会禁用表单，那么第二次点击就不会再次提交它。</p><p><mark>在下次渲染前多次更新同一个 state </mark>：这是一个不常见的用例，但是如果你想在下次渲染之前多次更新同一个 state，你可以像 <code>setNumber(n =&gt; n + 1)</code> 这样传入一个根据队列中的前一个 state 计算下一个 state 的 函数，而不是像 <code>setNumber(number + 1)</code> 这样传入 下一个 state 值。这是一种告诉 React “用 state 值做某事”而不是仅仅替换它的方法。</p><p>现在尝试递增计数器：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bc0w3qlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bc0w3qlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(n =&gt; n + 1);</span><br><span class="language-xml">        setNumber(n =&gt; n + 1);</span><br><span class="language-xml">        setNumber(n =&gt; n + 1);</span><br><span class="language-xml">      &#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>n =&gt; n + 1</code> 被称为 更新函数。当你将它传递给一个 state 设置函数时：</p><ol><li>React 会将此函数加入队列，以便在事件处理函数中的所有其他代码运行后进行处理。</li><li>在下一次渲染期间，React 会遍历队列并给你更新之后的最终 state。</li></ol><p>React 在执行事件处理函数时处理这几行代码的过程：</p><ol><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个函数。React 将它加入队列。</li><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个函数。React 将它加入队列。</li><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个函数。React 将它加入队列。</li></ol><p>当你在下次渲染期间调用 <code>useState</code> 时，React 会遍历队列。之前的 <code>number</code> state 的值是 <code>0</code>，所以这就是 React 作为参数 <code>n</code> 传递给第一个更新函数的值。然后 React 会获取你上一个更新函数的返回值，并将其作为 <code>n</code> 传递给下一个更新函数，以此类推：</p><table><thead><tr><th>更新队列</th><th><code>n</code></th><th>返回值</th></tr></thead><tbody><tr><td><code>n =&gt; n + 1</code></td><td><code>0</code></td><td><code>0 + 1 = 1</code></td></tr><tr><td><code>n =&gt; n + 1</code></td><td><code>1</code></td><td><code>1 + 1 = 2</code></td></tr><tr><td><code>n =&gt; n + 1</code></td><td><code>2</code></td><td><code>2 + 1 = 3</code></td></tr></tbody></table><p>React 会保存 <code>3</code> 为最终结果并从 <code>useState</code> 中返回。</p><p><mark>如果你在替换 state 后更新 state 会发生什么</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lilunvlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lilunvlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(number + 5);</span><br><span class="language-xml">        setNumber(n =&gt; n + 1);</span><br><span class="language-xml">      &#125;&#125;&gt;增加数字<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><p>0→6→12→...</p><p>这是事件处理函数告诉 React 要做的事情：</p><ol><li><code>setNumber(number + 5)</code>：<code>number</code> 为 <code>0</code>，所以 <code>setNumber(0 + 5)</code>。React 将 <em>“替换为 <code>5</code>”</em> 添加到其队列中。</li><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个更新函数。 React 将 该函数 添加到其队列中。</li></ol><p>在下一次渲染期间，React 会遍历 state 队列：</p><table><thead><tr><th>更新队列</th><th><code>n</code></th><th>返回值</th></tr></thead><tbody><tr><td>“替换为 <code>5</code>”</td><td><code>0</code>（未使用）</td><td><code>5</code></td></tr><tr><td><code>n =&gt; n + 1</code></td><td><code>5</code></td><td><code>5 + 1 = 6</code></td></tr></tbody></table><p>React 会保存 <code>6</code> 为最终结果并从 <code>useState</code> 中返回。</p><p><code>setState(x)</code> 实际上会像 <code>setState(n =&gt; x)</code> 一样运行，只是没有使用 <code>n</code>！</p><p><mark>如果你在更新 state 后替换 state 会发生什么</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y2f450lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y2f450lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setNumber</span>(number + <span class="hljs-number">5</span>);<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n + <span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-number">42</span>);<br>&#125;&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>0→42</p><p>React 在执行事件处理函数时处理这几行代码的过程：</p><ol><li><code>setNumber(number + 5)</code>：<code>number</code> 为 <code>0</code>，所以 <code>setNumber(0 + 5)</code>。React 将 <em>“替换为 <code>5</code>”</em> 添加到其队列中。</li><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个更新函数。React 将该函数添加到其队列中。</li><li><code>setNumber(42)</code>：React 将 “替换为 <code>42</code>” 添加到其队列中。</li></ol><p>在下一次渲染期间，React 会遍历 state 队列：</p><table><thead><tr><th>更新队列</th><th><code>n</code></th><th>返回值</th></tr></thead><tbody><tr><td>“替换为 <code>5</code>”</td><td><code>0</code>（未使用）</td><td><code>5</code></td></tr><tr><td><code>n =&gt; n + 1</code></td><td><code>5</code></td><td><code>5 + 1 = 6</code></td></tr><tr><td>“替换为 <code>42</code>”</td><td><code>6</code>（未使用）</td><td><code>42</code></td></tr></tbody></table><p>然后 React 会保存 <code>42</code> 为最终结果并从 <code>useState</code> 中返回。</p><p>总而言之，以下是你可以考虑传递给 <code>setNumber</code> state 设置函数的内容：</p><ul><li>一个更新函数（例如：<code>n =&gt; n + 1</code>）会被添加到队列中。</li><li>任何其他的值（例如：数字 <code>5</code>）会导致“替换为 <code>5</code>”被添加到队列中，已经在队列中的内容会被忽略。</li></ul><p>事件处理函数执行完成后，React 将触发重新渲染。<mark>在重新渲染期间，React 将处理队列。更新函数会在渲染期间执行，因此 更新函数必须是 <a href="http://localhost:3000/learn/keeping-components-pure">纯函数</a> 并且只 返回 结果。不要尝试从它们内部设置 state 或者执行其他副作用</mark>。在严格模式下，React 会执行每个更新函数两次（但是丢弃第二个结果）以便帮助你发现错误。</p><p>命名惯例：通常可以通过相应 state 变量的第一个字母来命名更新函数的参数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cdx4urlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cdx4urlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setEnabled</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> !e);<br><br><span class="hljs-title function_">setLastName</span>(<span class="hljs-function"><span class="hljs-params">ln</span> =&gt;</span> ln.<span class="hljs-title function_">reverse</span>());<br><br><span class="hljs-title function_">setFriendCount</span>(<span class="hljs-function"><span class="hljs-params">fc</span> =&gt;</span> fc * <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></div></figure><p>如果你喜欢更冗长的代码，另一个常见的惯例是重复使用完整的 state 变量名称，如 <code>setEnabled(enabled =&gt; !enabled)</code>，或使用前缀，如 <code>setEnabled(prevEnabled =&gt; !prevEnabled)</code>。</p><h2 id="6-更新-state-中的对象"><a href="#6-更新-state-中的对象" class="headerlink" title="6.更新 state 中的对象"></a>6.更新 state 中的对象</h2><p>state 中可以保存任意类型的 JavaScript 值，包括对象。但是，你不应该直接修改存放在 React state 中的对象。相反，当你想要更新一个对象时，你需要创建一个新的对象（或者将其拷贝一份），然后将 state 更新为此对象。</p><p>数字、字符串和布尔值，这些类型的值在 JavaScript 中是不可变（immutable）的，这意味着它们不能被改变或是只读的。你可以通过替换它们的值以触发一次重新渲染。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d99g7vlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d99g7vlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setX</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></div></figure><p>state <code>x</code> 从 <code>0</code> 变为 <code>5</code>，但是数字 <code>0</code> 本身并没有发生改变。在 JavaScript 中，无法对内置的原始值，如数字、字符串和布尔值，进行任何更改。</p><p>现在考虑 state 中存放对象的情况：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jta6j8lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jta6j8lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;);<br></code></pre></td></tr></table></div></figure><p>从技术上来讲，可以改变对象自身的内容。当你这样做时，就制造了一个 mutation：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6che6hlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6che6hlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">position.<span class="hljs-property">x</span> = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></div></figure><p>然而，虽然严格来说 React state 中存放的对象是可变的，但你应该像处理数字、布尔值、字符串一样将它们视为不可变的。因此你应该替换它们的值，而不是对它们进行修改。 </p><p>应该 <mark>把所有存放在 state 中的 JavaScript 对象都视为只读的</mark>。</p><p>在下面的例子中，我们用一个存放在 state 中的对象来表示指针当前的位置。当你在预览区触摸或移动光标时，红色的点本应移动。但是实际上红点仍停留在原处：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q4zi32lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q4zi32lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MovingDot</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerMove</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">        position.x = e.clientX;</span><br><span class="language-xml">        position.y = e.clientY;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">      style=&#123;&#123;</span><br><span class="language-xml">        position: &#x27;relative&#x27;,</span><br><span class="language-xml">        width: &#x27;100vw&#x27;,</span><br><span class="language-xml">        height: &#x27;100vh&#x27;,</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">position:</span> &#x27;<span class="hljs-attr">absolute</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">red</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">borderRadius:</span> &#x27;<span class="hljs-attr">50</span>%&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">transform:</span> `<span class="hljs-attr">translate</span>($&#123;<span class="hljs-attr">position.x</span>&#125;<span class="hljs-attr">px</span>, $&#123;<span class="hljs-attr">position.y</span>&#125;<span class="hljs-attr">px</span>)`,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">left:</span> <span class="hljs-attr">-10</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">top:</span> <span class="hljs-attr">-10</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">width:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">height:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125; /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这段代码直接修改了 <a href="http://localhost:3000/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time">上一次渲染中</a> 分配给 <code>position</code> 的对象。但是因为并没有使用 state 的设置函数，React 并不知道对象已更改。所以 React 没有做出任何响应。这就像在吃完饭之后才尝试去改变要点的菜一样。虽然在一些情况下，直接修改 state 可能是有效的，但我们并不推荐这么做。你应该把在渲染过程中可以访问到的 state 视为只读的。</p><p>在这种情况下，为了真正地 <a href="http://localhost:3000/learn/state-as-a-snapshot#setting-state-triggers-renders">触发一次重新渲染</a>，你需要创建一个新对象并把它传递给 state 的设置函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kc0b01lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kc0b01lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">onPointerMove=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">setPosition</span>(&#123;<br>    <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span>,<br>    <span class="hljs-attr">y</span>: e.<span class="hljs-property">clientY</span><br>  &#125;);<br>&#125;&#125;<br></code></pre></td></tr></table></div></figure><p>通过使用 <code>setPosition</code>，你在告诉 React：</p><ul><li>使用这个新的对象替换 <code>position</code> 的值</li><li>然后再次渲染这个组件</li></ul><p>现在你可以看到，当你在预览区触摸或移动光标时，红点会跟随着你的指针移动。</p><p>像这样的代码是有问题的，因为它改变了 state 中现有的对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ejfqs8lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ejfqs8lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">position.<span class="hljs-property">x</span> = e.<span class="hljs-property">clientX</span>;<br><br>position.<span class="hljs-property">y</span> = e.<span class="hljs-property">clientY</span>;<br></code></pre></td></tr></table></div></figure><p>但是像这样的代码就 没有任何问题，因为你改变的是你刚刚创建的一个新的对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vlnrkglopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vlnrkglopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> nextPosition = &#123;&#125;;<br><br>nextPosition.<span class="hljs-property">x</span> = e.<span class="hljs-property">clientX</span>;<br><br>nextPosition.<span class="hljs-property">y</span> = e.<span class="hljs-property">clientY</span>;<br><br><span class="hljs-title function_">setPosition</span>(nextPosition);<br></code></pre></td></tr></table></div></figure><p>事实上，它完全等同于下面这种写法：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g8bh3ulopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g8bh3ulopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setPosition</span>(&#123;<br>    <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span>,<br>    <span class="hljs-attr">y</span>: e.<span class="hljs-property">client</span><br>&#125;);<br></code></pre></td></tr></table></div></figure><p>只有当你改变已经处于 state 中的 现有 对象时，mutation 才会成为问题。而修改一个你刚刚创建的对象就不会出现任何问题，因为 还没有其他的代码引用它。改变它并不会意外地影响到依赖它的东西。这叫做“局部 mutation”。你甚至可以 <a href="http://localhost:3000/learn/keeping-components-pure#local-mutation-your-components-little-secret">在渲染的过程中</a> 进行“局部 mutation”的操作。</p><p><mark>使用展开语法复制对象</mark>：在之前的例子中，始终会根据当前指针的位置创建出一个新的 <code>position</code> 对象。但是通常，你会希望把 现有 数据作为你所创建的新对象的一部分。例如，你可能只想要更新表单中的一个字段，其他的字段仍然使用之前的值。</p><p>下面的代码中，输入框并不会正常运行【无法修改输入框的值】，因为 <code>onChange</code> 直接修改了 state ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g1r2ajlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g1r2ajlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Barbara&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Hepworth&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;bhepworth@sculpture.com&#x27;</span><br>  &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFirstNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    person.<span class="hljs-property">firstName</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleLastNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    person.<span class="hljs-property">lastName</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleEmailChange</span>(<span class="hljs-params">e</span>) &#123;<br>    person.<span class="hljs-property">email</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        First name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.firstName&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleFirstNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Last name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.lastName&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleLastNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Email:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.email&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleEmailChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#123;person.firstName&#125;&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        &#123;person.lastName&#125;&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        (&#123;person.email&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231107160248607.png" alt="image-20231107160248607" style="zoom:50%;" /><p>下面这行代码修改了上一次渲染中的 state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f8eypxlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f8eypxlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">person.<span class="hljs-property">firstName</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br></code></pre></td></tr></table></div></figure><p>想要实现你的需求，最可靠的办法就是创建一个新的对象并将它传递给 <code>setPerson</code>。但是在这里，你还需要 把当前的数据复制到新对象中，因为你只改变了其中一个字段：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kjt6wulopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kjt6wulopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setPerson</span>(&#123;<br>  <span class="hljs-attr">firstName</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>, <span class="hljs-comment">// 从 input 中获取新的 first name</span><br>  <span class="hljs-attr">lastName</span>: person.<span class="hljs-property">lastName</span>,<br>  <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span><br>&#125;);<br></code></pre></td></tr></table></div></figure><p>你可以使用 <code>...</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals">对象展开</a> 语法，这样你就不需要单独复制每个属性。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gww4xulopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gww4xulopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person, <span class="hljs-comment">// 复制上一个 person 中的所有字段</span><br>  <span class="hljs-attr">firstName</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> <span class="hljs-comment">// 但是覆盖 firstName 字段 </span><br>&#125;);<br></code></pre></td></tr></table></div></figure><p>现在表单可以正常运行了！</p><p>可以看到，你并没有为每个输入框单独声明一个 state。对于大型表单，将所有数据都存放在同一个对象中是非常方便的——前提是你能够正确地更新它！</p><p><code>...</code> 展开语法本质是是“浅拷贝”——它只会复制一层。这使得它的执行速度很快，但是也意味着当你想要更新一个嵌套属性时，你必须得多次使用展开语法。</p><p>使用一个事件处理函数来更新多个字段：你也可以在对象的定义中使用 <code>[</code> 和 <code>]</code> 括号来实现属性的动态命名。下面是同一个例子，但它使用了一个事件处理函数而不是三个：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t1zc64lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t1zc64lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person,<br>  [e.<span class="hljs-property">target</span>.<span class="hljs-property">name</span>]: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>e.target.name</code> 引用了 <code>&lt;input&gt;</code> 这个 DOM 元素的 <code>name</code> 属性。</p><p><mark>更新一个嵌套对象</mark>：考虑下面这种结构的嵌套对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3wvy9vlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3wvy9vlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br>  <span class="hljs-attr">artwork</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>如果你想要更新 <code>person.artwork.city</code> 的值，用 mutation 来实现的方法非常容易理解：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2lk4balopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2lk4balopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">person.<span class="hljs-property">artwork</span>.<span class="hljs-property">city</span> = <span class="hljs-string">&#x27;New Delhi&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>但是在 React 中，你需要将 state 视为不可变的！为了修改 <code>city</code> 的值，你首先需要创建一个新的 <code>artwork</code> 对象（其中预先填充了上一个 <code>artwork</code> 对象中的数据），然后创建一个新的 <code>person</code> 对象，并使得其中的 <code>artwork</code> 属性指向新创建的 <code>artwork</code> 对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-eck5k2lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-eck5k2lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> nextArtwork = &#123; ...person.<span class="hljs-property">artwork</span>, <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;New Delhi&#x27;</span> &#125;;<br><span class="hljs-keyword">const</span> nextPerson = &#123; ...person, <span class="hljs-attr">artwork</span>: nextArtwork &#125;;<br><span class="hljs-title function_">setPerson</span>(nextPerson);<br></code></pre></td></tr></table></div></figure><p>或者，写成一个函数调用：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-04n22olopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-04n22olopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person, <span class="hljs-comment">// 复制其它字段的数据 </span><br>  <span class="hljs-attr">artwork</span>: &#123; <span class="hljs-comment">// 替换 artwork 字段 </span><br>    ...person.<span class="hljs-property">artwork</span>, <span class="hljs-comment">// 复制之前 person.artwork 中的数据</span><br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;New Delhi&#x27;</span> <span class="hljs-comment">// 但是将 city 的值替换为 New Delhi！</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>这虽然看起来有点冗长，但对于很多情况都能有效地解决问</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4dpu19lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4dpu19lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br>    <span class="hljs-attr">artwork</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br>      <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br>      <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">name</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTitleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">title</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCityChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">city</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleImageChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">image</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Title:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleTitleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        City:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.city&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleCityChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Image:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.image&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleImageChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;person.artwork.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">        &#123;&#x27; by &#x27;&#125;</span><br><span class="language-xml">        &#123;person.name&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        (located in &#123;person.artwork.city&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;person.artwork.image&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;person.artwork.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>对象并非是真正嵌套的：下面这个对象从代码上来看是“嵌套”的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nminrqlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nminrqlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> obj = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br><span class="hljs-attr">artwork</span>: &#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br><span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br><span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>然而，当我们思考对象的特性时，“嵌套”并不是一个非常准确的方式。当这段代码运行的时候，不存在“嵌套”的对象。你实际上看到的是两个不同的对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d39c8ilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d39c8ilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> obj1 = &#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br><span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br><span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj2 = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br><span class="hljs-attr">artwork</span>: obj1<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>对象 <code>obj1</code> 并不处于 <code>obj2</code> 的“内部”。例如，下面的代码中，<code>obj3</code> 中的属性也可以指向 <code>obj1</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3gie9alopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3gie9alopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> obj1 = &#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br><span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br><span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj2 = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br><span class="hljs-attr">artwork</span>: obj1<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj3 = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Copycat&#x27;</span>,<br><span class="hljs-attr">artwork</span>: obj1<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>如果你直接修改 <code>obj3.artwork.city</code>，就会同时影响 <code>obj2.artwork.city</code> 和 <code>obj1.city</code>。这是因为 <code>obj3.artwork</code>、<code>obj2.artwork</code> 和 <code>obj1</code> 都指向同一个对象。当你用“嵌套”的方式看待对象时，很难看出这一点。相反，它们是相互独立的对象，只不过是用属性“指向”彼此而已。</p><p><mark>使用 Immer 编写简洁的更新逻辑</mark>：如果你的 state 有多层的嵌套，你或许应该考虑 <a href="http://localhost:3000/learn/choosing-the-state-structure#avoid-deeply-nested-state">将其扁平化</a>。但是，如果你不想改变 state 的数据结构，你可能更喜欢用一种更便捷的方式来实现嵌套展开的效果。<a href="https://github.com/immerjs/use-immer">Immer</a> 是一个非常流行的库，它可以让你使用简便但可以直接修改的语法编写代码，并会帮你处理好复制的过程。通过使用 Immer，你写出的代码看起来就像是你“打破了规则”而直接修改了对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n4f8iilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n4f8iilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>  draft.<span class="hljs-property">artwork</span>.<span class="hljs-property">city</span> = <span class="hljs-string">&#x27;Lagos&#x27;</span>;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>但是不同于一般的 mutation，它并不会覆盖之前的 state！</p><p>由 Immer 提供的 <code>draft</code> 是一种特殊类型的对象，被称为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>，它会记录你用它所进行的操作。这就是你能够随心所欲地直接修改对象的原因所在！从原理上说，Immer 会弄清楚 <code>draft</code> 对象的哪些部分被改变了，并会依照你的修改创建出一个全新的对象。</p><p>使用 Immer:</p><ol><li>运行 <code>npm install use-immer</code> 添加 Immer 依赖</li><li>用 <code>import &#123; useImmer &#125; from &#39;use-immer&#39;</code> 替换掉 <code>import &#123; useState &#125; from &#39;react&#39;</code></li></ol><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sfstm0lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sfstm0lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useImmer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;use-immer&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [person, updatePerson] = <span class="hljs-title function_">useImmer</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br>    <span class="hljs-attr">artwork</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br>      <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br>      <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      draft.<span class="hljs-property">name</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTitleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      draft.<span class="hljs-property">artwork</span>.<span class="hljs-property">title</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCityChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      draft.<span class="hljs-property">artwork</span>.<span class="hljs-property">city</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleImageChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      draft.<span class="hljs-property">artwork</span>.<span class="hljs-property">image</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>    &#125;);<br>  &#125;<br>  ...<br>&#125; <br></code></pre></td></tr></table></div></figure><p>可以看到，事件处理函数变得更简洁了。你可以随意在一个组件中同时使用 <code>useState</code> 和 <code>useImmer</code>。如果你想要写出更简洁的更新处理函数，Immer 会是一个不错的选择，尤其是当你的 state 中有嵌套，并且复制对象会带来重复的代码时。</p><hr><p><mark>为什么在 React 中不推荐直接修改 state？</mark></p><ol><li>调试：如果你使用 <code>console.log</code> 并且不直接修改 state，你之前日志中的 state 的值就不会被新的 state 变化所影响。这样你就可以清楚地看到两次渲染之间 state 的值发生了什么变化</li><li>优化：React 常见的 <a href="http://localhost:3000/reference/react/memo">优化策略</a> 依赖于如果之前的 props 或者 state 的值和下一次相同就跳过渲染。如果你从未直接修改 state ，那么你就可以很快看到 state 是否发生了变化。如果 <code>prevObj === obj</code>，那么你就可以肯定这个对象内部并没有发生改变。</li><li>新功能：我们正在构建的 React 的新功能依赖于 state 被 <a href="http://localhost:3000/learn/state-as-a-snapshot">像快照一样看待</a> 的理念。如果你直接修改 state 的历史版本，可能会影响你使用这些新功能。</li><li>需求变更：有些应用功能在不出现任何修改的情况下会更容易实现，比如实现撤销&#x2F;恢复、展示修改历史，或是允许用户把表单重置成某个之前的值。这是因为你可以把 state 之前的拷贝保存到内存中，并适时对其进行再次使用。如果一开始就用了直接修改 state 的方式，那么后面要实现这样的功能就会变得非常困难。</li><li>更简单的实现：React 并不依赖于 mutation ，所以你不需要对对象进行任何特殊操作。它不需要像很多“响应式”的解决方案一样去劫持对象的属性、总是用代理把对象包裹起来，或者在初始化时做其他工作。这也是为什么 React 允许你把任何对象存放在 state 中——不管对象有多大——而不会造成有任何额外的性能或正确性问题的原因。</li></ol><p>在实践中，你经常可以“侥幸”直接修改 state 而不出现什么问题，但是我们强烈建议你不要这样做，这样你就可以使用我们秉承着这种理念开发的 React 新功能。</p><h2 id="7-更新-state-中的数组"><a href="#7-更新-state-中的数组" class="headerlink" title="7.更新 state 中的数组"></a>7.更新 state 中的数组</h2><p>数组是另外一种可以存储在 state 中的 JavaScript 对象，它虽然是可变的，但是却应该被视为不可变。同对象一样，当你想要更新存储于 state 中的数组时，你需要创建一个新的数组（或者创建一份已有数组的拷贝值），并使用新数组设置 state。</p><p><mark>在没有 mutation 的前提下更新数组</mark>：在 JavaScript 中，数组只是另一种对象。<a href="http://localhost:3000/learn/updating-objects-in-state">同对象一样</a>，你需要将 React state 中的数组视为只读的。这意味着你不应该使用类似于 <code>arr[0] = &#39;bird&#39;</code> 这样的方式来重新分配数组中的元素，也不应该使用会直接修改原始数组的方法，例如 <code>push()</code> 和 <code>pop()</code>。</p><p>相反，每次要更新一个数组时，你需要把一个新的数组传入 state 的 setting 方法中。为此，你可以通过使用像 <code>filter()</code> 和 <code>map()</code> 这样不会直接修改原始值的方法，从原始数组生成一个新的数组。然后你就可以将 state 设置为这个新生成的数组。</p><p>当你操作 React state 中的数组时，你需要避免使用左列的方法，而首选右列的方法：</p><table><thead><tr><th></th><th>避免使用 (会改变原始数组)</th><th>推荐使用 (会返回一个新数组）</th></tr></thead><tbody><tr><td>添加元素</td><td><code>push</code>，<code>unshift</code></td><td><code>concat</code>，<code>[...arr]</code> 展开语法（<a href="http://localhost:3000/learn/updating-arrays-in-state#adding-to-an-array">例子</a>）</td></tr><tr><td>删除元素</td><td><code>pop</code>，<code>shift</code>，<code>splice</code></td><td><code>filter</code>，<code>slice</code>（<a href="http://localhost:3000/learn/updating-arrays-in-state#removing-from-an-array">例子</a>）</td></tr><tr><td>替换元素</td><td><code>splice</code>，<code>arr[i] = ...</code> 赋值</td><td><code>map</code>（<a href="http://localhost:3000/learn/updating-arrays-in-state#replacing-items-in-an-array">例子</a>）</td></tr><tr><td>排序</td><td><code>reverse</code>，<code>sort</code></td><td>先将数组复制一份（<a href="http://localhost:3000/learn/updating-arrays-in-state#making-other-changes-to-an-array">例子</a>）</td></tr></tbody></table><p>或者，你可以<a href="http://localhost:3000/learn/updating-arrays-in-state#write-concise-update-logic-with-immer">使用 Immer</a> ，这样你便可以使用表格中的所有方法了。</p><ul><li><code>slice</code> 让你可以拷贝数组或是数组的一部分。</li><li><code>splice</code> 会直接修改 原始数组（插入或者删除元素）。</li></ul><p>在 React 中，更多情况下你会使用 <code>slice</code>（没有 <code>p</code> ！），因为你不想改变 state 中的对象或数组。</p><p><mark>向数组中添加元素</mark>：<code>push()</code> 会直接修改原始数组，而你不希望这样：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q0nii0lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q0nii0lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [artists, setArtists] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>振奋人心的雕塑家们：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        artists.push(&#123;</span><br><span class="language-xml">          id: nextId++,</span><br><span class="language-xml">          name: name,</span><br><span class="language-xml">        &#125;);</span><br><span class="language-xml">      &#125;&#125;&gt;添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;artists.map(artist =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artist.id&#125;</span>&gt;</span>&#123;artist.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>相反，你应该创建一个 新 数组，其包含了原始数组的所有元素 以及 一个在末尾的新元素。这可以通过很多种方法实现，最简单的一种就是使用 <code>...</code> <a href="http://localhost:3000/a-javascript-refresher#array-spread">数组展开</a> 语法：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7xcfctlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7xcfctlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setArtists</span>( <span class="hljs-comment">// 替换 state</span><br>  [ <span class="hljs-comment">// 是通过传入一个新数组实现的</span><br>    ...artists, <span class="hljs-comment">// 新数组包含原数组的所有元素</span><br>    &#123; <span class="hljs-attr">id</span>: nextId++, <span class="hljs-attr">name</span>: name &#125; <span class="hljs-comment">// 并在末尾添加了一个新的元素</span><br>  ]<br>);<br>    &#125;&#125;&gt;添加&lt;/button&gt;<br></code></pre></td></tr></table></div></figure><p>数组展开运算符还允许你把新添加的元素放在原始的 <code>...artists</code> 之前：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d6z8v2lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d6z8v2lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setArtists</span>([<br><br>  &#123; <span class="hljs-attr">id</span>: nextId++, <span class="hljs-attr">name</span>: name &#125;,<br><br>  ...artists <span class="hljs-comment">// 将原数组中的元素放在末尾</span><br><br>]);<br></code></pre></td></tr></table></div></figure><p>这样一来，展开操作就可以完成 <code>push()</code> 和 <code>unshift()</code> 的工作，将新元素添加到数组的末尾和开头。</p><hr><p> <mark>从数组中删除元素</mark>：从数组中删除一个元素最简单的方法就是将它过滤出去。换句话说，你需要生成一个不包含该元素的新数组。这可以通过 <code>filter</code> 方法实现：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-agmhk6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-agmhk6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> initialArtists = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Marta Colvin Andrade&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Lamidi Olonade Fakeye&#x27;</span>&#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Louise Nevelson&#x27;</span>&#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [artists, setArtists] = <span class="hljs-title function_">useState</span>(<br>    initialArtists<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>振奋人心的雕塑家们：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;artists.map(artist =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artist.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;artist.name&#125;&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setArtists(</span><br><span class="language-xml">                artists.filter(a =&gt;</span><br><span class="language-xml">                  a.id !== artist.id</span><br><span class="language-xml">                )</span><br><span class="language-xml">              );</span><br><span class="language-xml">            &#125;&#125;&gt;</span><br><span class="language-xml">              删除</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>artists.filter(s =&gt; s.id !== artist.id)</code> 表示“创建一个新的数组，该数组由那些 ID 与 <code>artists.id</code> 不同的 <code>artists</code> 组成”。换句话说，每个 artist 的“删除”按钮会把 <em>那一个</em> artist 从原始数组中过滤掉，并使用过滤后的数组再次进行渲染。注意，<code>filter</code> 并不会改变原始数组。</p><hr><p><mark>转换数组</mark>：如果你想改变数组中的某些或全部元素，你可以用 <code>map()</code> 创建一个新数组。你传入 <code>map</code> 的函数决定了要根据每个元素的值或索引（或二者都要）对元素做何处理。</p><p>一个数组记录了两个圆形和一个正方形的坐标。当你点击按钮时，仅有两个圆形会向下移动 100 像素。这是通过使用 <code>map()</code> 生成一个新数组实现的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tyfujelopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tyfujelopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> initialShapes = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;circle&#x27;</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;square&#x27;</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">150</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;circle&#x27;</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">250</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ShapeEditor</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [shapes, setShapes] = <span class="hljs-title function_">useState</span>(<br>    initialShapes<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> nextShapes = shapes.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">shape</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (shape.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;square&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 不作改变</span><br>        <span class="hljs-keyword">return</span> shape;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 返回一个新的圆形，位置在下方 50px 处</span><br>        <span class="hljs-keyword">return</span> &#123;<br>          ...shape,<br>          <span class="hljs-attr">y</span>: shape.<span class="hljs-property">y</span> + <span class="hljs-number">50</span>,<br>        &#125;;<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 使用新的数组进行重渲染</span><br>    <span class="hljs-title function_">setShapes</span>(nextShapes);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        所有圆形向下移动！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;shapes.map(shape =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;shape.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">background:</span> &#x27;<span class="hljs-attr">purple</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">position:</span> &#x27;<span class="hljs-attr">absolute</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">left:</span> <span class="hljs-attr">shape.x</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">top:</span> <span class="hljs-attr">shape.y</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">borderRadius:</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">shape.type</span> === <span class="hljs-string">&#x27;circle&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              ? &#x27;<span class="hljs-attr">50</span>%&#x27; <span class="hljs-attr">:</span> &#x27;&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">width:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">height:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125; /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>&#x3D;&#x3D;替换数组中的元素&#x3D;&#x3D;：想要替换数组中一个或多个元素是非常常见的。类似 <code>arr[0] = &#39;bird&#39;</code> 这样的赋值语句会直接修改原始数组，所以在这种情况下，你也应该使用 <code>map</code>。</p><p>要替换一个元素，请使用 <code>map</code> 创建一个新数组。在你的 <code>map</code> 回调里，第二个参数是元素的索引。使用索引来判断最终是返回原始的元素（即回调的第一个参数）还是替换成其他值：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4pw1vrlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4pw1vrlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> initialCounters = [<br>  <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">CounterList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [counters, setCounters] = <span class="hljs-title function_">useState</span>(<br>    initialCounters<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleIncrementClick</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">const</span> nextCounters = counters.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">c, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (i === index) &#123;<br>        <span class="hljs-comment">// 递增被点击的计数器数值</span><br>        <span class="hljs-keyword">return</span> c + <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 其余部分不发生变化</span><br>        <span class="hljs-keyword">return</span> c;<br>      &#125;<br>    &#125;);<br>    <span class="hljs-title function_">setCounters</span>(nextCounters);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;counters.map((counter, i) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;counter&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            handleIncrementClick(i);</span><br><span class="language-xml">          &#125;&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>&#x3D;&#x3D;向数组中插入元素&#x3D;&#x3D;：有时，你也许想向数组特定位置插入一个元素，这个位置既不在数组开头，也不在末尾。为此，你可以将数组展开运算符 <code>...</code> 和 <code>slice()</code> 方法一起使用。<code>slice()</code> 方法让你从数组中切出“一片”。为了将元素插入数组，你需要先展开原数组在插入点之前的切片，然后插入新元素，最后展开原数组中剩下的部分。</p><p>下面的例子中，插入按钮总是会将元素插入到数组中索引为 <code>1</code> 的位置。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jdocpmlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jdocpmlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialArtists = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Marta Colvin Andrade&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Lamidi Olonade Fakeye&#x27;</span>&#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Louise Nevelson&#x27;</span>&#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [artists, setArtists] = <span class="hljs-title function_">useState</span>(<br>    initialArtists<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> insertAt = <span class="hljs-number">1</span>; <span class="hljs-comment">// 可能是任何索引</span><br>    <span class="hljs-keyword">const</span> nextArtists = [<br>      <span class="hljs-comment">// 插入点之前的元素：</span><br>      ...artists.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, insertAt),<br>      <span class="hljs-comment">// 新的元素：</span><br>      &#123; <span class="hljs-attr">id</span>: nextId++, <span class="hljs-attr">name</span>: name &#125;,<br>      <span class="hljs-comment">// 插入点之后的元素：</span><br>      ...artists.<span class="hljs-title function_">slice</span>(insertAt)<br>    ];<br>    <span class="hljs-title function_">setArtists</span>(nextArtists);<br>    <span class="hljs-title function_">setName</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>振奋人心的雕塑家们：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        插入</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;artists.map(artist =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artist.id&#125;</span>&gt;</span>&#123;artist.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>可能想翻转数组，或是对数组排序。而 JavaScript 中的 <code>reverse()</code> 和 <code>sort()</code> 方法会改变原数组，所以你无法直接使用它们。</p><p>然而，你可以先拷贝这个数组，再改变这个拷贝后的值。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-47n8emlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-47n8emlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialList = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Big Bellies&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Lunar Landscape&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Terracotta Army&#x27;</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>(initialList);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> nextList = [...list];<br>    nextList.<span class="hljs-title function_">reverse</span>();<br>    <span class="hljs-title function_">setList</span>(nextList);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        翻转</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;list.map(artwork =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artwork.id&#125;</span>&gt;</span>&#123;artwork.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>即使你拷贝了数组，你还是不能直接修改其内部的元素。这是因为<mark>数组的拷贝是浅拷贝——新的数组中依然保留了与原始数组相同的元素</mark>。因此，如果你修改了拷贝数组内部的某个对象，其实你正在直接修改当前的 state。举个例子，像下面的代码就会带来问题。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-neddcvlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-neddcvlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> nextList = [...list];<br><br>nextList[<span class="hljs-number">0</span>].<span class="hljs-property">seen</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 问题：直接修改了 list[0] 的值</span><br><br><span class="hljs-title function_">setList</span>(nextList);<br></code></pre></td></tr></table></div></figure><p>虽然 <code>nextList</code> 和 <code>list</code> 是两个不同的数组，<code>nextList[0]</code> 和 <code>list[0]</code> <mark>却指向了同一个对象</mark>。因此，通过改变 <code>nextList[0].seen</code>，<code>list[0].seen</code> 的值也被改变了。这是一种 state 的 mutation 操作，你应该避免这么做！你可以用类似于 <a href="http://localhost:3000/learn/updating-objects-in-state#updating-a-nested-object">更新嵌套的 JavaScript 对象</a> 的方式解决这个问题——<mark>拷贝想要修改的特定元素，而不是直接修改它</mark>。下面是具体的操作。</p><hr><p><mark>更新数组内部的对象</mark>：对象并不是 真的 位于数组“内部”。可能他们在代码中看起来像是在数组“内部”，但其实<mark>数组中的每个对象都是这个数组“指向”的一个存储于其它位置的值</mark>。这就是当你在处理类似 <code>list[0]</code> 这样的嵌套字段时需要格外小心的原因。其他人的艺术品清单可能指向了数组的同一个元素！</p><p><mark>当你更新一个嵌套的 state 时，你需要从想要更新的地方创建拷贝值，一直这样，直到顶层。</mark> </p><p>在下面的例子中，两个不同的艺术品清单有着相同的初始 state。他们本应该互不影响，但是因为一次 mutation，他们的 state 被意外地共享了，勾选一个清单中的事项会影响另外一个清单：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t5ef12lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t5ef12lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialList = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Big Bellies&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Lunar Landscape&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Terracotta Army&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">BucketList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [myList, setMyList] = <span class="hljs-title function_">useState</span>(initialList);<br>  <span class="hljs-keyword">const</span> [yourList, setYourList] = <span class="hljs-title function_">useState</span>(<br>    initialList<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleMyList</span>(<span class="hljs-params">artworkId, nextSeen</span>) &#123;<br>    <span class="hljs-keyword">const</span> myNextList = [...myList];<br>    <span class="hljs-keyword">const</span> artwork = myNextList.<span class="hljs-title function_">find</span>(<br>      <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a.<span class="hljs-property">id</span> === artworkId<br>    );<br>    artwork.<span class="hljs-property">seen</span> = nextSeen;<br>    <span class="hljs-title function_">setMyList</span>(myNextList);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleYourList</span>(<span class="hljs-params">artworkId, nextSeen</span>) &#123;<br>    <span class="hljs-keyword">const</span> yourNextList = [...yourList];<br>    <span class="hljs-keyword">const</span> artwork = yourNextList.<span class="hljs-title function_">find</span>(<br>      <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a.<span class="hljs-property">id</span> === artworkId<br>    );<br>    artwork.<span class="hljs-property">seen</span> = nextSeen;<br>    <span class="hljs-title function_">setYourList</span>(yourNextList);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>艺术愿望清单<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我想看的艺术清单：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;myList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggleMyList&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你想看的艺术清单：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;yourList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggleYourList&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ItemList</span>(<span class="hljs-params">&#123; artworks, onToggle &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;artworks.map(artwork =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artwork.id&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;artwork.seen&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                onToggle(</span><br><span class="language-xml">                  artwork.id,</span><br><span class="language-xml">                  e.target.checked</span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;artwork.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>虽然 <code>myNextList</code> 这个数组是新的，但是其内部的元素本身与原数组 <code>myList</code> 是相同的。因此，修改 <code>artwork.seen</code>，其实是在修改原始的 artwork 对象。而这个 artwork 对象也被 <code>yourList</code> 使用，这样就带来了 bug。这样的 bug 可能难以想到，但好在如果你避免直接修改 state，它们就会消失。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6q5omhlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6q5omhlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> myNextList = [...myList];<br><span class="hljs-keyword">const</span> artwork = myNextList.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a.<span class="hljs-property">id</span> === artworkId);<br>artwork.<span class="hljs-property">seen</span> = nextSeen; <span class="hljs-comment">// 问题：直接修改了已有的元素</span><br><span class="hljs-title function_">setMyList</span>(myNextList);<br></code></pre></td></tr></table></div></figure><p>可以使用 <code>map</code> 在没有 mutation 的前提下将一个旧的元素替换成更新的版本。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6xulrylopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6xulrylopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setMyList</span>(myList.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">artwork</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (artwork.<span class="hljs-property">id</span> === artworkId) &#123;<br>    <span class="hljs-comment">// 创建包含变更的*新*对象</span><br>    <span class="hljs-keyword">return</span> &#123; ...artwork, <span class="hljs-attr">seen</span>: nextSeen &#125;;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 没有变更</span><br>    <span class="hljs-keyword">return</span> artwork;<br>  &#125;<br>&#125;));<br></code></pre></td></tr></table></div></figure><p>此处的 <code>...</code> 是一个对象展开语法，被用来<a href="http://localhost:3000/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax">创建一个对象的拷贝</a>.</p><p>通过这种方式，没有任何现有的 state 中的元素会被改变，bug 也就被修复了。</p><p>通常来讲，你应该只直接修改你刚刚创建的对象。如果你正在插入一个新的 artwork，你可以修改它，但是如果你想要改变的是 state 中已经存在的东西，你就需要先拷贝一份了。</p><p><mark>使用 Immer 编写简洁的更新逻辑</mark>：在没有 mutation 的前提下更新嵌套数组可能会变得有点重复。<a href="http://localhost:3000/learn/updating-objects-in-state#write-concise-update-logic-with-immer">就像对对象一样</a>:</p><ul><li>通常情况下，你应该不需要更新处于非常深层级的 state 。如果你有此类需求，你或许需要<a href="http://localhost:3000/learn/choosing-the-state-structure#avoid-deeply-nested-state">调整一下数据的结构</a>，让数据变得扁平一些。</li><li>如果你不想改变 state 的数据结构，你也许会更喜欢使用 <a href="https://github.com/immerjs/use-immer">Immer</a> ，它让你可以继续使用方便的，但会直接修改原值的语法，并负责为你生成拷贝值。</li></ul><p>下面是我们用 Immer 来重写的艺术愿望清单的例子：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bdg6kclopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bdg6kclopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useImmer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;use-immer&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialList = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Big Bellies&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Lunar Landscape&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Terracotta Army&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">BucketList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [myList, updateMyList] = <span class="hljs-title function_">useImmer</span>(<br>    initialList<br>  );<br>  <span class="hljs-keyword">const</span> [yourList, updateYourList] = <span class="hljs-title function_">useImmer</span>(<br>    initialList<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleMyList</span>(<span class="hljs-params">id, nextSeen</span>) &#123;<br>    <span class="hljs-title function_">updateMyList</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> artwork = draft.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span><br>        a.<span class="hljs-property">id</span> === id<br>      );<br>      artwork.<span class="hljs-property">seen</span> = nextSeen;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleYourList</span>(<span class="hljs-params">artworkId, nextSeen</span>) &#123;<br>    <span class="hljs-title function_">updateYourList</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> artwork = draft.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span><br>        a.<span class="hljs-property">id</span> === artworkId<br>      );<br>      artwork.<span class="hljs-property">seen</span> = nextSeen;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>艺术愿望清单<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我想看的艺术清单：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;myList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggleMyList&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你想看的艺术清单：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;yourList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggleYourList&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ItemList</span>(<span class="hljs-params">&#123; artworks, onToggle &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;artworks.map(artwork =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artwork.id&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;artwork.seen&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                onToggle(</span><br><span class="language-xml">                  artwork.id,</span><br><span class="language-xml">                  e.target.checked</span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;artwork.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>请注意当使用 Immer 时，类似 <code>artwork.seen = nextSeen</code> 这种会产生 mutation 的语法不会再有任何问题了：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yqffi6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yqffi6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">updateMyTodos</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> artwork = draft.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a.<span class="hljs-property">id</span> === artworkId);<br>  artwork.<span class="hljs-property">seen</span> = nextSeen;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>这是因为你并不是在直接修改原始的 state，而是在修改 Immer 提供的一个特殊的 <code>draft</code> 对象。同理，你也可以为 <code>draft</code> 的内容使用 <code>push()</code> 和 <code>pop()</code> 这些会直接修改原值的方法。</p><p>在幕后，Immer 总是会根据你对 <code>draft</code> 的修改来从头开始构建下一个 state。这使得你的事件处理程序非常的简洁，同时也不会直接修改 state。</p><h1 id="五-状态管理"><a href="#五-状态管理" class="headerlink" title="五.状态管理"></a>五.状态管理</h1><h2 id="1-用状态响应输入"><a href="#1-用状态响应输入" class="headerlink" title="1.用状态响应输入"></a>1.用状态响应输入</h2><p>React 控制 UI 的方式是声明式的。你不必直接控制 UI 的各个部分，只需要声明组件可以处于的不同状态，并根据用户的输入在它们之间切换。使用 React，你不用直接从代码层面修改 UI。例如，不用编写诸如“禁用按钮”、“启用按钮”、“显示成功消息”等命令。相反，你只需要描述组件在不同状态（“初始状态”、“输入状态”、“成功状态”）下希望展现的 UI，然后根据用户输入触发状态更改。</p><p>下面是一个使用 React 编写的反馈表单。请注意看它是如何使用 <code>status</code> 这个状态变量来决定启用或禁用提交按钮，以及是否显示成功消息的。</p><p>想象一个允许用户提交一个答案的表单：</p><ul><li>当你向表单输入数据时，“提交”按钮会随之变成可用状态</li><li>当你点击“提交”后，表单和提交按钮都会随之变成不可用状态，并且会加载动画会随之出现</li><li>如果网络请求成功，表单会随之隐藏，同时“提交成功”的信息会随之出现</li><li>如果网络请求失败，错误信息会随之出现，同时表单又变为可用状态</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7dxvujlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7dxvujlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>答对了！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;submitting&#x27;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">submitForm</span>(answer);<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br>      <span class="hljs-title function_">setError</span>(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTextareaChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setAnswer</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>城市测验<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        哪个城市有把空气变成饮用水的广告牌？</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleTextareaChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">answer.length</span> === <span class="hljs-string">0</span> ||</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&gt;</span></span><br><span class="language-xml">          提交</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;error !== null &amp;&amp;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Error&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;error.message&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">submitForm</span>(<span class="hljs-params">answer</span>) &#123;<br>  <span class="hljs-comment">// 模拟接口请求</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> shouldError = answer.<span class="hljs-title function_">toLowerCase</span>() !== <span class="hljs-string">&#x27;lima&#x27;</span><br>      <span class="hljs-keyword">if</span> (shouldError) &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;猜的不错，但答案不对。再试试看吧！&#x27;</span>));<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">resolve</span>();<br>      &#125;<br>    &#125;, <span class="hljs-number">1500</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p><mark>声明式地考虑 UI 的过程</mark>：</p><ol><li><p><mark>定位组件中不同的视图状态</mark>：需要去可视化 UI 界面中用户可能看到的所有不同的“状态”：</p><ul><li>无数据：表单有一个不可用状态的“提交”按钮。</li><li>输入中：表单有一个可用状态的“提交”按钮。</li><li>提交中：表单完全处于不可用状态，加载动画出现。</li><li>成功时：显示“成功”的消息而非表单。</li><li>错误时：与输入状态类似，但会多错误的消息。</li></ul><p>如果一个组件有多个视图状态，你可以很方便地将它们展示在一个页面中：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8vjkomlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8vjkomlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Form</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Form.js&#x27;</span>;<br><br><span class="hljs-keyword">let</span> statuses = [<br>  <span class="hljs-string">&#x27;empty&#x27;</span>,<br>  <span class="hljs-string">&#x27;typing&#x27;</span>,<br>  <span class="hljs-string">&#x27;submitting&#x27;</span>,<br>  <span class="hljs-string">&#x27;success&#x27;</span>,<br>  <span class="hljs-string">&#x27;error&#x27;</span>,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      &#123;statuses.map(status =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;status&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Form (&#123;status&#125;):<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&#123;status&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Form.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-56a0iwlopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-56a0iwlopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params">&#123; status &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>That&#x27;s right!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;empty&#x27;</span> ||</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&gt;</span></span><br><span class="language-xml">        Submit</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;status === &#x27;error&#x27; &amp;&amp;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Error&quot;</span>&gt;</span></span><br><span class="language-xml">          Good guess but a wrong answer. Try again!</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>确定是什么触发了这些状态的改变</mark>：可以触发 state 的更新来响应两种输入：</p><ul><li>人为输入。比如点击按钮、在表单中输入内容，或导航到链接。【人为输入通常需要 <a href="http://localhost:3000/learn/responding-to-events">事件处理函数</a>！】</li><li>计算机输入。比如网络请求得到反馈、定时器被触发，或加载一张图片。</li></ul><p>以上两种情况中，你必须设置 <a href="http://localhost:3000/learn/state-a-components-memory#anatomy-of-usestate">state 变量</a> 去更新 UI。对于正在开发中的表单来说，你需要改变 state 以响应几个不同的输入：</p><ul><li>改变输入框中的文本时（人为）应该根据输入框的内容是否是空值，从而决定将表单的状态从空值状态切换到输入中或切换回原状态。</li><li>点击提交按钮时（人为）应该将表单的状态切换到提交中的状态。</li><li>网络请求成功后（计算机）应该将表单的状态切换到成功的状态。</li><li>网络请求失败后（计算机）应该将表单的状态切换到失败的状态，与此同时，显示错误信息。</li></ul></li><li><p><mark>通过 <code>useState</code> 表示内存中的 state</mark>：state 的每个部分都是“处于变化中的”，并且你需要让“变化的部分”尽可能的少。</p><p>先从绝对必须存在的状态开始。例如，你需要存储输入的 <code>answer</code> 以及用于存储最后一个错误的 <code>error</code> （如果存在的话）：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5d1t19lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5d1t19lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></div></figure><p>接下来，你需要一个状态变量来代表你想要显示的那个可视状态。通常有多种方式在内存中表示它，因此你需要进行实验。</p><p>如果你很难立即想出最好的办法，那就先从添加足够多的 state 开始，确保所有可能的视图状态都囊括其中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-c9u441lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-c9u441lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [isEmpty, setIsEmpty] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">const</span> [isTyping, setIsTyping] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [isSubmitting, setIsSubmitting] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [isSuccess, setIsSuccess] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [isError, setIsError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></div></figure><p>你最初的想法或许不是最好的，但是没关系，重构 state 也是步骤中的一部分！</p></li><li><p><mark>删除任何不必要的 state 变量</mark>：防止出现在内存中的 state 不代表任何你希望用户看到的有效 UI 的情况。</p><p>关于 state 变量的问题：</p><ul><li>这个 state 是否会导致矛盾？例如，<code>isTyping</code> 与 <code>isSubmitting</code> 的状态不能同时为 <code>true</code>。矛盾的产生通常说明了这个 state 没有足够的约束条件。两个布尔值有四种可能的组合，但是只有三种对应有效的状态。为了将“不可能”的状态移除，你可以将 <code>&#39;typing&#39;</code>、<code>&#39;submitting&#39;</code> 以及 <code>&#39;success&#39;</code> 这三个中的其中一个与 <code>status</code> 结合。</li><li>相同的信息是否已经在另一个 state 变量中存在？另一个矛盾：<code>isEmpty</code> 和 <code>isTyping</code> 不能同时为 <code>true</code>。通过使它们成为独立的 state 变量，可能会导致它们不同步并导致 bug。幸运的是，你可以移除 <code>isEmpty</code> 转而用 <code>message.length === 0</code>。</li><li>你是否可以通过另一个 state 变量的相反值得到相同的信息？<code>isError</code> 是多余的，因为你可以检查 <code>error !== null</code>。</li></ul><p>在清理之后，你只剩下 3 个（从原本的 7 个！）<em>必要</em>的 state 变量：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mrmc84lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mrmc84lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>); <span class="hljs-comment">// &#x27;typing&#x27;, &#x27;submitting&#x27;, or &#x27;success&#x27;</span><br></code></pre></td></tr></table></div></figure><p>正是因为你不能在不破坏功能的情况下删除其中任何一个状态变量，因此你可以确定这些都是必要的。</p><p><mark>通过 reducer 来减少“不可能” state</mark>：尽管这三个变量对于表示这个表单的状态来说已经足够好了，仍然是有一些中间状态并不是完全有意义的。例如一个非空的 <code>error</code> 当 <code>status</code> 的值为 <code>success</code> 时没有意义。为了更精确地模块化状态，你可以 <a href="http://localhost:3000/learn/extracting-state-logic-into-a-reducer">将状态提取到一个 reducer 中</a>。Reducer 可以让您合并多个状态变量到一个对象中并巩固所有相关的逻辑！</p></li><li><p><mark>连接事件处理函数以设置 state</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a9ezqglopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a9ezqglopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>That&#x27;s right!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;submitting&#x27;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">submitForm</span>(answer);<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br>      <span class="hljs-title function_">setError</span>(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTextareaChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setAnswer</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>City quiz<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        In which city is there a billboard that turns air into drinkable water?</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleTextareaChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">answer.length</span> === <span class="hljs-string">0</span> ||</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&gt;</span></span><br><span class="language-xml">          Submit</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;error !== null &amp;&amp;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Error&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;error.message&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">submitForm</span>(<span class="hljs-params">answer</span>) &#123;<br>  <span class="hljs-comment">// Pretend it&#x27;s hitting the network.</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> shouldError = answer.<span class="hljs-title function_">toLowerCase</span>() !== <span class="hljs-string">&#x27;lima&#x27;</span><br>      <span class="hljs-keyword">if</span> (shouldError) &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Good guess but a wrong answer. Try again!&#x27;</span>));<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">resolve</span>();<br>      &#125;<br>    &#125;, <span class="hljs-number">1500</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>将所有的交互变为 state 的改变，可以让你避免之后引入新的视图状态后导致现有 state 被破坏。同时也使你在不必改变交互逻辑的情况下，更改每个状态对应的 UI。</p></li></ol><h2 id="2-选择state结构"><a href="#2-选择state结构" class="headerlink" title="2.选择state结构"></a>2.选择state结构</h2><p><mark>构建 state 的原则</mark>：</p><ol><li><p><mark>合并关联的 state</mark>。如果你总是同时更新两个或更多的 state 变量，请考虑将它们合并为一个单独的 state 变量。</p><p>有时候你可能会不确定是使用单个 state 变量还是多个 state 变量。</p><p>你会像下面这样做吗？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f1i417lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f1i417lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [x, setX] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">const</span> [y, setY] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p>或这样？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qhm8gblopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qhm8gblopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;);<br></code></pre></td></tr></table></div></figure><p>从技术上讲，你可以使用其中任何一种方法。但是，如果某两个 state 变量总是一起变化，则将它们统一成一个 state 变量可能更好。</p><p><mark>如果你的 state 变量是一个对象时，请记住，<a href="http://localhost:3000/learn/updating-objects-in-state">你不能只更新其中的一个字段</a> 而不显式复制其他字段</mark>。例如，在上面的例子中，你不能写成 <code>setPosition(&#123; x: 100 &#125;)</code>，因为它根本就没有 <code>y</code> 属性! 相反，如果你想要仅设置 <code>x</code>，则可执行 <code>setPosition(&#123; ...position, x: 100 &#125;)</code>，或将它们分成两个 state 变量，并执行 <code>setX(100)</code>。</p></li><li><p><mark>避免互相矛盾的 state</mark>。当 state 结构中存在多个相互矛盾或“不一致”的 state 时，你就可能为此会留下隐患。应尽量避免这种情况。</p><p>下面是带有 <code>isSending</code> 和 <code>isSent</code> 两个 state 变量的酒店反馈表单：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x8mmsilopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x8mmsilopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FeedbackForm</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [isSending, setIsSending] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [isSent, setIsSent] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendMessage</span>(text);<br>    <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-title function_">setIsSent</span>(<span class="hljs-literal">true</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (isSent) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Thanks for feedback!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>How was your stay at The Prancing Pony?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        Send</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isSending &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sending...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 假装发送一条消息。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params">text</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>尽管这段代码是有效的，但也会让一些 state “极难处理”。例如，如果你忘记同时调用 <code>setIsSent</code> 和 <code>setIsSending</code>，则可能会出现 <code>isSending</code> 和 <code>isSent</code> 同时为 <code>true</code> 的情况。你的组件越复杂，你就越难理解发生了什么。</p><p>因为 <code>isSending</code> 和 <code>isSent</code> 不应同时为 <code>true</code>，所以最好用一个 <code>status</code> 变量来代替它们，这个 state 变量可以采取三种有效状态其中之一：<code>&#39;typing&#39;</code> (初始), <code>&#39;sending&#39;</code>, 和 <code>&#39;sent&#39;</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-11kn6ulopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-11kn6ulopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FeedbackForm</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;sending&#x27;</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendMessage</span>(text);<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;sent&#x27;</span>);<br>  &#125;<br><span class="hljs-comment">//常量</span><br>  <span class="hljs-keyword">const</span> isSending = status === <span class="hljs-string">&#x27;sending&#x27;</span>;<br>  <span class="hljs-keyword">const</span> isSent = status === <span class="hljs-string">&#x27;sent&#x27;</span>;<br><br>  <span class="hljs-keyword">if</span> (isSent) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Thanks for feedback!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>How was your stay at The Prancing Pony?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        Send</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isSending &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sending...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 假装发送一条消息。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params">text</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>避免冗余的 state</mark>。如果你能在渲染期间从组件的 props 或其现有的 state 变量中计算出一些信息，则不应将这些信息放入该组件的 state 中。</p><p><mark>不要在 state 中镜像 props</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hqm879lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hqm879lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; messageColor &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [color, setColor] = <span class="hljs-title function_">useState</span>(messageColor);   <br>&#125;<br></code></pre></td></tr></table></div></figure><p>这里，一个 <code>color</code> state 变量被初始化为 <code>messageColor</code> 的 prop 值。这段代码的问题在于，如果父组件稍后传递不同的 <code>messageColor</code> 值（例如，将其从 <code>&#39;blue&#39;</code> 更改为 <code>&#39;red&#39;</code>），则 <code>color</code> state 变量将不会更新！ state 仅在第一次渲染期间初始化。</p><p>这就是为什么在 state 变量中，“镜像”一些 prop 属性会导致混淆的原因。相反，你要在代码中直接使用 <code>messageColor</code> 属性。如果你想给它起一个更短的名称，请使用常量：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-h5pgx8lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-h5pgx8lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; messageColor &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> color = messageColor;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这种写法就不会与从父组件传递的属性失去同步。</p><p>只有当你 想要 忽略特定 props 属性的所有更新时，将 props “镜像”到 state 才有意义。按照惯例，prop 名称以 <code>initial</code> 或 <code>default</code> 开头，以阐明该 prop 的新值将被忽略：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mqlpwklopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mqlpwklopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; initialColor &#125;</span>) &#123;<br>  <span class="hljs-comment">// 这个 `color` state 变量用于保存 `initialColor` 的 初始值。</span><br>  <span class="hljs-comment">// 对于 `initialColor` 属性的进一步更改将被忽略。</span><br>  <span class="hljs-keyword">const</span> [color, setColor] = <span class="hljs-title function_">useState</span>(initialColor)<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>避免重复的 state</mark>。当同一数据在多个 state 变量之间或在多个嵌套对象中重复时，这会很难保持它们同步。应尽可能减少重复。</p><p>下面这个菜单列表组件可以让你在多种旅行小吃中选择一个：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7pskuelopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7pskuelopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> initialItems = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;pretzels&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;crispy seaweed&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;granola bar&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>(initialItems);<br>  <span class="hljs-keyword">const</span> [selectedItem, setSelectedItem] = <span class="hljs-title function_">useState</span>(<br>    items[<span class="hljs-number">0</span>]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>What&#x27;s your travel snack?<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;items.map(item =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.title&#125;</span><br><span class="language-xml">            &#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setSelectedItem(item);</span><br><span class="language-xml">            &#125;&#125;&gt;Choose<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You picked &#123;selectedItem.title&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231108141335706.png" alt="image-20231108141335706" style="zoom:50%;" /><p>当前，它将所选元素作为对象存储在 <code>selectedItem</code> state 变量中。然而，这并不好：<code>selectedItem</code> 的内容与 <code>items</code> 列表中的某个项是同一个对象。 这意味着关于该项本身的信息在两个地方产生了重复。</p><p>为什么这是个问题？让我们使每个项目都可以编辑：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y2ryoylopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y2ryoylopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> initialItems = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;pretzels&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;crispy seaweed&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;granola bar&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>(initialItems);<br>  <span class="hljs-keyword">const</span> [selectedItem, setSelectedItem] = <span class="hljs-title function_">useState</span>(<br>    items[<span class="hljs-number">0</span>]<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleItemChange</span>(<span class="hljs-params">id, e</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(items.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (item.<span class="hljs-property">id</span> === id) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...item,<br>          <span class="hljs-attr">title</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>        &#125;;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> item;<br>      &#125;<br>    &#125;));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>What&#x27;s your travel snack?<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;items.map((item, index) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                handleItemChange(item.id, e)</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setSelectedItem(item);</span><br><span class="language-xml">            &#125;&#125;&gt;Choose<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You picked &#123;selectedItem.title&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231108141408780.png" alt="image-20231108141408780" style="zoom:50%;" /><p>如果你首先单击菜单上的“Choose” 然后 编辑它，输入会更新，但底部的标签不会反映编辑内容。 这是因为你有重复的 state，并且你忘记更新了 <code>selectedItem</code>。</p><p>尽管你也可以更新 <code>selectedItem</code>，但更简单的解决方法是消除重复项。在下面这个例子中，你将 <code>selectedId</code> 保存在 state 中，而不是在 <code>selectedItem</code> 对象中（它创建了一个与 <code>items</code> 内重复的对象），然后 通过搜索 <code>items</code> 数组中具有该 ID 的项，以此获取 <code>selectedItem</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2fv67blopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2fv67blopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> initialItems = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;pretzels&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;crispy seaweed&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;granola bar&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>(initialItems);<br>  <span class="hljs-keyword">const</span> [selectedId, setSelectedId] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> selectedItem = items.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span><br>    item.<span class="hljs-property">id</span> === selectedId<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleItemChange</span>(<span class="hljs-params">id, e</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(items.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (item.<span class="hljs-property">id</span> === id) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...item,<br>          <span class="hljs-attr">title</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>        &#125;;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> item;<br>      &#125;<br>    &#125;));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>What&#x27;s your travel snack?<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;items.map((item, index) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                handleItemChange(item.id, e)</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setSelectedId(item.id);</span><br><span class="language-xml">            &#125;&#125;&gt;Choose<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You picked &#123;selectedItem.title&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231108141513225.png" alt="image-20231108141513225" style="zoom:50%;" /><p>如果你编辑 selected 元素，下面的消息将立即更新。这是因为 <code>setItems</code> 会<mark>触发重新渲染</mark>，而 <code>items.find(...)</code> 会找到带有更新文本的元素。你不需要在 state 中保存 选定的元素，因为只有 选定的 ID 是必要的。其余的可以在渲染期间计算。</p></li><li><p><mark>避免深度嵌套的 state</mark>。深度分层的 state 更新起来不是很方便。如果可能的话，最好以扁平化方式构建 state。</p><p>一个由行星、大陆和国家组成的旅行计划。你可能会尝试使用嵌套对象和数组来构建它的 state：</p><p>place.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-57l95slopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-57l95slopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> initialTravelPlan = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;(Root)&#x27;</span>,<br>  <span class="hljs-attr">childPlaces</span>: [&#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Earth&#x27;</span>,<br>    <span class="hljs-attr">childPlaces</span>: [&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Africa&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Botswana&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Egypt&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Kenya&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Madagascar&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Morocco&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">8</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Nigeria&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">9</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;South Africa&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;]<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Americas&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">11</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Argentina&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">12</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">13</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Barbados&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">14</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Canada&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">15</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Jamaica&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">16</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Mexico&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">17</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Trinidad and Tobago&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">18</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Venezuela&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;]<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">19</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Asia&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">20</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;China&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">21</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;India&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">22</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Singapore&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">23</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;South Korea&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">24</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Thailand&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">25</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Vietnam&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;]<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">26</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Europe&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">27</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Croatia&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">28</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;France&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">29</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Germany&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">30</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Italy&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">31</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Portugal&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">32</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Spain&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">33</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Turkey&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;]<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">34</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Oceania&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">35</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Australia&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">36</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Bora Bora (French Polynesia)&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">37</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Easter Island (Chile)&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">38</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Fiji&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">39</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Hawaii (the USA)&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">40</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;New Zealand&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">41</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Vanuatu&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;]<br>    &#125;]<br>  &#125;, &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">42</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Moon&#x27;</span>,<br>    <span class="hljs-attr">childPlaces</span>: [&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">43</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Rheita&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">44</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Piccolomini&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">45</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Tycho&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []<br>    &#125;]<br>  &#125;, &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">46</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Mars&#x27;</span>,<br>    <span class="hljs-attr">childPlaces</span>: [&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">47</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Corn Town&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">48</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Green Hill&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []      <br>    &#125;]<br>  &#125;]<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pqcxl5lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pqcxl5lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; initialTravelPlan &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./places.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">PlaceTree</span>(<span class="hljs-params">&#123; place &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> childPlaces = place.<span class="hljs-property">childPlaces</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      &#123;place.title&#125;</span><br><span class="language-xml">      &#123;childPlaces.length &gt; 0 &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">          &#123;childPlaces.map(place =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">PlaceTree</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;place.id&#125;</span> <span class="hljs-attr">place</span>=<span class="hljs-string">&#123;place&#125;</span> /&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TravelPlan</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [plan, setPlan] = <span class="hljs-title function_">useState</span>(initialTravelPlan);<br>  <span class="hljs-keyword">const</span> planets = plan.<span class="hljs-property">childPlaces</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Places to visit<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        &#123;planets.map(place =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">PlaceTree</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;place.id&#125;</span> <span class="hljs-attr">place</span>&#123;<span class="hljs-attr">place</span>&#125; /&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>假设你想添加一个按钮来删除一个你已经去过的地方。你会怎么做呢？<a href="http://localhost:3000/learn/updating-objects-in-state#updating-a-nested-object">更新嵌套的 state</a> 需要从更改部分一直向上复制对象。删除一个深度嵌套的地点将涉及复制其整个父级地点链。这样的代码可能非常冗长。</p><p>如果 state 嵌套太深，难以轻松更新，可以考虑将其“扁平化”。 这里有一个方法可以重构上面这个数据。不同于树状结构，每个节点的 <code>place</code> 都是一个包含 其子节点 的数组，你可以让每个节点的 <code>place</code> 作为数组保存 其子节点的 ID。然后存储一个节点 ID 与相应节点的映射关系。</p><p>这个数据重组可能会让你想起看到一个数据库表：</p><p>place.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0j8ou6lopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0j8ou6lopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> initialTravelPlan = &#123;<br>  <span class="hljs-number">0</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;(Root)&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">42</span>, <span class="hljs-number">46</span>],<br>  &#125;,<br>  <span class="hljs-number">1</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Earth&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">34</span>]<br>  &#125;,<br>  <span class="hljs-number">2</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Africa&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> , <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>  &#125;, <br>  <span class="hljs-number">3</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Botswana&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">4</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Egypt&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">5</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Kenya&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">6</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Madagascar&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;, <br>  <span class="hljs-number">7</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Morocco&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">8</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">8</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Nigeria&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">9</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">9</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;South Africa&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">10</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Americas&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>],   <br>  &#125;,<br>  <span class="hljs-number">11</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Argentina&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">12</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">13</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">13</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Barbados&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;, <br>  <span class="hljs-number">14</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">14</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Canada&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">15</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">15</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Jamaica&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">16</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">16</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Mexico&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">17</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">17</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Trinidad and Tobago&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">18</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Venezuela&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">19</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">19</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Asia&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>],   <br>  &#125;,<br>  <span class="hljs-number">20</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;China&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">21</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;India&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">22</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Singapore&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">23</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">23</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;South Korea&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">24</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">24</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Thailand&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">25</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">25</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Vietnam&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">26</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">26</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Europe&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>],   <br>  &#125;,<br>  <span class="hljs-number">27</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">27</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Croatia&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">28</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">28</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;France&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">29</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">29</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Germany&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">30</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Italy&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">31</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">31</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Portugal&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">32</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">32</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Spain&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">33</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">33</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Turkey&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">34</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">34</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Oceania&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>],   <br>  &#125;,<br>  <span class="hljs-number">35</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">35</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Australia&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">36</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">36</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Bora Bora (French Polynesia)&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">37</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">37</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Easter Island (Chile)&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">38</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">38</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Fiji&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">39</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Hawaii (the USA)&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">40</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;New Zealand&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">41</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">41</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Vanuatu&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">42</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">42</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Moon&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>]<br>  &#125;,<br>  <span class="hljs-number">43</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">43</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Rheita&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">44</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">44</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Piccolomini&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">45</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">45</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Tycho&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">46</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">46</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Mars&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">47</span>, <span class="hljs-number">48</span>]<br>  &#125;,<br>  <span class="hljs-number">47</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">47</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Corn Town&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">48</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">48</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Green Hill&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>App.jsx：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-37ksgylopkqy8o" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-37ksgylopkqy8o"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; initialTravelPlan &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./places.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">PlaceTree</span>(<span class="hljs-params">&#123; id, placesById &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> place = placesById[id];<br>  <span class="hljs-keyword">const</span> childIds = place.<span class="hljs-property">childIds</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      &#123;place.title&#125;</span><br><span class="language-xml">      &#123;childIds.length &gt; 0 &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">          &#123;childIds.map(childId =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">PlaceTree</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;childId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;childId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">placesById</span>=<span class="hljs-string">&#123;placesById&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TravelPlan</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [plan, setPlan] = <span class="hljs-title function_">useState</span>(initialTravelPlan);<br>  <span class="hljs-keyword">const</span> root = plan[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">const</span> planetIds = root.<span class="hljs-property">childIds</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Places to visit<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        &#123;planetIds.map(id =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">PlaceTree</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">placesById</span>=<span class="hljs-string">&#123;plan&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ol><p>这些原则背后的目标是 使 state 易于更新而不引入错误。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五.Typora使用指南</title>
    <link href="/2023/10/16/Typora%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2023/10/16/Typora%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>Typora 官网：<a href="https://typoraio.cn/">https://typoraio.cn/</a></p><p>Typora 主题：<a href="https://theme.typora.io/">https://theme.typora.io/</a></p><hr><p>激活 Typora1.7 版本：</p><ol><li><p>首先下载三个文件（百度网盘）：</p><img src="image-20231102102909272.png" alt="image-20231102102909272" style="zoom:50%;" /></li><li><p>运行typora-setup-x64.exe，复制另外两个文件到安装包的路径下：</p><img src="image-20231102102505005.png" alt="image-20231102102505005" style="zoom:50%;" /></li><li><p>在当前安装包路径下打开cmd运行license-gen.exe：</p><img src="image-20231102102550661.png" alt="image-20231102102550661" style="zoom:50%;" /></li><li><p>用管理员身份运行TyporaCrack.exe</p></li><li><p>运行完成后输入邮箱地址和序列号（即激活码）：</p><img src="image-20231102102833246.png" alt="image-20231102102833246" style="zoom:30%;" /></li><li><p>激活成功：</p><img src="image-20231102102813692.png" alt="image-20231102102813692" style="zoom:30%;" /></li></ol><p>更新themes和conf文件夹【打开高级设置】：</p><img src="image-20231103103633725.png" alt="image-20231103103633725" style="zoom:50%;" /><p>修改偏好设置：</p><img src="image-20231103103533030.png" alt="image-20231103103533030" style="zoom:50%;" /><hr><p>shift+F12 调出控制台：</p><img src="image-20231016095537228.png" alt="image-20231016095537228" style="zoom:50%;" /><hr><p>在需要分页的时候，添加分页符，导出 PDF 时可以进行分页：</p><ul><li><code>---</code></li><li><code>***</code></li><li><code>_____</code></li></ul><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ftthablopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ftthablopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*手动分页控制：需要手动添加分页符， &#x27;----&#x27;、&#x27;***&#x27; 、&#x27;_______&#x27; */</span><br><span class="hljs-keyword">@media</span> print, (<span class="hljs-attribute">overflow-block</span>: paged) <span class="hljs-keyword">or</span> (<span class="hljs-attribute">overflow-block</span>: optional-paged) &#123;<br>  hr &#123;<br>    <span class="hljs-attribute">page-break-after</span>: always; <span class="hljs-comment">/* CSS 2 */</span><br>    <span class="hljs-attribute">break-after</span>: region; <span class="hljs-comment">/* CSS 3+ */</span><br>    <span class="hljs-comment">/* minimal layout disruption: */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0.1mm</span>;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>仅支持普通的<code>html</code>标签，不支持<code>class</code>、<code>id</code>、<code>data-*</code>等自定义属性。</p><hr><p>高亮快捷键：</p><img src="image-20231103103407067.png" alt="image-20231103103407067" style="zoom:50%;" /><img src="image-20231103103444079.png" alt="image-20231103103444079" style="zoom:50%;" />]]></content>
    
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四.git常用命令</title>
    <link href="/2023/09/06/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/09/06/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Git文档：<a href="https://git-scm.com/docs">https://git-scm.com/docs</a></p><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>推送代码：git add .           git commit -m &quot;1&quot;             git push</p><p>拉取代码：</p><ol><li>git checkout master</li><li>git pull</li><li>git checkout dev-lan777</li><li>git merge master —no-commit</li><li>git push【sync changes】</li><li>npm run dev</li></ol><p>创建分支：</p><ol><li>git checkout master</li><li>git pull</li><li>git checkout -b the-name-of-my-branch</li></ol><p>合并分支：</p><ol><li>git add .</li><li>git commit -m &quot;1&quot;</li><li>git push</li><li>git checkout master</li><li>git pull</li><li>git merge dev-lan777 —no-commit<ol><li>【处理merge冲突的代码后保存】</li><li>git add .</li><li>git commit -m &quot;2&quot;</li></ol></li><li>git push【maintainer角色】</li></ol><p>打包部署：</p><ol><li>npm run build:test</li><li>git add .</li><li>git commit -m &quot;2&quot;</li><li>git push</li></ol><p>删除文件夹：git bash命令：rm -rf node_modules</p><p>切换分支：git checkout -b dev-lan777</p><p>暂存修改：git stash</p><ul><li><code>git stash pop</code> 的作用是将最近一次暂存的修改应用到当前分支，并将该暂存记录从存储堆栈中移除。它的执行过程如下：<ol><li>将最近一次的暂存修改从存储堆栈中取出。</li><li>将这些修改应用到当前所在分支上。</li><li>如果应用成功，则将该暂存记录从存储堆栈中移除。</li></ol></li></ul><p>查看日志：git log —oneline</p><p>git rebase dev-lan777</p><p>上下箭头返回之前的git命令</p><p>git回退到commit_id的状态：</p><ol><li>git log：查看commit的历史记录及其对应的commit_id</li><li>git reset --hard commit_id</li><li>git push origin HEAD --force：使本地和远程的内容都回退到commit_id对应的状态。</li></ol><img src="image-20231029004846153.png" alt="image-20231029004846153" style="zoom:50%;" /><p><code>Auto packing the repository in background for optimum performance.See &quot;git help gc&quot; for manual housekeeping.</code>：</p><ol><li>git fsck --lost-found：出现很多&quot;dangling commit&quot;</li><li>git gc --prune&#x3D;now</li></ol><p>git推送lan-blog中的fluid主题文件夹：推送fluid后再回到lan-blog</p><ol><li>cd themes&#x2F;fluid</li><li>git add .</li><li>git commit -m &quot;1&quot;</li><li>git push</li></ol><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><p>Github仓库导入到Gitee：</p><img src="image-20231106151706877.png" alt="image-20231106151706877" style="zoom:50%;" /><p>授权Github后：</p><img src="image-20231106151617948.png" alt="image-20231106151617948" style="zoom:50%;" /><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><img src="image-20231012112042094.png" alt="image-20231012112042094" style="zoom:50%;" /><p>原因：在分支创建时，使用了与远程不一致的分支名。</p><p>解决方法：修改<code>git push</code>默认规则<code>git config push.default upstream</code></p><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">OpenSSL SSL_read: Connection was reset, errno 10054</p><p> 解决方法：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hdwxb8lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hdwxb8lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.sslVerify <span class="hljs-string">&quot;false&quot;</span><br>git config --global https.sslVerify <span class="hljs-string">&quot;false&quot;</span><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三.暑期实习问题总结</title>
    <link href="/2023/08/27/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/27/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><mark>debugger</mark></p><p>vscode中Ctrl+shift+P调出控制面板：</p><img src="image-20231009155049000.png" alt="image-20231009155049000" style="zoom:50%;" /><p>Ctrl+P：通过文件名搜索文件路径</p><hr><p>Chrome插件：<code>Vue.js devtools</code></p><img src="image-20231101175926473.png" alt="image-20231101175926473" style="zoom:50%;" /><hr><p>创建vue+vite+ts项目：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bnpudblopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bnpudblopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create vite@latest<br></code></pre></td></tr></table></div></figure><p>选择Vue和TypeScript：</p><img src="image-20231009150557306.png" alt="image-20231009150557306" style="zoom:50%;" /><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8giy88lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8giy88lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> vite-project<br>npm install<br>npm run dev<br></code></pre></td></tr></table></div></figure><img src="image-20231009151438381.png" alt="image-20231009151438381" /><p>index.html中修改网站图标和标题：</p><img src="image-20231009151528709.png" alt="image-20231009151528709" style="zoom:50%;" /><hr><p>Vue代码模板：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jlq45plopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jlq45plopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>    <br>&lt;/script&gt;<br><br>&lt;template&gt;<br><br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>在vscode管理中点击用户代码片段code snippets：文件→首选项→Configure Use Snippets→New Global Snippets file→输入名称</p><p>借助<code>https://snippet-generator.app/</code>生成代码即可：</p><img src="image-20230927172325096.png" alt="image-20230927172325096" style="zoom:50%;" /><p class="note note-danger">注意要加上{}</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ypp1ytlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ypp1ytlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;v3&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;v3&quot;</span>,<br>      <span class="hljs-string">&quot;body&quot;</span>: [<br>        <span class="hljs-string">&quot;&lt;script setup lang=\&quot;ts\&quot;&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;    &quot;</span>,<br>        <span class="hljs-string">&quot;&lt;/script&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;template&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;/template&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;/style&gt;&quot;</span><br>      ],<br>      <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;v3&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在文件中使用：v3回车</p><hr><p>vs code插件：</p><ul><li>TypeScript Vue Plugin(Volar)</li><li>Vue Language Features(Volar)</li><li>ESLint：JavaScript 代码检查工具</li><li>Prettier-Code formatter：代码缩进应该使用 tabs 还是空格。Prettier根据预设配置的规则重新格式化代码，以保证代码整洁。运行 Prettier，你的所有 tabs 都将转换为空格，同时缩进、引号等也都将根据你的配置而改变。理想状态下，当你保存文件时，Prettier 会自动执行格式化操作。</li><li>px2rem</li><li>Auto Close Tag</li><li>Auto Complete Tag</li><li>Auto Rename Tag</li><li>Path Intellisense</li><li>vscode-icons</li></ul><hr><h1 id="一-Form组件替换"><a href="#一-Form组件替换" class="headerlink" title="一.Form组件替换"></a>一.Form组件替换</h1><p>el-form表单二次封装：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p17t3hlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p17t3hlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;50px&quot;</span> <span class="hljs-attr">label-position</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;accessInfo.isOwner&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;起始节点&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;结束节点&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-atyff1lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-atyff1lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">:formObj</span>=<span class="hljs-string">&quot;formObj&quot;</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">&quot;formData&quot;</span> <span class="hljs-attr">:labelWidth</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">:labelPosition</span>=<span class="hljs-string">&quot;&#x27;top&#x27;&quot;</span> <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;&#x27;mini&#x27;&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;accessInfo.isOwner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">fromid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.fromid&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">toid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.toid&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-w74l5glopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-w74l5glopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br>&lt;script&gt;<br>    import Form from &#x27;@/components/common/Form&#x27;<br>    export default&#123;<br>        components:&#123;<br>            Form<br>        &#125;,<br>        data()&#123;<br>            return&#123;<br>                formData:&#123;<br>                    fromid: &#x27;&#x27;,<br>                    toid: &#x27;&#x27;<br>                &#125;,<br>                formObj:[<br>                    &#123;<br>                        specialFormItem: true,<br>                        specialName: &quot;fromid&quot;,<br>                        label: &quot;起始节点&quot;<br>                    &#125;,<br>                    &#123;<br>                        specialFormItem: true,<br>                        specialName: &quot;toid&quot;,<br>                        label: &quot;结束节点&quot;<br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><br/><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-m59mfglopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-m59mfglopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;名称&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.name&quot;</span> <span class="hljs-attr">:maxlength</span>=<span class="hljs-string">&quot;60&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;描述&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.desc&quot;</span> <span class="hljs-attr">:maxlength</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">:rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;类型&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.type&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择类型&quot;</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;wdith:100%&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;HIVE&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;SQL&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;数据库&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">filterable</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.hiveDatabase&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;formData.table=&#x27;&#x27;&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择数据库&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.database&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.database&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in hiveDatabaseList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sweuxwlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sweuxwlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">formObj</span>:[<br>    &#123;<br>        <span class="hljs-attr">input</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;名称&#x27;</span>,<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br>        <span class="hljs-attr">maxlength</span>: <span class="hljs-number">60</span>,<br>        <span class="hljs-attr">inputStyle</span>: <span class="hljs-string">&#x27;width: 100%&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">textarea</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;描述&#x27;</span>,<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;desc&#x27;</span>,<br>        <span class="hljs-attr">maxlength</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">inputStyle</span>: <span class="hljs-string">&#x27;width: 100%&#x27;</span>,<br>        <span class="hljs-attr">autosize</span>: &#123;<span class="hljs-attr">minRows</span>: <span class="hljs-number">5</span>&#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">select</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;类型&#x27;</span>,<br>        <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;请选择类型&#x27;</span>,<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;type&#x27;</span>,<br>        <span class="hljs-attr">maxlength</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">inputStyle</span>: <span class="hljs-string">&#x27;width: 100%&#x27;</span>,<br>        <span class="hljs-attr">options</span>: [<br>            &#123;<br>                <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;HIVE&#x27;</span>,<br>                <span class="hljs-attr">value</span>: <span class="hljs-number">0</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;SQL&#x27;</span>,<br>                <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>            &#125;,<br>        ]<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">searchSelect</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;数据库&#x27;</span>,<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;hiveDatabase&#x27;</span>,<br>        <span class="hljs-attr">options</span>: [],<br>        <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;请选择数据库&#x27;</span><br>    &#125;,<br>]<br></code></pre></td></tr></table></div></figure><br/><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7pgkunlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7pgkunlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;ruleForm&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ruleForm&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;项目名称&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;ruleForm.name&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;isSharedProject==0 ? &#x27;请输入共享项目名称&#x27; : &#x27;请输入本地项目名称&#x27;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qcgwuslopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qcgwuslopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">:formObj</span>=<span class="hljs-string">&quot;formObj&quot;</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">&quot;ruleForm&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ruleForm&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-aeoatulopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-aeoatulopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br>&lt;script&gt;<br>import Form from &#x27;@/components/common/Form&#x27;<br>    export default&#123;<br>        components:&#123;<br>            Form<br>        &#125;,<br>        data()&#123;<br>            return&#123;<br>                ruleForm: &#123;<br>                    name: &#x27;&#x27;,<br>                &#125;,<br>                rules:&#123;<br>                    name: [<br>                        &#123;<br>                            required: true,<br>                            message: &#x27;请输入项目名称&#x27;,<br>                            trigger: &#x27;blur&#x27;,<br>                        &#125;,<br>                    ],<br>                &#125;,<br>                formObj:[<br>                    &#123;<br>                        input: true,<br>                        label: &#x27;项目名称&#x27;,<br>                        prop: &#x27;name&#x27;,<br>                        placeholder: &quot;&quot;,<br>                        size: &quot;mini&quot;,<br>                        inputStyle: &quot;width: 100%&quot;<br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            updatePlaceholder()&#123;<br>                this.formObj[0].placeholder=this.isSharedProject==0 ? &#x27;请输入共享项目名称&#x27; : &#x27;请输入本地项目名称&#x27;<br>            &#125;,<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><br/><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pz4qd6lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pz4qd6lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&#x27;formData&#x27;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#x27;mini&#x27;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;formNode&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;item in formList&#x27;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;item.key&#x27;</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">&#x27;item.desc&#x27;</span> <span class="hljs-attr">:prop</span>=<span class="hljs-string">&#x27;item.key&#x27;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&#x27;item.rules&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;formData[item.key]&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;textarea&#x27;</span> <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;`Type-$&#123;(item.type&#125;\nFormat -JSON`&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vzjm9clopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vzjm9clopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Form :formObj=&quot;formObj&quot; :formData=&quot;formData&quot; :size=&quot;&#x27;mini&#x27;&quot; ref=&quot;formNode&quot;&gt;<br>&lt;/Form&gt;<br></code></pre></td></tr></table></div></figure><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4sohi8lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4sohi8lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br>&lt;script&gt;<br>import Form from &#x27;@/components/common/Form&#x27;<br>    export default&#123;<br>        components:&#123;<br>            Form<br>        &#125;,<br>        data()&#123;<br>            return&#123;<br>                formData,<br>                formList,<br>                formObj:[]<br>            &#125;<br>        &#125;,<br>        created()&#123;<br>            this.updateFormObj()<br>        &#125;,<br>        methods: &#123;<br>            updateFormObj()&#123;<br>                this.formObj=this.formList.map(item=&gt;&#123;<br>                    return&#123;<br>                        key: item.key,<br>                        label: item.desc,<br>                        prop: item.key,<br>                        rules: item.rules,<br>                        textarea: true,<br>                        prop: item.key,<br>                        placeholder: `Type-$&#123;(item.type&#125;\nFormat -JSON`<br>                    &#125;<br>                &#125;)<br>            &#125;,<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><h1 id="二-LLM"><a href="#二-LLM" class="headerlink" title="二.LLM"></a>二.LLM</h1><p class="note note-success" style="border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;">Ctrl+,打开vscode的设置</p><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p>Vite是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：</p><ul><li>一个开发服务器，它基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ES 模块</a> 提供了 <a href="https://cn.vitejs.dev/guide/features.html">丰富的内建功能</a>，如速度快到惊人的 <a href="https://cn.vitejs.dev/guide/features.html#hot-module-replacement">模块热更新（HMR）</a>。</li><li>一套构建指令，它使用 <a href="https://rollupjs.org/">Rollup</a> 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li></ul><p>在 Vite 中，<mark>defineConfig</mark>是一个函数，用于定义和导出 Vite 的配置。它主要用于创建一个合法的配置对象，以供 Vite 使用。</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">报错：找不到模块“path”或其相应的类型声明</p><img src="image-20231010094751290.png" alt="image-20231010094751290" style="zoom:43%;" /><p>因为path模块是node.js内置的功能，但是node.js本身并不支持typescript，所以直接在typescript项目里使用是不行的。</p><p>解决方法：安装<code>@types/node</code></p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kqqnzwlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kqqnzwlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install @types/node --save-dev<br></code></pre></td></tr></table></div></figure><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">控制台警告：[Vue warn]: Failed to resolve component: router-linkIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement. at < App > </p><img src="image-20231010101246698.png" alt="image-20231010101246698" style="zoom:40%;" /><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">报错：找不到模块“@/views./home.vue'或其相应的类型声明</p><img src="image-20231010101705820.png" alt="image-20231010101705820" style="zoom:50%;" /><p>tsconfig.json文件中加入：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-18udozlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-18udozlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,<br><span class="hljs-string">&quot;paths&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;@/*&quot;</span>: [<span class="hljs-string">&quot;./src/*&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231010101345972.png" alt="image-20231010101345972" style="zoom:50%;" /><p>然后重启项目即可。</p><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">修改端口号 ，使用localhost访问</p><p>在vite.config.ts添加：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ox8kr2lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ox8kr2lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<span class="hljs-comment">//端口号</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//ip地址 或 &#x27;0.0.0.0&#x27; 或 &quot;loaclhost&quot;</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//启动后是否自动打开浏览器</span><br>    <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否开启 https</span><br>&#125;,<br></code></pre></td></tr></table></div></figure><img src="image-20231010103633427.png" alt="image-20231010103633427" style="zoom:50%;" /><p><code>&lt;router-view /&gt;</code>是用于呈现路由组件的占位符。当你使用 Vue Router 进行页面导航时，它会根据当前路由配置加载相应的组件，并将其渲染到 <code>&lt;router-view /&gt;</code> 中。</p><img src="image-20231010104903812.png" alt="image-20231010104903812" style="zoom:40%;" /><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">报错：Preprocessor dependency "sass"not found</p><img src="image-20231011172319536.png" alt="image-20231011172319536" style="zoom:50%;" /><p>解决方法：npm install -D sass</p><hr><p><code>postcss-pxtorem</code>是postcss的一个插件，可以将对应的像素单位转换为rem。主要用于适应不同的分辨率的移动设备，从而实现响应式布局。在vite中可以直接对其进行配置，因为vite已经集成了postcss。</p><p>其中最重要的配置属性为：</p><ul><li>rootValue：根元素的值，即1rem对应的像素值大小。一般设置为设计稿尺寸&#x2F;10</li></ul><p>以及一些其他属性：</p><ul><li>propList：需要进行转换的css属性的值，可以使用通配符。如：<code>*</code>意思是将全部属性单位都进行转换；<code>[&quot;*position*&quot;]</code>会匹配到<code>background-position-y</code></li><li>selectorBlackList：不进行单位转换的选择器。如设置为字符串<code>body</code>，则所有含有body字符串的选择器都不会被该插件进行转换；若设置为<code>[/^body$/]</code>，则<code>body</code>会被匹配到而不是<code>.body</code></li><li>exclude：不需要进行单位转换的文件</li><li>mediaQuery：是否允许像素在媒体查询中进行转换</li></ul><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pyuxwtlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pyuxwtlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install postcss-pxtorem --save-dev<br>npm install amfe-flexible --save-dev<br></code></pre></td></tr></table></div></figure><p>在main.js中引入：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qn9txrlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qn9txrlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;amfe-flexible&#x27;</span><br></code></pre></td></tr></table></div></figure><p>在vite.config.js中配置postcss-pxtorem：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t3d9brlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t3d9brlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">postcss</span>: &#123;<br>        <span class="hljs-attr">plugins</span>: [<br>            <span class="hljs-title function_">postCssPxToRem</span>(&#123;<br>                <span class="hljs-attr">rootValue</span>: <span class="hljs-number">37.5</span>,<br>                <span class="hljs-attr">propList</span>: [<span class="hljs-string">&#x27;*&#x27;</span>],<br>                <span class="hljs-comment">//转换成rem后保留的小数点位数</span><br>                <span class="hljs-comment">// unitPrecision: 5,</span><br>                <span class="hljs-comment">//小于12px的样式不被替换成rem</span><br>                <span class="hljs-comment">// minPixelValue: 12,</span><br>                <span class="hljs-comment">//selectorBlackList: [&#x27;.qz-&#x27;],// 要忽略的选择器并保留为px。</span><br>                <span class="hljs-comment">//忽略一些文件，不进行转换，比如我想忽略 依赖的UI框架</span><br>                <span class="hljs-comment">// exclude: [&#x27;node_modules&#x27;]</span><br>            &#125;)<br>        ]<br>    &#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231020143318360.png" alt="image-20231020143318360" style="zoom:50%;" /><img src="image-20231020143255549.png" alt="image-20231020143255549" style="zoom:50%;" /><p>行内样式的px不会转换成rem：</p><img src="image-20231023105224042.png" alt="image-20231023105224042" style="zoom:50%;" /><img src="image-20231023104657917.png" alt="image-20231023104657917" style="zoom:50%;" /><p>如果想让行内样式的px转换成rem：</p><ol><li><p>有很多公用的js函数，为了便于集中管理，可以在src下面新建一个utils文件夹统一管理：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1puowtlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1puowtlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">px2rem</span>(<span class="hljs-params">px: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/%/gi</span>.<span class="hljs-title function_">test</span>(px)) &#123;<span class="hljs-comment">// 有百分号%，特殊处理，表述pc是一个有百分号的数，比如：90%</span><br>        <span class="hljs-keyword">return</span> px<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseFloat</span>(px) / <span class="hljs-number">192</span> + <span class="hljs-string">&#x27;rem&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231024111039721.png" alt="image-20231024111039721" style="zoom:50%;" /><p>在main.ts中注册全局方法$px2rem：</p><img src="image-20231024110931821.png" alt="image-20231024110931821" style="zoom:50%;" /><p>在vue中使用：</p><img src="image-20231024112954917.png" alt="image-20231024112954917" style="zoom:50%;" /></li><li><p>不用全局注册，直接局部引用：</p><img src="image-20231024113151892.png" alt="image-20231024113151892" style="zoom:50%;" /></li></ol><hr><p>前端报错<code>Access to XMLHttpRequest at &#39; http ://10.114.49.20:8000/ private / knowledge / compl etion &#39; from origin &#39; http :// localhost :8085&#39; has been bloc ked by CORS policy : Respons e to preflight request doesn &#39; t pass access control check : No &#39; Access- Control-Allow-Origin &#39; header is present on the requested resource</code>：这个错误是由于浏览器的跨域安全策略（CORS）导致的。</p><p>CORS策略要求服务器在响应中添加特定的头部信息，以允许来自不同源（Origin）的请求访问资源。在你的错误信息中，报告了来自本地开发服务器（<code>http://localhost:8085</code>）对另一个域（<code>http://10.114.49.20:8000</code>）的请求被阻止了。</p><p>要解决这个问题，你可以尝试以下几种方法：</p><ol><li><p><strong>后端配置：</strong> 在 <code>http://10.114.49.20:8000</code> 的服务器端代码中，添加合适的响应头来允许跨域请求。具体而言，你需要在响应中添加 <code>Access-Control-Allow-Origin</code> 头，将其值设置为 <code>http://localhost:8085</code>。</p></li><li><p><strong>使用代理：</strong> 如果你在开发环境中使用的是 Vite 或类似的工具，你可以尝试配置开发服务器的代理，将请求转发到正确的地址。在 Vite 中，你可以通过修改 <code>vite.config.js</code> 文件来配置代理，如下所示：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4k5r4tlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4k5r4tlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<span class="hljs-comment">//设置地址：http://localhost</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8083</span>, <span class="hljs-comment">// 设置服务启动端口号</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 设置服务启动时是否自动打开浏览器</span><br>    <span class="hljs-attr">cors</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 允许跨域</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>        <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>            <span class="hljs-attr">target</span>: env.<span class="hljs-property">VITE_APP_BASE_URL</span>,<span class="hljs-comment">//代理的地址</span><br>            <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">//这里的/需要转义</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></div></figure><p>这样，所有以 <code>/private</code> 开头的请求将被代理到 <code>http://10.114.49.20:8000</code> 地址。</p></li><li><p><strong>修改前端开发服务器的地址：</strong> 如果你有权限更改后端服务器的配置，可以考虑将前端开发服务器的地址设置为与后端服务器相同的地址（例如 <code>http://10.114.49.20:8000</code>），这样就不存在跨域问题了。</p></li></ol><hr><p>使用环境变量，是基于不同环境实现不同逻辑的。比如，在生产环境和开发环境将BASE_URL设置成不同的值，用来请求不同的环境的接口。</p><p>Vite内置了<code>dotenv</code>这个第三方库， dotenv会自动读取.env文件， dotenv 从你的 环境目录 中的下列文件加载额外的环境变量：</p><ul><li>.env：所有情况下都会加载</li><li>.env.[mode]：只在指定模式下加载</li></ul><p>默认情况下，<code>npm run dev</code>会加载 .env 和 .env.development 内的配置，<code>npm run build</code>会加载 .env 和 .env.production 内的配置，mode 可以通过命令行 --mode 选项来重写。</p><p>加载的环境变量也会通过 import.meta.env 以字符串形式暴露给客户端源码。为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码。</p><hr><p>设置 Volar Takeover 模式 来支持 Vue 的 TS 语言服务：</p><ol><li>在当前项目的工作空间下，用 <code>Ctrl + Shift + P</code> (macOS：<code>Cmd + Shift + P</code>) 唤起命令面板。</li><li>输入 <code>built</code>，然后选择“Extensions：Show Built-in Extensions”。</li><li>在插件搜索框内输入 <code>typescript</code> (不要删除 <code>@builtin</code> 前缀)。</li><li>点击“TypeScript and JavaScript Language Features”右下角的小齿轮，然后选择“Disable (Workspace)”。</li><li>重新加载工作空间。Takeover 模式将会在你打开一个 Vue 或者 TS 文件时自动启用。</li></ol><p>增加 eslint 代码检查，新增依赖：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5yjqm6lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5yjqm6lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D eslint eslint-plugin-vue vue-eslint-parser @typescript-eslint/eslint-plugin @typescript-eslint/parser<br></code></pre></td></tr></table></div></figure><p>新增 .eslint.cjs 文件：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lb20r1lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lb20r1lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;vue-eslint-parser&#x27;</span>,<br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>,<br>    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-number">2020</span>,<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#x27;module&#x27;</span>,<br>    <span class="hljs-attr">jsxPragma</span>: <span class="hljs-string">&#x27;React&#x27;</span>,<br>    <span class="hljs-attr">ecmaFeatures</span>: &#123;<br>      <span class="hljs-attr">jsx</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">es2020</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;eslint:recommended&#x27;</span>, <span class="hljs-string">&#x27;plugin:vue/vue3-recommended&#x27;</span>, <span class="hljs-string">&#x27;@vue/typescript/recommended&#x27;</span>],<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&#x27;no-console&#x27;</span>: process.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">MODE</span> === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;warn&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;no-debugger&#x27;</span>: process.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">MODE</span> === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;warn&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;vue/require-default-prop&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;no-empty-function&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-empty-function&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/ban-ts-comment&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;vue/html-self-closing&#x27;</span>: [<span class="hljs-string">&#x27;off&#x27;</span>],<br>    <span class="hljs-string">&#x27;vue/singleline-html-element-content-newline&#x27;</span>: [<span class="hljs-string">&#x27;off&#x27;</span>],<br>    <span class="hljs-string">&#x27;vue/html-closing-bracket-newline&#x27;</span>: [<span class="hljs-string">&#x27;off&#x27;</span>],<br>    <span class="hljs-string">&#x27;vue/html-indent&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-this-alias&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></div></figure><p>新增 .eslintignore：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-k54ze8lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-k54ze8lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">*.sh<br>node_modules<br>*.md<br>*.woff<br>*.ttf<br>.vscode<br>.idea<br>dist<br>/public<br>/docs<br>.husky<br>/bin<br></code></pre></td></tr></table></div></figure><p>在项目中新增 prettier 进行代码格式化，新增依赖<code>eslint-config-prettier</code>：如果你的 ESLint 预设包含格式化规则，它们可能会与 Prettier 发生冲突。我们建议使用eslint-config-prettier 禁用你 ESLint 预设中的所有格式化规则，这样 ESLint 就只用于捕捉逻辑错误。</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xxjx5jlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xxjx5jlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D prettier eslint-config-prettier<br></code></pre></td></tr></table></div></figure><p>新增 .prettierrc.json 文件</p><figure class="highlight json"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-95cmohlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-95cmohlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;printWidth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;trailingComma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tabWidth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;useTabs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;vueIndentScriptAndStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;singleAttributePerLine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></div></figure><p>新增 .prettierignore 文件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-m56twrlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-m56twrlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">/dist/*<br>/node_modules/**<br>pnpm-lock.yaml<br>**/*.svg<br>**/*.sh<br>/public/*<br></code></pre></td></tr></table></div></figure><p>在设置中开启自动保存和格式化，在项目中的.vscode 文件夹内新增 settings.json 文件：</p><figure class="highlight json"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3f0dymlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3f0dymlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></div></figure><p>重启vscode生效。</p><hr><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>安装：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-peffoolopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-peffoolopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router -S<br></code></pre></td></tr></table></div></figure><p>src文件夹下创建 router 文件夹，创建 index.ts 文件：</p><figure class="highlight typescript"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ojlis5lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ojlis5lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory, <span class="hljs-title class_">RouteRecordRaw</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteRecordRaw</span>&gt; = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/auditAnswer/navigation&#x27;</span>,<span class="hljs-comment">/* 重定向 */</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/auditAnswer&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;auditAnswer&#x27;</span>,<br>    <span class="hljs-comment">/* alias: [&#x27;/home&#x27;,&#x27;/home2&#x27;],   //别名 */</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/home/index.vue&#x27;</span>),<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;navigation&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;navigation&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/home/desc.vue&#x27;</span>) <br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;chat&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chat&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/home/chat/index.vue&#x27;</span>) <br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/auditSQL&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/auditSQL/navigation&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/auditSQL&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;auditSQL&#x27;</span>,<br>  &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;navigation&#x27;</span>,<br>        <span class="hljs-comment">/* 不能和/auditAnswer/navigation的name重复 */</span><br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;navigation2&#x27;</span>,<span class="hljs-comment">/* name: &#x27;navigation&#x27;不对 */</span><br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/sql/sqldesc.vue&#x27;</span>) <br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;sql&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sql&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/sql/index.vue&#x27;</span>) <br>      &#125;<br>    ]<br>  &#125;,<br>]<br><span class="hljs-comment">/* 创建路由实例 */</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></div></figure><p>在 main.ts 中引入并注册：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vx3i9glopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vx3i9glopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; creatApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><span class="hljs-keyword">const</span> app=<span class="hljs-title function_">creatApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(store)<br></code></pre></td></tr></table></div></figure><p>跳转404页面：在src文件夹下的views文件夹创建NotFound文件夹，创建index.vue。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p8q1i8lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p8q1i8lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>    <br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;p&gt;<br>        404<br>    &lt;/p&gt;<br>&lt;h5&gt;<br>        您访问的页面不存在<br>    &lt;/h5&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>scr&#x2F;router&#x2F;index.ts：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2jr1rnlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2jr1rnlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFound</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/view/NotFound/404.vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteRecordRaw</span>&gt; = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:pathMatch(.*)&#x27;</span>,<span class="hljs-comment">/*pathMatch(.*)*表示匹配所有路径*/</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>  &#125;,<br>    &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;404&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">NotFound</span><br>  &#125;,<br>]<br></code></pre></td></tr></table></div></figure><p>使用一个自定义组件 <code>router-link</code> 来创建链接。这使得 Vue Router 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xu1uiulopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xu1uiulopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello App!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用 router-link 组件进行导航 --&gt;</span><br>    <span class="hljs-comment">&lt;!--通过传递 `to` 来指定链接 --&gt;</span><br>    <span class="hljs-comment">&lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p><code>router-view</code> 将显示与 url 对应的组件。你可以把它放在任何地方，以适应你的布局。</p><p>因为我们在 <code>setup</code> 里面没有访问 <code>this</code>，所以我们不能再直接访问 <code>this.$router</code> 或 <code>this.$route</code>。作为替代，我们使用 <code>useRouter</code> 和 <code>useRoute</code> 函数。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9oujuolopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9oujuolopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; useRoute &#125; from &#x27;vue-router&#x27;<br>import router from &#x27;@/router&#x27;<br>const $route=useRoute()<br>    <br>onMounted(()=&gt;&#123;<br>    if($route.name===&#x27;auditSQL&#x27;)&#123;<br>        localStorage.setItem(&#x27;sqlArray&#x27;,JSON.stringify([]))<br>        homeStore.clearSqlArr()<br>    &#125;<br>//上一个页面<br>    if(router.options.history.state.back===&#x27;/auditSQL/navigation&#x27;)&#123;&#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>将给定匹配模式的路由映射到同一个组件。例如，我们可能有一个 <code>User</code> 组件，它应该对所有用户进行渲染，但用户 ID 不同。在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，我们称之为路径参数 ：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pbh4qalopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pbh4qalopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment">// 这些都会传递给 `createRouter`</span><br><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 动态字段以冒号开始</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/:id&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span> &#125;,<br>]<br></code></pre></td></tr></table></div></figure><p>现在像 <code>/users/johnny</code> 和 <code>/users/jolyne</code> 这样的 URL 都会映射到同一个路由。</p><p>&#x3D;&#x3D;路径参数用冒号 <code>:</code> 表示&#x3D;&#x3D;。当一个路由被匹配时，它的params的值将在每个组件中以 <code>this.$route.params</code> 的形式暴露出来。因此，我们可以通过更新 <code>User</code> 的模板来呈现当前的用户 ID：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-aqm02glopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-aqm02glopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">编程式导航</p><p>想要导航到不同的 URL，可以使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。</p><p>当你点击 <code>&lt;router-link&gt;</code> 时，内部会调用这个方法，所以点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 相当于调用 <code>router.push(...)</code> ：</p><table><thead><tr><th align="left">声明式</th><th align="left">编程式</th></tr></thead><tbody><tr><td align="left"><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td align="left"><code>router.push(...)</code></td></tr></tbody></table><p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ct21o1lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ct21o1lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 字符串路径 */</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/users/eduardo&#x27;</span>)<br><br><span class="hljs-comment">/* 带有路径的对象 */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/eduardo&#x27;</span> &#125;)<br><br><span class="hljs-comment">/* 命名的路由，并加上参数，让路由建立 url */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;eduardo&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">/* 带查询参数，结果是 /register?plan=private */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">plan</span>: <span class="hljs-string">&#x27;private&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">/* 带 hash，结果是 /about#team */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;#team&#x27;</span> &#125;)<br></code></pre></td></tr></table></div></figure><p><strong>注意</strong>：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 <code>name</code> 或手写完整的带有参数的 <code>path</code> ：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vbf8qtlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vbf8qtlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> username = <span class="hljs-string">&#x27;eduardo&#x27;</span><br><span class="hljs-comment">/* 我们可以手动建立 url，但我们必须自己处理编码 */</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/user/<span class="hljs-subst">$&#123;username&#125;</span>`</span>) <br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">`/user/<span class="hljs-subst">$&#123;username&#125;</span>`</span> &#125;) <br><span class="hljs-comment">/* 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益 */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; username &#125; &#125;) <br><br><span class="hljs-comment">/* `params` 不能与 `path` 一起使用 */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; username &#125; &#125;)<br></code></pre></td></tr></table></div></figure><p>当指定 <code>params</code> 时，可提供 <code>string</code> 或 <code>number</code> 参数（或者对于可重复的参数可提供一个数组）。任何其他类型（如 <code>undefined</code>、<code>false</code> 等）都将被自动字符串化。对于可选参数，你可以提供一个空字符串（<code>&quot;&quot;</code>）来跳过它。</p><p>由于属性 <code>to</code> 与 <code>router.push</code> 接受的对象种类相同，所以两者的规则完全相同。</p><p><code>router.push</code> 和所有其他导航方法都会返回一个 <em>Promise</em>，让我们可以等到导航完成后才知道是成功还是失败。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6256lqlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6256lqlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>    import &#123; onBeforeRouteLeave, onBeforeRouteUpdate &#125; from &#x27;vue-router&#x27;<br>    import &#123; ref &#125; from &#x27;vue&#x27;<br><br>    // 与 beforeRouteLeave 相同，无法访问 `this`<br>    onBeforeRouteLeave((to, from) =&gt; &#123;<br>        const answer = window.confirm(<br>            &#x27;Do you really want to leave? you have unsaved changes!&#x27;<br>        )<br>        // 取消导航并停留在同一页面上<br>        if (!answer) return false<br>    &#125;)<br><br>    const userData = ref()<br><br>    // 与 beforeRouteUpdate 相同，无法访问 `this`<br>    onBeforeRouteUpdate(async (to, from) =&gt; &#123;<br>        //仅当 id 更改时才获取用户，例如仅 query 或 hash 值已更改<br>        if (to.params.id !== from.params.id) &#123;<br>            userData.value = await fetchUser(to.params.id)<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p>div设置圆角边框：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-uesdpvlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-uesdpvlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>; <span class="hljs-comment">/* 设置边框样式 */</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置圆角半径 */</span><br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>设置水平垂直居中：</p><ol><li>使用 Flexbox：</li></ol><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7w0bi3lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7w0bi3lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-comment">/* 水平居中 */</span><br>  <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* 垂直居中 */</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>在上述代码中，父容器 <code>.container</code> 需要具有一定的高度和宽度，并且设置为 <code>display: flex;</code>。通过设置 <code>justify-content: center;</code> 和 <code>align-items: center;</code> 可以将子元素水平和垂直居中。</p><ol start="2"><li>使用绝对定位和 transform：将<code>container</code>设置为相对定位(<code>position: relative</code>)，然后将 <code>centered-element</code> 设置为绝对定位(<code>position: absolute</code>)，再设置 <code>centered-element</code> 的<code>top</code>和<code>left</code>即可相对于 <code>container</code> 的宽度进行计算。</li></ol><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wy5gu8lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wy5gu8lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.centered-element</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在上述代码中，父容器 <code>.container</code> 需要设置为 <code>position: relative;</code>，然后在要居中的子元素上添加 <code>.centered-element</code> 类。通过设置 <code>top: 50%;</code>、<code>left: 50%;</code> 和 <code>transform: translate(-50%, -50%);</code> 可以将子元素水平和垂直居中。</p><hr><p><code>&lt;el-col&gt;</code> 是 Element UI 库中的栅格布局组件，用于创建响应式的网格系统。通过使用 <code>:xs</code>、<code>:sm</code>、<code>:md</code>、<code>:lg</code> 和 <code>:xl</code> 这些属性，可以定义在不同屏幕尺寸下 <code>&lt;el-col&gt;</code> 元素所占据的列数。</p><p>对于你提供的代码 <code>&lt;el-col :xs=&quot;8&quot; :sm=&quot;6&quot; :md=&quot;4&quot; :lg=&quot;3&quot; :xl=&quot;1&quot;&gt;</code>，这表示在不同屏幕尺寸下，列元素 <code>&lt;el-col&gt;</code> 分别占据的列数。具体设置如下：</p><ul><li><code>:xs=&quot;8&quot;</code>：在超小屏幕设备（&lt;768px 宽度）下，该列元素占据 8 列的宽度。</li><li><code>:sm=&quot;6&quot;</code>：在小屏幕设备（≥768px 宽度）下，该列元素占据 6 列的宽度。</li><li><code>:md=&quot;4&quot;</code>：在中等屏幕设备（≥992px 宽度）下，该列元素占据 4 列的宽度。</li><li><code>:lg=&quot;3&quot;</code>：在大屏幕设备（≥1200px 宽度）下，该列元素占据 3 列的宽度。</li><li><code>:xl=&quot;1&quot;</code>：在超大屏幕设备（≥1920px 宽度）下，该列元素占据 1 列的宽度。</li></ul><p>这些属性值代表了 <code>&lt;el-col&gt;</code> 元素在不同屏幕尺寸下所占据的相对宽度比例。</p><hr><p>父组件中引用子组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-smogldlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-smogldlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;; // 导入子组件<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;ChildComponent /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><hr><p>要实现上下两栏固定，中间栏自适应的布局：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8gx7xrlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8gx7xrlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; <span class="hljs-comment">/* 设置容器高度为视窗高度 */</span></span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.header</span>,</span><br><span class="language-css">  <span class="hljs-selector-class">.footer</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 固定高度为 50px */</span></span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* 剩余空间自适应 */</span></span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>上栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>中栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>下栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p><code>.container</code> 是一个具有 Flex 布局的容器，它的 <code>flex-direction</code> 属性被设置为 <code>column</code>，使子元素按垂直方向排列。</p><p><code>.header</code> 和 <code>.footer</code> 类分别表示上栏和下栏，它们都设置了固定的高度（这里为 50px），通过 <code>flex: 0 0 50px</code> 指定不可伸缩、初始大小为 50px。</p><p><code>.content</code> 类表示中栏，它的 <code>flex</code> 属性被设置为 <code>1</code>，表示它会占据剩余的所有空间，从而实现自适应的效果。</p><hr><p>要修改 <code>&lt;el-input&gt;</code> 组件的 placeholder 字体大小，你可以使用 CSS 来覆盖默认样式。下面是一种常用的方法：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vzlcxllopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vzlcxllopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-input class=&quot;input&quot; placeholder=&quot;请输入内容&quot;&gt;&lt;/el-input&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.input&#123;<br>    :deep .el-input__inner &#123;<br>        font-size: 14px; /* 设置占位符字体大小 */<br>    &#125;<br>    :deep .el-input__wrapper &#123;<br>        border-radius: 14px !important; /* 设置输入框圆角边框 */<br>    &#125;<br>&#125; <br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><hr><p>要在 <code>&lt;el-input&gt;</code> 输入框内的右侧放置一个图片，你可以使用输入框的附加内容（<code>append</code>）来实现。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hfllpjlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hfllpjlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-input placeholder=&quot;请输入内容&quot;&gt;<br>    &lt;template #suffix&gt;<br>      &lt;img src=&quot;your-image-url&quot; alt=&quot;图片&quot;&gt;<br>    &lt;/template&gt;<br>  &lt;/el-input&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><hr><p>div里包裹三个p设置div为flex布局，前两个p在一排，第三个p在第二排：如果你想在 <code>&lt;div&gt;</code> 中包裹三个 <code>&lt;p&gt;</code> 元素，并设置前两个 <code>&lt;p&gt;</code> 元素在一行显示，第三个 <code>&lt;p&gt;</code> 元素在第二行，可以通过使用 CSS 的 Flex 布局来实现。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y4ozwelopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y4ozwelopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;p&gt;第一个段落&lt;/p&gt;<br>    &lt;p&gt;第二个段落&lt;/p&gt;<br>    &lt;p&gt;第三个段落&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br>.container &#123;<br>  display: flex;<br>  flex-wrap: wrap;<br>&#125;<br><br>.container p &#123;<br>  width: 50%; /* 每个段落占据容器的一半宽度 */<br>&#125;<br><br>.container p:nth-child(3) &#123;<br>  width: 100%; /* 第三个段落占据整个容器宽度 */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>通过将 <code>.container</code> 类的 <code>display</code> 属性设置为 <code>flex</code>，并设置 <code>flex-wrap</code> 属性为 <code>wrap</code>，可以让容器内的元素自动换行。</p><p>然后，我们给每个 <code>&lt;p&gt;</code> 元素设置了宽度。在示例中，前两个 <code>&lt;p&gt;</code> 元素的宽度被设置为容器宽度的一半（50%），而第三个 <code>&lt;p&gt;</code> 元素的宽度被设置为整个容器的宽度（100%）。</p><p>这样，前两个 <code>&lt;p&gt;</code> 元素会在一行显示，而第三个 <code>&lt;p&gt;</code> 元素会独占一行。</p><hr><p>设置文本折行：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-i3kw1hlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-i3kw1hlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;text-wrapper&quot;&gt;<br>    &#123;&#123; longText &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br>.text-wrapper &#123;<br>  word-wrap: break-word; /* 当单词过长时自动换行 */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>使用了 <code>word-wrap: break-word</code> 样式来实现单词过长时自动换行。</p><hr><p>在父组件内容被撑大出现滚动条时，如何让子组件始终固定在父组件的右下角：父组件div设置<code>position:relative;</code>，子组件div设置<code>position:absolute;bottom:40px;right:0;</code>。</p><hr><p>点击上箭头按钮返回页面顶部：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v7qoxxlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v7qoxxlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>    const scrollToTop=()=&gt;&#123;<br>        if(container.value)&#123;<br>            container.value.scrollTo(&#123;<br>                top: 0,<br>                behavior: &#x27;smooth&#x27;,<br>            &#125;)<br>    &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>    &lt;div ref=&quot;container&quot;&gt;<br>        &lt;ChatTool/&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><hr><p>将元素 <code>a</code> 的滚动位置设置为它的内容的高度：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8q6zqslopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8q6zqslopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">a.<span class="hljs-property">scrollTop</span>=a.<span class="hljs-property">scrollHeight</span><br></code></pre></td></tr></table></div></figure><hr><p>要设置不同el-tree层级的图标不同，你可以通过判断节点的层级来动态地为每个层级设置不同的图标。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-00mlamlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-00mlamlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-tree :data=&quot;treeData&quot;&gt;<br>    &lt;template v-slot=&quot;&#123; node, data &#125;&quot;&gt;<br>      &lt;span class=&quot;tree-node-icon&quot;&gt;<br>        &lt;i :class=&quot;getIconClass(node.level)&quot;&gt;&lt;/i&gt;<br>      &lt;/span&gt;<br>      &lt;span&gt;&#123;&#123; node.label &#125;&#125;&lt;/span&gt;<br>    &lt;/template&gt;<br>  &lt;/el-tree&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const treeData = ref([]);<br><br>const getIconClass = (level: number): string =&gt; &#123;<br>  if (level === 1) &#123;<br>    return &#x27;iconfont icon-level1&#x27;;<br>  &#125; else if (level === 2) &#123;<br>    return &#x27;iconfont icon-level2&#x27;;<br>  &#125; else &#123;<br>    return &#x27;iconfont icon-default&#x27;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>要在树形结构的各个层级之间添加间隙，你可以使用 CSS 的 <code>margin</code> 属性来实现。</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1qce63lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1qce63lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">:deep .el-tree&#123;<br>    <span class="hljs-selector-class">.el-tree-node__children</span>&#123;<br>        <span class="hljs-selector-class">.el-tree-node__content</span>&#123;<br>            <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;<br>        &#125;<br>        .<span class="hljs-selector-class">.el-tree-node__children</span>&#123;<br>            <span class="hljs-attribute">padding-left</span>:<span class="hljs-number">10px</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>要设置每个 <code>el-table-column</code> 的宽度占比，你可以使用 <code>width</code> 属性配合百分比来实现。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6vzucllopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6vzucllopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot;&gt;<br>    &lt;el-table-column<br>      prop=&quot;name&quot;<br>      label=&quot;姓名&quot;<br>      min-width=&quot;20%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;age&quot;<br>      label=&quot;年龄&quot;<br>      min-width=&quot;10%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;gender&quot;<br>      label=&quot;性别&quot;<br>      min-width=&quot;15%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><p>设置el-table滚动：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sn0j21lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sn0j21lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">max-height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>设置el-table-column的字体颜色：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tw3clclopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tw3clclopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-table :data=&quot;tableData&quot;  :header-cell-style=&quot;&#123; color: &#x27;red&#x27; &#125;&quot; :cell-style=&quot;rowCellStyle&quot;&gt;<br>    &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column prop=&quot;age&quot; label=&quot;年龄&quot;&gt;<br>    &lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const tableData = ref([<br>  &#123; name: &#x27;张三&#x27;, age: 20 &#125;,<br>  &#123; name: &#x27;李四&#x27;, age: 25 &#125;<br>]);<br><br>const rowCellStyle = (&#123; row, column &#125;: &#123; row: any, column: any &#125;) =&gt; &#123;<br>  if (column.property === &#x27;name&#x27;) &#123;<br>    return &#123; color: &#x27;green&#x27; &#125;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">父组件向子组件传值</p><p>父组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-96c4jblopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-96c4jblopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>        &lt;Metainfo :parentMessage=&quot;parentMessage&quot;&gt;&lt;/Metainfo&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><p>子组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g7wswelopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g7wswelopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>const props = defineProps(&#123;<br>  parentMessage: &#123;<br>    type: String,<br>    required: true<br>  &#125;<br>&#125;);<br><br>const &#123;parentMessage&#125; = toRefs(props);<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">子组件向父组件传值</p><p>子组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ykdoi2lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ykdoi2lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;sendValueToParent&quot;&gt;点击发送值给父组件&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>const $emit = defineEmits([&#x27;changeValue&#x27;,&#x27;value2&#x27;]);<br><br>const sendValueToParent = () =&gt; &#123;<br>  const value = &#x27;这是子组件传递给父组件的值&#x27;;<br>  $emits(&#x27;changeValue&#x27;, true);<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>父组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ogpgl6lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ogpgl6lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;ChildComponent @changeValue=&quot;changeValue&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const receivedValue = ref(&#x27;&#x27;);<br>const changeValue = (value: string) =&gt; &#123;<br>  receivedValue.value = value;<br>&#125;;<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">【暂时未生效】provide inject传值</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b0fhaglopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b0fhaglopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 模板内容 --&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; provide &#125; from &#x27;vue&#x27;;<br><br>const setup = () =&gt; &#123;<br>  const valueToProvide: string = &#x27;这是要传递的值&#x27;;<br>  provide(&#x27;myValue&#x27;, valueToProvide);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>接收方组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wtfqcjlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wtfqcjlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 模板内容 --&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; inject &#125; from &#x27;vue&#x27;;<br><br>const receivedValue: string = inject(&#x27;myValue&#x27;);<br><br>console.log(receivedValue); // 输出：这是要传递的值<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p>鼠标悬浮到el-table的某行后在该行的第一列显示出加号：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mhgeg5lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mhgeg5lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-table :data=&quot;tableData&quot; @cell-mouse-enter=&quot;cellMouseEnter&quot; @cell-mouse-leave=&quot;cellMouseLeave&quot;&gt;<br>      &lt;!-- 第一列使用作用域插槽自定义内容 --&gt;<br>      &lt;el-table-column label=&quot;加号&quot;&gt;<br>        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;<br>          &lt;span v-if=&quot;row.showAddIcon&quot;&gt;+&lt;/span&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;;<br><br>interface TableRow &#123;<br>  name: string;<br>  age: number;<br>  gender: string;<br>  showAddIcon?: boolean;<br>&#125;<br><br>const tableData: TableRow[] = reactive([<br>  &#123; name: &#x27;张三&#x27;, age: 20, gender: &#x27;男&#x27;, showAddIcon: false &#125;,<br>  &#123; name: &#x27;李四&#x27;, age: 25, gender: &#x27;女&#x27;, showAddIcon: false &#125;,<br>  &#123; name: &#x27;王五&#x27;, age: 30, gender: &#x27;男&#x27;, showAddIcon: false &#125;<br>]);<br>    <br>const cellMouseEnter=(row:number)=&gt;&#123;<br>    row.showAddIcon=true<br>&#125;<br>const cellMouseLeave=(row:number)=&gt;&#123;<br>    row.showAddIcon=false<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p>要在 <code>el-table</code> 的最后一行中插入一个 <code>el-select</code>：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-i2s422lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-i2s422lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-table :data=&quot;tableData&quot;&gt;<br>        &lt;el-table-column label=&quot;表名&quot;&gt;<br>            &lt;template #default=&quot;&#123; row &#125;&quot;&gt;<br>                &lt;template v-if=&quot;row.showAddIcon===true&quot;&gt;<br>                    &lt;el-select v-model=&quot;select&quot; placeholder=&quot;请选择&quot; @change=&quot;(val:any)=&gt;selectChange(val,row)&quot;&gt;<br>                        &lt;el-option v-for=&quot;i in options&quot; :key=&quot;i.value&quot; :label=&quot;i.label&quot; :value=&quot;i.value&quot;&gt;<br>                        &lt;/el-option&gt;<br>                    &lt;/el-select&gt;<br>                &lt;/template&gt;<br>                &lt;template v-else&gt;<br>                    &#123;&#123;row.name&#125;&#125;<br>                &lt;/template&gt;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;el-table-column label=&quot;操作&quot;&gt;<br>            &lt;template #default=&quot;scope&quot;&gt;<br>        &lt;svg-icon iconName=&quot;icon-a-shanchu1&quot; @click=&quot;handleDelete(scope.row,scope.$index)&quot;&gt;&lt;/svg-icon&gt;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>&lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><p>有时需要用到&#96;&#96;v-for&#x3D;&quot;(i,index) in options&quot;&#96;获取元素下标。</p><hr><p>自定义el-button禁用时的click事件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cszwpflopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cszwpflopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-button :disabled=&quot;isDisabled&quot; @click=&quot;handleClick&quot;&gt;Click me&lt;/el-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const isDisabled = ref(true); <br><br>const handleClick = () =&gt; &#123;<br>  if (!isDisabled.value) &#123;<br>    console.log(&#x27;Button clicked!&#x27;);<br>  &#125;<br>&#125;;<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p><code>trim()</code> 是  字符串的内置函数，用于删除字符串的首尾空格：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1j1umtlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1j1umtlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;  Hello, World!  &#x27;</span>;<br><span class="hljs-keyword">const</span> trimmedStr = str.<span class="hljs-title function_">trim</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(trimmedStr); <span class="hljs-comment">// 输出: &quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p>Proxy对象的[[TARGET]]:Array(4)，怎么获取到这个数组：<code>toRaw(tmp)</code></p><hr><p>随机生成id：可以使用 UUID（Universally Unique Identifier）或 GUID（Globally Unique Identifier）。这些是用于生成全局唯一标识符的算法。在  中，可以使用第三方库 <code>uuid</code> 来生成 UUID。</p><p>uuid的Github仓库地址：<a href="https://github.com/uuidjs/uuid">https://github.com/uuidjs/uuid</a></p><p>首先，确保你已经安装了 <code>uuid</code> 库。可以使用 npm 包管理器运行以下命令进行安装：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8t9tuqlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8t9tuqlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install uuid<br></code></pre></td></tr></table></div></figure><p>安装完成后，可以使用以下代码生成一个完全不重复的随机 ID：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wm87d8lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wm87d8lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">v4</span>: uuidv4 &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uuid&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">generateUniqueId</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> uniqueId = <span class="hljs-title function_">uuidv4</span>();<br>  <span class="hljs-keyword">return</span> uniqueId;<br>&#125;<br><br><span class="hljs-keyword">const</span> id = <span class="hljs-title function_">generateUniqueId</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id);<br></code></pre></td></tr></table></div></figure><p>上述代码中，<code>uuid</code> 库的 <code>v4</code> 方法被引入并命名为 <code>uuidv4</code>。<code>generateUniqueId</code> 函数使用 <code>uuidv4</code> 方法来生成一个完全不重复的随机 ID。</p><p>每次调用 <code>generateUniqueId</code> 函数时，都会生成一个全局唯一的 ID。这是由 UUID 算法的特性决定的。</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l16q9flopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l16q9flopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> $router=<span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span>=(<span class="hljs-params">value:string</span>)=&gt;&#123;<br>$router.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;chat&#x27;</span>,<span class="hljs-attr">query</span>:&#123;uuid,<span class="hljs-attr">question</span>:value&#125;&#125;)<br>&#125;<br></code></pre></td></tr></table></div></figure><p>即在url后添加chat?uuid&#x3D;111&amp;question&#x3D;你是谁?</p><hr><p>当你刷新页面时，页面的值消失的原因可能是因为数据没有被正确地保存或恢复。</p><p>在 Web 开发中，浏览器提供了 <code>localStorage</code> 和 <code>sessionStorage</code> 这两个 API 来存储数据。这些 API 允许你在页面之间保持持久的数据存储或会话级别的数据存储。</p><p>如果页面的值在刷新后消失，可能是因为你没有正确地使用这些存储机制。</p><ul><li><code>localStorage</code>：<code>localStorage</code> 是一个持久性存储，数据将在浏览器关闭后仍然保留。你可以使用 <code>localStorage.setItem(key, value)</code> 方法将值存储到 <code>localStorage</code> 中，并使用 <code>localStorage.getItem(key)</code> 方法检索值。</li><li><code>sessionStorage</code>：<code>sessionStorage</code> 是一个会话级别的存储，数据将在会话结束时被清除（当用户关闭标签页或浏览器窗口时）。你可以使用 <code>sessionStorage.setItem(key, value)</code> 方法将值存储到 <code>sessionStorage</code> 中，并使用 <code>sessionStorage.getItem(key)</code> 方法检索值。</li></ul><p>请确保在存储值时使用正确的 API，并在页面加载时从存储中恢复值。例如，在加载页面时，你可以在  中使用以下代码来恢复 <code>localStorage</code> 中的值：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-adzk45lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-adzk45lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> storedValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;myVariable&#x27;</span>);<br><span class="hljs-keyword">if</span> (storedValue) &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这样，即使在刷新页面后，数据仍然可以从 <code>localStorage</code> 中获取并恢复。</p><p><code>JSON.stringify</code>：将JavaScript对象或值转换为JSON字符串。</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8qxr4olopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8qxr4olopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;sqlArray&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(newSqlArray))<br></code></pre></td></tr></table></div></figure><hr><p>使用 <code>watch</code> 函数在每次响应式状态发生变化时触发回调函数：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ex36wflopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ex36wflopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref, watch &#125; from &#x27;vue&#x27;;<br><br>const count = ref(0);<br><br>function increment() &#123;<br>  count.value++;<br>&#125;<br><br>watch(count, (newValue, oldValue) =&gt; &#123;<br>  console.log(&#x27;count 发生变化&#x27;, newValue, oldValue);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>在上述代码中，我们使用了 <code>&lt;script setup&gt;</code> 语法来定义组件的逻辑部分。在 <code>&lt;script setup&gt;</code> 中，我们导入了 <code>ref</code> 和 <code>watch</code> 函数，并使用 <code>ref</code> 创建了一个名为 <code>count</code> 的响应式变量，并初始化为 0。</p><p>我们还定义了一个名为 <code>increment</code> 的方法来增加 <code>count</code> 的值。在模板中，我们可以直接绑定 <code>count</code> 变量和 <code>increment</code> 方法。</p><p>最后，我们使用 <code>watch</code> 函数来观察 <code>count</code> 的变化，并在每次变化时输出日志。</p><p><code>watch</code> 的第一个参数可以是不同形式的“数据源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n2v3vvlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n2v3vvlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> x = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> y = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">/* 单个 ref */</span><br><span class="hljs-title function_">watch</span>(x, <span class="hljs-function">(<span class="hljs-params">newX</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x is <span class="hljs-subst">$&#123;newX&#125;</span>`</span>)<br>&#125;)<br><br><span class="hljs-comment">/* getter 函数 */</span> <br><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> x.<span class="hljs-property">value</span> + y.<span class="hljs-property">value</span>,<br>  <span class="hljs-function">(<span class="hljs-params">sum</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`sum of x + y is: <span class="hljs-subst">$&#123;sum&#125;</span>`</span>)<br>  &#125;<br>)<br><br><span class="hljs-comment">/* 多个来源组成的数组 */</span> <br><span class="hljs-title function_">watch</span>([x, <span class="hljs-function">() =&gt;</span> y.<span class="hljs-property">value</span>], <span class="hljs-function">(<span class="hljs-params">[newX, newY]</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x is <span class="hljs-subst">$&#123;newX&#125;</span> and y is <span class="hljs-subst">$&#123;newY&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>注意，你不能直接侦听响应式对象的属性值，例如：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jac9zrlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jac9zrlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)<br><br><span class="hljs-comment">/* 错误，因为 watch() 得到的参数是一个 number */</span><br><span class="hljs-title function_">watch</span>(obj.<span class="hljs-property">count</span>, <span class="hljs-function">(<span class="hljs-params">count</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`count is: <span class="hljs-subst">$&#123;count&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>这里需要用一个返回该属性的 getter 函数：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2joxh8lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2joxh8lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 提供一个 getter 函数 */</span><br><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> obj.<span class="hljs-property">count</span>,<br>  <span class="hljs-function">(<span class="hljs-params">count</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`count is: <span class="hljs-subst">$&#123;count&#125;</span>`</span>)<br>  &#125;<br>)<br></code></pre></td></tr></table></div></figure><p>直接给 <code>watch()</code> 传入一个响应式对象，会隐式地创建一个<code>深层侦听器</code>——该回调函数在所有嵌套的变更时都会被触发：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sjvlc9lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sjvlc9lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)<br><br><span class="hljs-title function_">watch</span>(obj, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment">     在嵌套的属性变更时触发</span><br><span class="hljs-comment">     注意：`newValue` 此处和 `oldValue` 是相等的</span><br><span class="hljs-comment">     因为它们是同一个对象！</span><br><span class="hljs-comment">  */</span><br>&#125;)<br><br>obj.<span class="hljs-property">count</span>++<br></code></pre></td></tr></table></div></figure><p>相比之下，一个返回响应式对象的 getter 函数，只有在返回不同的对象时，才会触发回调：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-uq448olopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-uq448olopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> state.<span class="hljs-property">someObject</span>,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/* 仅当 state.someObject 被替换时触发 */</span><br>  &#125;<br>)<br></code></pre></td></tr></table></div></figure><p>你也可以给上面这个例子显式地加上 <code>deep</code> 选项，强制转成深层侦听器：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p5ooe6lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p5ooe6lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> state.<span class="hljs-property">someObject</span>,<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">/* 注意：`newValue` 此处和 `oldValue` 是相等的，除非 state.someObject 被整个替换了*/</span><br>  &#125;,<br>  &#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>)<br></code></pre></td></tr></table></div></figure><p class="note note-warning">深度侦听需要遍历被侦听对象中的所有嵌套的属性，当用于大型数据结构时，开销很大。因此请只在必要时才使用它，并且要留意性能。</p><p><mark>即时回调的侦听器</mark>：<code>watch</code> 默认是懒执行的：仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。</p><p>可以通过传入 <code>immediate: true</code> 选项来强制侦听器的回调立即执行：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ps9uuxlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ps9uuxlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(source, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 立即执行，且当 `source` 改变时再次执行 */</span><br>&#125;, &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></div></figure><p>侦听器的回调使用与源完全相同的响应式状态是很常见的。例如下面的代码，在每当 <code>todoId</code> 的引用发生变化时使用侦听器来加载一个远程资源：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a884i7lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a884i7lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> todoId = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)<br><br><span class="hljs-title function_">watch</span>(todoId, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>    <span class="hljs-string">`https://jsonplaceholder.typicode.com/todos/<span class="hljs-subst">$&#123;todoId.value&#125;</span>`</span><br>  )<br>  data.<span class="hljs-property">value</span> = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>&#125;, &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></div></figure><p>特别是注意侦听器是如何两次使用 <code>todoId</code> 的，一次是作为源，另一次是在回调中。</p><p>我们可以用<code>watchEffect</code>函数来简化上面的代码。<code>watchEffect()</code> 允许我们自动跟踪回调的响应式依赖。上面的侦听器可以重写为：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1hrwsolopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1hrwsolopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watchEffect</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>    <span class="hljs-string">`https://jsonplaceholder.typicode.com/todos/<span class="hljs-subst">$&#123;todoId.value&#125;</span>`</span><br>  )<br>  data.<span class="hljs-property">value</span> = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>这个例子中，回调会立即执行，不需要指定 <code>immediate: true</code>。在执行期间，它会自动追踪 <code>todoId.value</code> 作为依赖（和计算属性类似）。每当 <code>todoId.value</code> 变化时，回调会再次执行。有了 <code>watchEffect()</code>，我们不再需要明确传递 <code>todoId</code> 作为源值。</p><p>对于这种只有一个依赖项的例子来说，<code>watchEffect()</code> 的好处相对较小。但是对于有多个依赖项的侦听器来说，使用 <code>watchEffect()</code> 可以消除手动维护依赖列表的负担。此外，如果你需要侦听一个嵌套数据结构中的几个属性，<code>watchEffect()</code> 可能会比深度侦听器更有效，因为它将只跟踪回调中被使用到的属性，而不是递归地跟踪所有的属性。</p><p class="note note-info">watchEffect仅会在其同步执行期间，才追踪依赖。在使用异步回调时，只有在第一个await正常工作前访问到的属性才会被追踪。</p><p><code>watch</code> 和 <code>watchEffect</code> 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：</p><ul><li><code>watch</code>只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。<code>watch</code> 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</li><li><code>watchEffect</code>会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</li></ul><p>当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新<strong>之前</strong>被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的 DOM，你需要指明 <code>flush: &#39;post&#39;</code> 选项：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-19078slopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-19078slopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(source, callback, &#123;<br>  <span class="hljs-attr">flush</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>&#125;)<br><br><span class="hljs-title function_">watchEffect</span>(callback, &#123;<br>  <span class="hljs-attr">flush</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></div></figure><p>后置刷新的 <code>watchEffect()</code> 有个更方便的别名 <code>watchPostEffect()</code>：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rwvh7flopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rwvh7flopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; watchPostEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">watchPostEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 在 Vue 更新后执行 */</span><br>&#125;)<br></code></pre></td></tr></table></div></figure><p><mark>停止侦听器</mark>：在 <code>setup()</code> 或 <code>&lt;script setup&gt;</code> 中用同步语句创建的侦听器，会自动绑定到宿主组件实例上，并且会在宿主组件卸载时自动停止。因此，在大多数情况下，你无需关心怎么停止一个侦听器。</p><p>一个关键点是，侦听器必须用<strong>同步</strong>语句创建：如果用异步回调创建一个侦听器，那么它不会绑定到当前组件上，你必须手动停止它，以防内存泄漏。例如：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-12fvqwlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-12fvqwlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; watchEffect &#125; from &#x27;vue&#x27;<br><br>&lt;!--它会自动停止--&gt;<br>watchEffect(() =&gt; &#123;&#125;)<br><br>&lt;!--这个则不会--&gt;<br>setTimeout(() =&gt; &#123;<br>  watchEffect(() =&gt; &#123;&#125;)<br>&#125;, 100)<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>要手动停止一个侦听器，请调用 <code>watch</code> 或 <code>watchEffect</code> 返回的函数：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g2c8illopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g2c8illopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> unwatch = <span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)<br><br><span class="hljs-comment">/* ...当该侦听器不再需要时 */</span><br><span class="hljs-title function_">unwatch</span>()<br></code></pre></td></tr></table></div></figure><p>注意，需要异步创建侦听器的情况很少，请尽可能选择同步创建。如果需要等待一些异步数据，你可以使用条件式的侦听逻辑：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6bb1bwlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6bb1bwlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 需要异步请求得到的数据 */</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)<br><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (data.<span class="hljs-property">value</span>) &#123;<br>    <span class="hljs-comment">/* 数据加载后执行某些操作... */</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></div></figure><p><code>handler</code>函数也常用于<code>watch</code>和<code>computed</code>等功能中，用于监听数据变化并进行相应的处理。<code>handler</code>函数通常接受两个参数：</p><ul><li>newVal：表示数据发生变化后的新值。</li><li>oldVal：表示数据发生变化前的旧值。</li></ul><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d0w2zrlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d0w2zrlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-string">&#x27;obj.a&#x27;</span>: &#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params">newName, oldName</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj.a changed&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">/* deep: true */</span><br>  &#125;<br>&#125; <br></code></pre></td></tr></table></div></figure><hr><p>使用 <code>v-model</code> 指令来实现 <code>el-dialog</code> 的显示和隐藏。这个指令可以让你双向绑定一个值，并自动更新该值的状态：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1qy9prlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1qy9prlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-button @click=&quot;showDialog = true&quot;&gt;打开对话框&lt;/el-button&gt;<br><br>    &lt;el-dialog v-model=&quot;showDialog&quot; title=&quot;对话框标题&quot;&gt;<br>      &lt;!-- 对话框内容 --&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>export default &#123;<br>  setup() &#123;<br>    const showDialog = ref(false);<br><br>    return &#123;<br>      showDialog,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>在上面的示例中，我们创建了一个名为 <code>showDialog</code> 的响应式变量，并将其初始值设为 <code>false</code> ，表示对话框默认是隐藏的。当点击按钮时，我们将 <code>showDialog</code> 的值设为 <code>true</code> ，对话框将显示出来。</p><p>通过使用 <code>v-model=&quot;showDialog&quot;</code>，我们将 <code>showDialog</code> 的值与 <code>el-dialog</code> 组件的 <code>visible</code> 属性进行了绑定。当 <code>showDialog</code> 的值发生变化时，<code>el-dialog</code> 组件的显示状态也会相应地发生变化。</p><hr><p>数组深拷贝：</p><ol><li>使用 <code>Array.from()</code> 方法进行浅拷贝，再结合 <code>map()</code> 或者 <code>JSON.parse(JSON.stringify())</code> 方法进行深拷贝：</li></ol><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-edrim9lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-edrim9lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝</span><br><span class="hljs-keyword">const</span> shallowCopy = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(originalArray);<br><br><span class="hljs-comment">// 深拷贝方式一：使用 map()</span><br><span class="hljs-keyword">const</span> deepCopy1 = originalArray.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (&#123;...item&#125;));<br><br><span class="hljs-comment">// 深拷贝方式二：使用 JSON.parse(JSON.stringify())</span><br><span class="hljs-keyword">const</span> deepCopy2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(originalArray));<br></code></pre></td></tr></table></div></figure><ol start="2"><li>使用扩展运算符 <code>...</code> 进行深拷贝：</li></ol><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ia8l8vlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ia8l8vlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> deepCopy = [...originalArray];<br></code></pre></td></tr></table></div></figure><p>需要注意的是，上述方法在深拷贝过程中只适用于纯数据（例如字符串、数字、布尔值、对象和数组）。如果数组中的元素是引用类型（如对象），则仅拷贝了引用，而不是创建新的对象。如果需要完全复制对象及其嵌套属性，可以考虑使用第三方库如 <code>lodash.cloneDeep()</code>。</p><p>例如，在 Vue 3 组件中，你可以这样使用 <code>lodash</code> 进行深拷贝：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7izbgqlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7izbgqlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> cloneDeep <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash/cloneDeep&#x27;</span>;<br><br><span class="hljs-keyword">const</span> deepCopy = <span class="hljs-title function_">cloneDeep</span>(originalArray);<br></code></pre></td></tr></table></div></figure><p>请注意，深拷贝数组可能会导致性能问题，特别是对于包含大量数据的数组。在处理大型数据集时，请谨慎使用深拷贝。</p><hr><p>url替换所有的空格：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b2ibi8lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b2ibi8lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;handleDecode(item)&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;textDecoration:&#x27;none&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4j7d8clopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4j7d8clopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDecode</span>=(<span class="hljs-params">item:string</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> decodeUrl=<span class="hljs-string">&#x27;/api/&#x27;</span>+decodeURIComponenr(item)<br>    <span class="hljs-keyword">let</span> replaceUrl=decodeUrl.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/ /g</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> replaceUrl<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>全局引入element plus：</p><figure class="highlight shell"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vm4xcwlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vm4xcwlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i element-plus --save<br></code></pre></td></tr></table></div></figure><p>element plus的分页  &#x2F;page和Go to改为中文：</p><p>main.ts：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l8nj6nlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l8nj6nlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> zhCn <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;elementplus/dist/locale/zh-cn.mjs&#x27;</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>,&#123;<br>    <span class="hljs-attr">locale</span>: zhCn,<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>src文件夹下面新建<code>element-plus.d.ts</code>：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wfrbnrlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wfrbnrlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;element-plus/dist/locale/zh-cn.mjs&#x27;</span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">zhCn</span>: <span class="hljs-built_in">any</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> znCn<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>el-table滚动条到最底部：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pe0klhlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pe0klhlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tableRef&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5m0t6zlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5m0t6zlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">()=&gt;</span>tableRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>,tableRef.<span class="hljs-property">value</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">bodyWrapper</span>.<span class="hljs-property">scrollHeight</span>)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>设置el-button点击多次只触发一次方法：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cpj4qrlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cpj4qrlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-button @click=&quot;handleClick&quot; :disabled=&quot;isButtonDisabled&quot;&gt;按钮&lt;/el-button&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const isButtonDisabled = ref(false);<br><br>const handleClick = () =&gt; &#123;<br>  if (!isButtonDisabled.value) &#123;<br>    isButtonDisabled.value = true;<br>    setTimeout(() =&gt; &#123;<br>      isButtonDisabled.value = false;<br>    &#125;, 1000); <br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p>el-tooltip的内容可滚动：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bj8xtflopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bj8xtflopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-tooltip</span> <span class="hljs-attr">:enterable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:popper-style</span>=<span class="hljs-string">&quot;&#123;width: px2rem(&#x27;400&#x27;)&#125;&quot;</span> <span class="hljs-attr">:popper-options</span>=<span class="hljs-string">&quot;&#123;modifies:&#123;preventOverflow:&#123;boundariesElement:&#x27;window&#x27;&#125;&#125;&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        &#123;&#123;item&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">content</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;maxHeight:px2rem(&#x27;350&#x27;),overflowY: &#x27;scroll&#x27;,lineHeight:px2rem(&#x27;25&#x27;)&#125;&quot;</span>&gt;</span><br>            &#123;&#123;item&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-tooltip</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>使用svg-icon：</p><ol><li><p>在 components 目录下新建 SvgIcon.vue 文件</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6yvhk0lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6yvhk0lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- src/components/SvgIcon.vue --&gt;<br>&lt;template&gt;<br>  &lt;svg :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot;&gt;<br>    &lt;use :xlink:href=&quot;iconClassName&quot; :fill=&quot;color&quot; /&gt;<br>  &lt;/svg&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; computed &#125; from &#x27;vue&#x27;;<br>const props = defineProps(&#123;<br>  iconName: &#123;<br>    type: String,<br>    required: true<br>  &#125;,<br>  className: &#123;<br>    type: String,<br>    default: &#x27;&#x27;<br>  &#125;,<br>  color: &#123;<br>    type: String,<br>    default: &#x27;#409eff&#x27;<br>  &#125;<br>&#125;);<br><br>const iconClassName = computed(()=&gt;&#123;<br>  return `#$&#123;props.iconName&#125;`;<br>&#125;)<br><br>const svgClass = computed(() =&gt; &#123;<br>  if (props.className) &#123;<br>    return `svg-icon $&#123;props.className&#125;`;<br>  &#125;<br>  return &#x27;svg-icon&#x27;;<br>&#125;);<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>.svg-icon &#123;<br>  width: 1em;<br>  height: 1em;<br>  position: relative;<br>  fill: currentColor;<br>  vertical-align: -2px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure></li><li><p>在 main.ts 中全局注册：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gm9l4blopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gm9l4blopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SvgIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/SvgIcon.vue&#x27;</span><br><br>app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;SvgIcon&#x27;</span>, <span class="hljs-title class_">SvgIcon</span>);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></div></figure></li><li><p>引入iconfont图标：在项目 assets 目录下新建svg.js文件，然后将 iconfont 在线地址中提供的代码全部复制过来。【加载较慢】</p><img src="88e768a38fb54e8eb533fb4a875020f8.png" alt="在这里插入图片描述" style="zoom:50%;" /></li><li><p>具体使用：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-35vdwwlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-35vdwwlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">iconName</span>=<span class="hljs-string">&quot;icon-gongzuoleixing&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ol><p>修改svg图标颜色，保存为副本：</p><img src="image-20231023162606697.png" alt="image-20231023162606697" style="zoom:50%;" /><hr><p>去除首尾空行：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zxjhqblopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zxjhqblopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;inputText&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>css样式覆盖：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-e4q4q9lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-e4q4q9lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.tocbot-list</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.95rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* 覆盖前一个样式 */</span><br><span class="hljs-selector-class">.tocbot-list</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.75rem</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><h2 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h2><p>设置<code>&lt;img src=&quot;&quot; class=&quot;align&quot;&gt;</code>的居中方式：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zwh6xhlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zwh6xhlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">//水平靠左<br><span class="hljs-selector-class">.align</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br> <br>//水平靠右<br><span class="hljs-selector-class">.align</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br> <br>//水平居中<br><span class="hljs-selector-class">.align</span> &#123;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>div里的img标签实现水平垂直居中<code>&lt;div&gt;&lt;img src=&quot;&quot;&gt;&lt;/div&gt;</code>：</p><ol><li>将display设置成table-cell，水平居中设置text-align为center，垂直居中设置vertical-align为middle：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pg4erclopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pg4erclopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 150px;<br>        height: 100px;<br>        display: table-cell;<br>        vertical-align: middle;<br>        text-align: center;<br>        border: 1px solid #000;<br>    &#125;<br>    img &#123;<br>        width: 50px;<br>        height: 50px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="2"><li>通过position定位实现。将div设置成相对定位relative，将img设置成绝对定位absolute，left:50%，top:50%,此时图片的左上角位于div的中心，要是图片的中心位于div的中心，就需要将图片向上移动图片高度的一半，并向左移动图片宽度的一半：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xe46hwlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xe46hwlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 150px;<br>        height: 100px;<br>        position: relative;<br>        border: 1px solid #000;<br>    &#125;<br>    img &#123;<br>        width: 50px;<br>        height: 50px;<br>        position: absolute;<br>        top: 50%;<br>        left: 50%;<br>        margin-top: -25px; // 高度的一半<br>        margin-left: -25px; // 宽度的一半<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="3"><li>用于不清楚图片或元素的真实宽高情况：通过position定位来实现。将div设置成相对定位relative，将img设置成绝对定位absolute，left:50%，top:50%，此时图片的左上角位于div的中心，要是图片的中心位于div的中心，就需要将图片向上移动图片高度的一半，并向左移动图片宽度的一半，如果不知道元素的宽高，可以用transform: translate(-50%,-50%)：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g76ga6lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g76ga6lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 150px;<br>        height: 100px;<br>        position: relative;<br>        border: 1px solid #000;<br>    &#125;<br>    img &#123;<br>        width: 50px;<br>        height: 50px;<br>        position: absolute;<br>        top: 50%;<br>        left: 50%;<br>        transform: translate(-50%,-50%);<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="4"><li>弹性布局flex：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rp77wnlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rp77wnlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 150px;<br>        height: 100px;<br>        border: 1px solid #000;<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        margin: 0 auto;<br>    &#125;<br>    img &#123;<br>        width: 50px;<br>        height: 50px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="5"><li>设置父div为table-cell属性：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gufjselopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gufjselopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 200px;<br>        height: 200px;<br>        border: 1px solid #000;<br>        display: table-cell;<br>        text-align: center;<br>        vertical-align: middle;<br>    &#125;<br>    img &#123;<br>        width: 100px;<br>        height: 100px;<br>        display: inline-block;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="6"><li>无固定宽高：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1zvs0qlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1zvs0qlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 200px;<br>        height: 200px;<br>        margin: 0 auto;<br>        text-align: center;<br>        position: relative;<br>        border: 1px solid #000;<br>    &#125;<br>    img &#123;<br>        width: 100px;<br>        height: 100px;<br>        position: absolute;<br>        border: 1px solid #000;<br>        left: 50%;<br>        top: 50%;<br>        -webkit-transform: translate(-50%,-50%);<br>        -moz-transform:translate(-50%,-50%);<br>        -ms-transform: translate(-50%,-50%);<br>        -o-transform: translate(-50%,-50%);<br>        transform: translate(-50%,-50%);<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="7"><li>固定宽高：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2gycpilopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2gycpilopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 200px;<br>        height: 200px;<br>        border: 1px solid #000;<br>        margin: 0 auto;<br>        text-align: center;<br>        position: relative;<br>    &#125;<br>    img &#123;<br>        width: 100px;<br>        height: 100px;<br>        position: absolute;<br>        border: 1px solid #000;<br>        left: 50%;<br>        top: 50%;<br>        margin-top: -50px;<br>        margin-left: -50px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><hr><p>点击按钮复制文字：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ug71p2lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ug71p2lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>text.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">textToCopy</span>;<br><span class="hljs-comment">//检查浏览器是否支持剪贴板 API 并且页面处于安全上下文中</span><br> <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">clipboard</span> &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">isSecureContext</span>) &#123;<br> <span class="hljs-title class_">ElMessage</span>(&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;复制成功&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>    &#125;)<br>     <span class="hljs-keyword">return</span> navigator.<span class="hljs-property">clipboard</span>.<span class="hljs-title function_">writeText</span>(text.<span class="hljs-property">value</span>);<br> &#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">/* 将textarea添加到文档中 */</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(textarea);<br>    <span class="hljs-comment">/* 选中textarea中的文本 */</span> <br>    textarea.<span class="hljs-title function_">select</span>();<br>    <span class="hljs-title class_">ElMessage</span>(&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;复制成功&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(res,rej)=&gt;&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>) ? <span class="hljs-title function_">res</span>(<span class="hljs-string">&#x27;复制成功&#x27;</span>) : <span class="hljs-title function_">rej</span>(<span class="hljs-string">&#x27;复制失败&#x27;</span>)<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(text)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>调用接口，结果返回数据是从缓存中拿到的而非实际接口中——from disk cache：在utils文件夹下的request.ts文件中加入：</p><figure class="highlight typescript"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0tkes1lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0tkes1lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> instance=axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></div></figure><hr><p>获取Promise对象中的PromiseResult中的数据：Promise 简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作的结果。</p><img src="image-20231018144700439.png" alt="image-20231018144700439" style="zoom:50%;" /><ol><li>异步获取Promise对象的值还可以使用Promise对象的then方法，但是then方法是在接口请求对象的里面执行数据处理的操作。</li></ol><figure class="highlight javascript"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ce4jmalopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ce4jmalopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getqueryAIRecommend</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></div></figure><ol start="2"><li>通过 async await 来获取：async 用于申明一个function是异步的；而await则可以认为是 async await的简写形式，是等待一个异步方法执行完成的。</li></ol><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2t6djylopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2t6djylopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">getShelfList</span>(<span class="hljs-params">id</span>) &#123;<br>  letlist = [];<br>  list = <span class="hljs-keyword">await</span> <span class="hljs-title function_">infoStore</span>(id)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>async&#x2F;awiat的使用规则：</p><ol><li>async和await要一起用；</li><li>async 表示这是一个async函数， await只能用在async函数里面，不能单独使用；</li><li>async 返回的是一个Promise对象，await就是等待这个promise的返回结果后，再继续执行；</li><li>await 等待的是一个Promise对象，后面必须跟一个Promise对象，但是不必写then()，直接就可以得到返回值。</li></ol><hr><p>单行省略：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-o4c6nelopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-o4c6nelopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ellipsis</span> &#123;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>多行省略：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0xuy8qlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0xuy8qlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ellipsis</span> &#123;<br>  <span class="hljs-attribute">display</span>: -webkit-box;<br>  -webkit-line-clamp: <span class="hljs-number">2</span>;<br>  -webkit-box-orient: vertical;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>-webkit-line-clamp</code> CSS 属性可以把块容器中的内容限制为指定的行数。它只有在 display 属性设置成 -webkit-box 或者 -webkit-inline-box 并且 box-orient 属性设置成 vertical时才有效果。在大部分情况下，也需要设置 overflow 属性为 hidden，否则，里面的内容不会被裁减，并且在内容显示为指定行数后还会显示省略号。</p><hr><p>tab标签页：要让 <code>label</code> 的值为 &quot;制度1&quot;、&quot;制度2&quot; 等，你可以在模板中使用插值表达式和字符串拼接的方式。</p><ol><li><p>方法一：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zc22gxlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zc22gxlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-tab-pane</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, xindex) in tmp&quot;</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;&#x27;制度&#x27; + (xindex + 1)&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 其他内容 --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">el-tab-pane</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>在这里，<code>(xindex + 1)</code> 表示索引 <code>xindex</code> 的值加 1，然后将其与字符串 &quot;制度&quot; 进行拼接，得到最终的 <code>label</code> 值。</p><p class="note note-success" style="border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;">不加括号：制度01 制度11 制度21</p></li><li><p>方法二：插槽</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wljaeslopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wljaeslopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-tab-pane</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, xindex) in tmp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">label</span>&gt;</span>制度&#123;&#123;xindex + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其他内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-tab-pane</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ol><p>elementplus修改el-tab-pane的label字体大小：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tqw2ihlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tqw2ihlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">:deep .el-tabs__item&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>Vue应用中代码高亮：官网<a href="https://highlightjs.org/">https://highlightjs.org/</a></p><p>Github仓库<a href="https://github.com/highlightjs/highlight.js">https://github.com/highlightjs/highlight.js</a></p><p><a href="https://github.com/highlightjs/vue-plugin">https://github.com/highlightjs/vue-plugin</a></p><p>文档教程<a href="https://highlightjs.readthedocs.io/en/latest/">https://highlightjs.readthedocs.io/en/latest/</a></p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-c15b0qlopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-c15b0qlopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install highlight.js<br>npm install --save @highlightjs/vue-plugin<br></code></pre></td></tr></table></div></figure><p>main.ts：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ev7uqblopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ev7uqblopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;highlight.js/styles/github-dark-dimmed.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;highlight.js/lib/common&#x27;</span>;<br><span class="hljs-keyword">import</span> hljsVuePlugin <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@highlightjs/vue-plugin&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(router)<br>app.<span class="hljs-title function_">use</span>(hljsVuePlugin)<br></code></pre></td></tr></table></div></figure><img src="image-20231027140707342.png" alt="image-20231027140707342" style="zoom:50%;" /><p>home.vue：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tt1vp4lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tt1vp4lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; px2rem &#125; from &#x27;@/utils/index&#x27;<br>const code = `<br>CREATE TABLE &quot;topic&quot; (<br>    &quot;id&quot; integer NOT NULL PRIMARY KEY,<br>    &quot;forum_id&quot; integer NOT NULL,<br>    &quot;subject&quot; varchar(255) NOT NULL<br>);<br>ALTER TABLE &quot;topic&quot;<br>ADD CONSTRAINT forum_id FOREIGN KEY (&quot;forum_id&quot;)<br>REFERENCES &quot;forum&quot; (&quot;id&quot;);<br><br>-- Initials<br>insert into &quot;topic&quot; (&quot;forum_id&quot;, &quot;subject&quot;)<br>values (2, &#x27;D&#x27;&#x27;artagnian&#x27;);<br>`<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;p class=&quot;input&quot; :style=&quot;&#123; fontSize: px2rem(&#x27;20px&#x27;) &#125;&quot;&gt;你好&lt;/p&gt;<br>  &lt;highlightjs autodetect :code=&quot;code&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><img src="image-20231027141156678.png" alt="image-20231027141156678" style="zoom:50%;" /><p>实现效果：</p><img src="image-20231027142222797.png" alt="image-20231027142222797" style="zoom:40%;" /><hr><p>web富文本编辑器：<a href="https://www.wangeditor.com/v5">https://www.wangeditor.com/v5</a></p><p class="note note-danger" style="border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;">无法找到模块c@wangeditor,/editor-for-vue”的声明文件。“d:/桌面/vite-project/node modules/@wangeditor/editor-for-vue/dist/index.esm.js'隐式拥有"any"类型。There are types at'd:/桌面/vite-project/node_modules/@wangeditor/editor-for-vue/dist/src/index.d.ts',butthis result could not be resolved when respecting package.json "exports".The '@wangeditor/editor-for-vue'library may need to update itspackage.json or typings.ts(7016)</p><img src="image-20231027150932023.png" alt="image-20231027150932023" style="zoom:50%;" /><p>解决方法：新建typings.d.ts文件</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-75f7selopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-75f7selopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;@wangeditor/editor-for-vue&#x27;</span><br></code></pre></td></tr></table></div></figure><img src="image-20231027154725474.png" alt="image-20231027154725474" style="zoom:50%;" /><hr><p>多类选择器：<code>CSS</code>中类选择器用点号表示。实际项目中一个<code>div</code>元素为了能被多个样式表匹配到（样式复用），通常<code>div</code>的<code>class</code>中由好几段组成，如<code>&lt;div class=&quot;user login&quot;&gt;</code>能被<code>.user</code>和<code>.login</code>两个选择器选中。如果这两个选择器中有相同的属性值，则该属性值先被改为<code>.user</code>中的值，再被改为<code>.login</code>中的值，即重复的属性以最后一个选择器中的属性值为准。测试如下：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2ub7cclopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2ub7cclopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> </span><br><span class="language-css"><span class="hljs-selector-class">.user</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.login</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:blue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;user&#x27;</span>&gt;</span>你好。这是一个 DIV 元素，class=&#x27;user&#x27;。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;login&#x27;</span>&gt;</span>你好。这是一个 DIV 元素，class=&#x27;login&#x27;。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;user login&#x27;</span>&gt;</span>你好。这是一个 DIV 元素，class=&#x27;user login&#x27;。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>第三个<code>div</code>元素的背景颜色以<code>.login</code>中的为准，效果如下图：<img src="20190913225636255.png" alt="在这里插入图片描述" style="zoom:50%;" /></p><p><code>CSS</code>中多个类选择器之间有没有空格是怎样的匹配规则？<code>.user.login</code>和<code>.user .login</code>（中间有空格）的区别？</p><p>电商项目中的导航栏，包括用户的登录&#x2F;注册&#x2F;注销，以及购物车等信息。</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-olr2u2lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-olr2u2lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user not-login&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link js-login&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link js-register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user login&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link-text&quot;</span>&gt;</span><br>                    欢迎，<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span>&gt;</span>退出<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 右侧的导航链接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./cart.html&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-shopping-cart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    购物车(<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cart-cont&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./order-list.html&quot;</span>&gt;</span>我的订单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./user-center.html&quot;</span>&gt;</span>我的MMall<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./about.html&quot;</span>&gt;</span>关于MMall<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vwkq6alopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vwkq6alopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav</span>&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><br><span class="hljs-comment">/* 用户部分 */</span><br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.user</span>&#123;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.login</span>&#123;<br>    <span class="hljs-attribute">display</span>: none;<br>&#125;<br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.user</span> <span class="hljs-selector-class">.link</span>&#123;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 导航链接部分 */</span><br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.nav-list</span>&#123;<br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.nav-list</span> <span class="hljs-selector-class">.nav-item</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>观察上面代码的运行结果可知：</p><ul><li><code>.nav .user</code>（中间有空格）匹配到<code>class</code>含有<code>nav</code>的元素下面的<code>class</code>含有<code>user</code>的元素，是<code>&lt;span class=&quot;user not-login&quot;&gt;</code>和<code>&lt;span class=&quot;user login&quot;&gt;</code>。</li><li><code>.user.login</code>（中间没有空格）匹配到<code>class</code>同时含有<code>user</code>和<code>login</code>的元素，是<code>&lt;span class=&quot;user login&quot;&gt;</code>。</li><li><code>.nav .user.login</code>（<code>.nav</code>和<code>.user</code>中间有空格，<code>.user</code>和<code>.login</code>中间没有空格）匹配到<code>class</code>含有<code>nav</code>的元素下面的<code>class</code>同时含有<code>user</code>和<code>login</code>的元素，是<code>&lt;span class=&quot;user login&quot;&gt;</code>。</li></ul><hr><p><code>white-space</code> 是 CSS 的一个属性，用于控制元素内空格、换行符和连续空格的处理方式。</p><p>该属性有以下几个取值：</p><ul><li><code>normal</code>：合并连续空格和换行符，忽略换行符前后的空格。</li><li><code>nowrap</code>：合并连续空格和换行符，但不允许文本换行。</li><li><code>pre</code>：保留连续空格和换行符，但不允许文本换行。</li><li><code>pre-wrap</code>：保留连续空格和换行符，允许文本换行。</li><li><code>pre-line</code>：合并连续空格和换行符，允许文本换行。</li></ul><p>例如，如果将 <code>white-space</code> 属性设置为 <code>pre</code>，那么在 HTML 中出现的所有空格和换行符都会被保留，而不会被浏览器忽略或合并。这在需要保留代码格式或排版的情况下非常有用。</p><p>另外，<code>white-space</code> 属性还可以与 <code>text-overflow</code> 属性一起使用，来控制文本溢出的处理方式。例如，将 <code>white-space</code> 设置为 <code>nowrap</code>，并将 <code>text-overflow</code> 设置为 <code>ellipsis</code>，可以在文本过长时自动截断并显示省略号。</p><hr><p>要在 flex 容器中的两行之间添加间距，你可以使用 <code>gap</code> 属性。这个属性定义了 flex 容器内各个项目之间的间距，包括行与行之间的间距。</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4wlam5lopkqy8p" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4wlam5lopkqy8p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置行与行之间的间距为 10px */</span><br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>Vue3</tag>
      
      <tag>CSS</tag>
      
      <tag>HTML</tag>
      
      <tag>ElementPlus</tag>
      
      <tag>Vite</tag>
      
      <tag>pinia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二.搭建博客</title>
    <link href="/2023/08/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/08/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-参考教程"><a href="#1-参考教程" class="headerlink" title="1.参考教程"></a>1.参考教程</h1><p><code>https://blog.senqiweb.cn/2022/08/26/kv1ltl/#设置公钥和私钥</code></p><p>hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>hexo主题之fluid：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>hexo fluid文档：<a href="https://hexo.fluid-dev.com/docs/guide">https://hexo.fluid-dev.com/docs/guide</a></p><ul><li>创建文件：hexo new 搭建博客</li><li>生成静态文件：hexo g</li><li>预览博客：hexo s</li><li>部署网站：hexo d</li></ul><p><mark>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</mark></p><h1 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h1><p class="note note-success" style="border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;">遇到想要修改的样式第一步是打开控制台！！！</p><p>图片显示问题：<a href="https://zhuanlan.zhihu.com/p/265077468">https://zhuanlan.zhihu.com/p/265077468</a></p><img src="image-20230827182307675.png" alt="image-20230827182307675" style="zoom:30%;" /><p>设置图片根目录：</p><img src="image-20230825134728552.png" style="zoom:50%;" /><p>必须是以下格式：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8rlg5nlopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8rlg5nlopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image-20230918163131185.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;image-20230918163131185&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></div></figure><p>typora自带格式不生效：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7tk593lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7tk593lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">![image-20230918170715840](/image-20230918170715840.png)<br></code></pre></td></tr></table></div></figure><hr><p>添加樱花效果：<code>https://cnhuazhu.gitee.io/2021/02/19/Hexo魔改/Hexo添加樱花动态效果背景/</code></p><p>添加到主题下的layout文件夹：</p><img src="image-20230825111055130.png" style="zoom:50%;" /><p>git clone到本地的代码：</p><ol><li>删除node_modules</li><li>npm install</li><li>重新下载fluid主题文件夹  复制到themes\fluid目录下</li></ol><hr><p><mark>.deploy_git</mark>是git部署用的文件。当你为 git 部署选项运行hexo d命令时，Hexo 会创建一个名为.deploy_git的文件夹，并将生成的文件复制到该文件夹。</p><img src="image-20230827181423475.png" alt="image-20230827181423475" style="zoom:40%;" /><ol><li>删除.deploy_git文件夹</li><li>输入<mark>git config --global core.autocrlf false</mark></li><li>依次执行：hexo clean    hexo g    hexo d</li></ol><hr><p>新建.gitignore：过滤node_modules和dist文件夹</p><img src="image-20230827184313722.png" alt="image-20230827184313722" style="zoom:40%;" /><hr><p>hexo中高亮不显示：<code>==我高亮了==</code>→使用<code>&lt;mark&gt;我高亮了&lt;/mark&gt;</code></p><p>英文高亮统一用&#96;&#96;，中文高亮统一用mark。</p><hr><p>github贡献图：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zc04b9lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zc04b9lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ghchart.rshah.org/409ba5/lan720&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%&quot;</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20230918163131185.png" alt="image-20230918163131185" style="zoom:50%;" /><img src="image-20230919160147542.png" alt="image-20230919160147542" style="zoom:50%;" /><p>或者</p><figure class="highlight yml"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xcci0alopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xcci0alopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">githubcalendar:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">enable_page:</span> <span class="hljs-string">/archives/</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">lan720</span><br>  <span class="hljs-attr">layout:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">class</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">container</span><br>    <span class="hljs-attr">index:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">githubcalendar_html:</span> <span class="hljs-string">&#x27;&lt;div id=&quot;github-calendar&quot; style=&quot;width:100%;height:auto;padding:10px;margin-bottom:20px&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br>  <span class="hljs-attr">pc_minheight:</span> <span class="hljs-string">200px</span><br>  <span class="hljs-attr">mobile_minheight:</span> <span class="hljs-string">0px</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot;</span><br>  <span class="hljs-attr">api:</span> <span class="hljs-string">https://python-github-calendar-api.vercel.app/api</span><br>  <span class="hljs-comment"># api: https://gitcalendar.zfe.space/api</span><br>  <span class="hljs-comment"># api: https://python-gitee-calendar-api.vercel.app/api</span><br>  <span class="hljs-attr">calendar_js:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span><br>  <span class="hljs-attr">plus_style:</span> <span class="hljs-string">&quot;#github_container &gt; .position-relative &gt; .border&#123;border:0!important&#125;#github-calendar&#123;position: relative;margin-top: -2rem;background-color: var(--board-bg-color);transition: background-color 0.2s ease-in-out;border-radius: 0.5rem;z-index: 3;-webkit-box-shadow: 0 12px 15px 0 rgb(0 0 0 / 24%), 0 17px 50px 0 rgb(0 0 0 / 19%);box-shadow: 0 12px 15px 0 rgb(0 0 0 / 24%), 0 17px 50px 0 rgb(0 0 0 / 19%);&#125;&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">添加新样式</p><p>修改鼠标样式和文字选中样式，在themes&#x2F;fluid&#x2F;source&#x2F;css&#x2F;my&#x2F;mouse.styl中添加。</p><p class="note note-success" style="border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;">不是public/css/my文件夹！直接修改main.css文件无效！</p><img src="image-20230921162312844.png" alt="image-20230921162312844" style="zoom:50%;" /><p>在main.styl中引入，不是main：</p><img src="image-20230921162342641.png" alt="image-20230921162342641" style="zoom:50%;" /><hr><p>插入便签：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ia0vkklopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ia0vkklopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20230925140109254.png" alt="image-20230925140109254" style="zoom:40%;" /><p>由于Typora仅支持普通的html标签，不支持class、id、data-*等自定义属性，所以修改主题文件夹不生效，只能添加行内样式：</p><ol><li><p>primary：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ofplg6lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ofplg6lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #6f42c1;padding: 10px 15px;color: #777;background-color: #f5f0fa;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>secondary：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zaemr9lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zaemr9lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-secondary&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #777777;padding: 10px 15px;color: #777;background-color: #f7f7f7;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>success：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-o86f31lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-o86f31lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-success&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>danger：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-enedkalopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-enedkalopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>warning：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-avhejslopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-avhejslopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-warning&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>info：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-u8anl0lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-u8anl0lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-info&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #428bca;padding: 10px 15px;color: #777;background-color: rgb(238, 247, 250);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ol><p>插入标签：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xt0jfglopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xt0jfglopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20230926175453969.png" alt="image-20230926175453969" style="zoom:60%;" /><hr><p>解决浏览器端的语法高亮库highlight.js不支持vue代码高亮：</p><p><a href="https://github.com/highlightjs/highlightjs-vue/">https://github.com/highlightjs/highlightjs-vue/</a></p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-z8xs7rlopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-z8xs7rlopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/highlightjs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/highlightjs-vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  hljs.<span class="hljs-title function_">registerLanguage</span>(<span class="hljs-string">&quot;vue&quot;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">hljsDefineVue</span>);</span><br><span class="language-javascript">  hljs.<span class="hljs-title function_">initHighlightingOnLoad</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20230926175206543.png" alt="image-20230926175206543" style="zoom:50%;" /><p>不能单独使用<code>&lt;script&gt;&lt;/script&gt;</code>，在<code>&lt;script&gt;&lt;/script&gt;</code>前面一定要先加<code>&lt;template&gt;&lt;/template&gt;</code>才能生效！</p><hr><p>必须使用<code>&lt;br/&gt;</code>才能换行：</p><img src="image-20231010144758522.png" alt="image-20231010144758522" style="zoom:50%;" /><hr><p>修改目录样式：</p><img src="image-20231013101526690.png" alt="image-20231013101526690" style="zoom:50%;" /><hr><p>hexo中使用iconfont图标：</p><ol><li><p>生成阿里在线链接：</p><img src="image-20231013162830707.png" alt="image-20231013162830707" style="zoom:50%;" /></li><li><p>修改custom_css：</p><img src="image-20231013162936840.png" alt="image-20231013162936840" style="zoom:50%;" /><p class="note note-success" style="border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;">在_config.fluid.yml主题文件夹下修改，不是_config.yml文件夹，否则样式不生效或者样式被覆盖！</p></li><li><p>使用iconfont图标：</p><img src="image-20231013163014621.png" alt="image-20231013163014621" style="zoom:50%;" /><p>使用彩色iconfont图标：勾选彩色</p><img src="image-20231024145633308.png" alt="image-20231024145633308" style="zoom:50%;" /></li></ol><hr><p>代码块折叠：</p><img src="image-20231012145306284.png" alt="image-20231012145306284" style="zoom:50%;" /><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-uwkgfolopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-uwkgfolopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUuid</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>) + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>);<br>&#125;<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<br>  <span class="hljs-string">&quot;after_post_render&quot;</span>,<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; line_number, lib &#125; = hexo.<span class="hljs-property">theme</span>.<span class="hljs-property">config</span>.<span class="hljs-property">code</span>.<span class="hljs-property">highlight</span>;<br><br>    <span class="hljs-keyword">let</span> reg;<br>    <span class="hljs-keyword">if</span> (lib === <span class="hljs-string">&quot;highlightjs&quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (line_number) &#123;<br>        reg = <span class="hljs-regexp">/(&lt;figure class=&quot;highlight.+?&gt;)(.+?hljs (.*?)&quot;.+?)(&lt;\/figure&gt;)/gim</span>s;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reg = <span class="hljs-regexp">/(&lt;div class=&quot;code-wrapper.+?&gt;)(.+?hljs (.*?)&quot;.+?)(&lt;\/div&gt;)/gim</span>s;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lib === <span class="hljs-string">&quot;prismjs&quot;</span>) &#123;<br>      reg = <span class="hljs-regexp">/(&lt;div class=&quot;code-wrapper.+?&gt;)(.+?data-language=&quot;(.*?)&quot;.+?)(&lt;\/div&gt;)/gim</span>s;<br>    &#125;<br><br>    data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(reg, <span class="hljs-function">(<span class="hljs-params">match, begin, inner, lang, end, offset, string</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> collapseId = <span class="hljs-string">`collapse-<span class="hljs-subst">$&#123;getUuid()&#125;</span>`</span>;<br>      <span class="hljs-keyword">const</span> collapseBtn = <span class="hljs-string">`&lt;i class=&quot;iconfont icon-github-fill&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#<span class="hljs-subst">$&#123;collapseId&#125;</span>&quot;&gt;&lt;/i&gt;`</span>;<br>      <span class="hljs-keyword">const</span> collapseDiv = <span class="hljs-string">`&lt;div class=&quot;collapse show&quot; id=&quot;<span class="hljs-subst">$&#123;collapseId&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;inner&#125;</span>&lt;/div&gt;`</span>;<br>      <span class="hljs-keyword">const</span> langSpan = <span class="hljs-string">`&lt;span&gt;<span class="hljs-subst">$&#123;lang&#125;</span>&lt;/span&gt;`</span>;<br>      <span class="hljs-keyword">return</span> begin + collapseBtn + langSpan + collapseDiv + end;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;,<br>  <span class="hljs-number">10000</span><br>);<br></code></pre></td></tr></table></div></figure><img src="image-20231012145352943.png" alt="image-20231012145352943" style="zoom:50%;" /><figure class="highlight stylus"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-61gwovlopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-61gwovlopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">230</span>, <span class="hljs-number">235</span>, <span class="hljs-number">241</span>);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.5rem</span>;<br><br>    <span class="hljs-selector-tag">table</span> &#123;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.5rem</span> <span class="hljs-number">0.5rem</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.fas</span><span class="hljs-selector-class">.fa-angle-down</span> &#123;<br>        <span class="hljs-attribute">transform</span>: none;<br>        <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.2s</span> ease-in-out;<br><br>        &amp;<span class="hljs-selector-class">.collapsed</span> &#123;<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">90deg</span>);<br>        &#125;<br>    &#125;<br><br>    &gt; <span class="hljs-selector-tag">i</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2rem</span>;<br>    &#125;<br><br>    &gt; <span class="hljs-selector-tag">span</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">font-weight</span>: bold;<br>    &#125;<br><br>    <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>        <span class="hljs-attribute">position</span>: sticky;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>修改本文最后更新于的时间的显示格式：</p><figure class="highlight avrasm"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ucmy63lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ucmy63lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">date_format:</span> <span class="hljs-string">&quot;LL HH:mm&quot;</span><br></code></pre></td></tr></table></div></figure><img src="image-20231013101210574.png" alt="image-20231013101210574" style="zoom:50%;" /><hr><p>添加和风天气组件：<a href="https://widget.qweather.com/">https://widget.qweather.com/</a></p><img src="image-20231016161018794.png" alt="image-20231016161018794" style="zoom:50%;" /><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q6uvgglopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q6uvgglopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;weather-plugin&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;he-plugin-simple&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable constant_">WIDGET</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&quot;CONFIG&quot;</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-string">&quot;modules&quot;</span>: <span class="hljs-string">&quot;012&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;background&quot;</span>: <span class="hljs-string">&quot;5&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;tmpColor&quot;</span>: <span class="hljs-string">&quot;FFFFFF&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;tmpSize&quot;</span>: <span class="hljs-string">&quot;16&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;cityColor&quot;</span>: <span class="hljs-string">&quot;FFFFFF&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;citySize&quot;</span>: <span class="hljs-string">&quot;16&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;aqiColor&quot;</span>: <span class="hljs-string">&quot;FFFFFF&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;aqiSize&quot;</span>: <span class="hljs-string">&quot;16&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;weatherIconSize&quot;</span>: <span class="hljs-string">&quot;24&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;alertIconSize&quot;</span>: <span class="hljs-string">&quot;18&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">// &quot;padding&quot;: &quot;10px 10px 10px 10px&quot;,</span></span><br><span class="language-javascript">            <span class="hljs-string">&quot;shadow&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;language&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;borderRadius&quot;</span>: <span class="hljs-string">&quot;5&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;fixed&quot;</span>: <span class="hljs-string">&quot;false&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;vertical&quot;</span>: <span class="hljs-string">&quot;top&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;horizontal&quot;</span>: <span class="hljs-string">&quot;left&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;9cf07a14c8a74c4198ee7f49b868e0c8&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20231016160942811.png" alt="image-20231016160942811" style="zoom:50%;" /><img src="image-20231016160722999.png" alt="image-20231016160722999" style="zoom:50%;" /><hr><p>添加打赏功能：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-o6jz9plopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-o6jz9plopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 添加打赏模块 --&gt;<br>&lt;div class=&quot;reward-container&quot;&gt;<br>    &lt;% if (theme.donate.enable) &#123; %&gt;<br>    &lt;button id=&quot;rewardBtn&quot; class=&quot;reward-btn&quot;&gt;<br>        &lt;% if (config.language==&#x27;zh-CN&#x27; ) &#123; %&gt;<br>        ❤ 打赏<br>        &lt;% &#125; else &#123; %&gt;<br>        Donate<br>        &lt;% &#125; %&gt;<br>    &lt;/button&gt;<br>    &lt;p class=&quot;tea&quot;&gt;“&lt;%= theme.donate.message %&gt;”&lt;/p&gt;<br>    &lt;div id=&quot;rewardImgContainer&quot; class=&quot;reward-img-container&quot;&gt;<br>        &lt;div class=&quot;singleImgContainer&quot;&gt;<br>            &lt;img id=&quot;wechatImg&quot; class=&quot;reward-img&quot; src=&quot;&lt;%= theme.donate.wechatpay %&gt;&quot; alt=&quot;微信二维码&quot;&gt;<br>            &lt;p class=&quot;wechatPay&quot;&gt;微信支付&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;singleImgContainer&quot;&gt;<br>            &lt;img id=&quot;alipayImg&quot; class=&quot;reward-img&quot; src=&quot;&lt;%= theme.donate.alipay %&gt;&quot; alt=&quot;支付宝二维码&quot;&gt;<br>            &lt;p class=&quot;aliPay&quot;&gt;支付宝支付&lt;/p&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;% &#125; %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></div></figure><img src="image-20231017105504390.png" alt="image-20231017105504390" style="zoom:50%;" /><p>添加主题配置：</p><figure class="highlight yaml"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n7lhculopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n7lhculopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Donate 自己为 Fluid 主题增加的打赏功能</span><br><span class="hljs-comment"># `message` 是打赏提示语，可自定义</span><br><span class="hljs-comment"># `alipay` 是支付宝付款码， `wechatpay` 是微信付款码。</span><br><span class="hljs-attr">donate:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">觉得不错的话，给个打赏吧</span> <span class="hljs-string">୧(๑•̀⌄•́๑)૭</span> <br>  <span class="hljs-attr">alipay:</span> <span class="hljs-string">/image/alipay.png</span><br>  <span class="hljs-attr">wechatpay:</span> <span class="hljs-string">/image/wechatpay.png</span><br></code></pre></td></tr></table></div></figure><img src="image-20231017105639727.png" alt="image-20231017105639727" style="zoom:50%;" /><p>图片添加在img文件夹下：</p><img src="image-20231017111859101.png" alt="image-20231017111859101" style="zoom:50%;" /><p>添加css样式：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mr12qilopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mr12qilopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.reward-container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: column;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br><br>    <span class="hljs-selector-class">.tea</span>&#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8125em</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.reward-btn</span>&#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">24px</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>        <span class="hljs-attribute">background-color</span>: lavender;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#e3a850</span>;<br>        <span class="hljs-attribute">border</span>: none;<br>        <span class="hljs-attribute">cursor</span>: pointer;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.reward-img-container</span>&#123;<br>        <span class="hljs-attribute">display</span>: none;<br>        <span class="hljs-comment">/* 图片容器的透明度 */</span><br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">/* 过渡效果,使动画更平滑 */</span><br>        <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">2s</span> ease;<br>    &#125;<br><br>    <span class="hljs-selector-class">.reward-img</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 单个图片的容器 */</span><br>    <span class="hljs-selector-class">.singleImgContainer</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 微信支付和支付宝支付的文字样式 */</span><br>    <span class="hljs-selector-class">.wechatPay</span>,<span class="hljs-selector-class">.aliPay</span>&#123;<br>        <span class="hljs-attribute">text-align</span>: center;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8125em</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>        <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">0px</span>;<br>        <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">0px</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231026104933191.png" alt="image-20231026104933191" style="zoom:50%;" /><p>main.styl中引入css文件：</p><img src="image-20231017110023550.png" alt="image-20231017110023550" style="zoom:50%;" /><p>添加js文件：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gissxalopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gissxalopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> rewardBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;rewardBtn&#x27;</span>);<br><span class="hljs-keyword">const</span> rewardImgContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;rewardImgContainer&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(rewardBtn)&#123;<br>rewardBtn.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = (rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> === <span class="hljs-string">&#x27;none&#x27;</span> || rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> === <span class="hljs-string">&#x27;&#x27;</span>) ? <span class="hljs-string">&#x27;inline-flex&#x27;</span> : <span class="hljs-string">&#x27;none&#x27;</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> = (rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> === <span class="hljs-string">&#x27;0&#x27;</span> || rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> === <span class="hljs-string">&#x27;&#x27;</span>) ? <span class="hljs-string">&#x27;1&#x27;</span> : <span class="hljs-string">&#x27;0&#x27;</span><br>&#125;, <span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231017105921936.png" alt="image-20231017105921936" style="zoom:50%;" /><p>引入js文件：</p><img src="image-20231017105843646.png" alt="image-20231017105843646" style="zoom:50%;" /><hr><p>媒体查询：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wa7loblopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wa7loblopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">100vh</span>)<br>#board &#123;<br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">1rem</span> <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">83%</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231019110918493.png" alt="image-20231019110918493" style="zoom:50%;" /><hr><p>解决移动端字体不生效问题：</p><p class="note note-success" style="border-left: 4px solid #428bca;padding: 10px 15px;color: #777;background-color: #eef7fa;">中文字体可以在http://www.reeji.com/上查找</p><ol><li>下载ttf文件：</li></ol><img src="image-20231020101213689.png" alt="image-20231020101213689" style="zoom:50%;" /><ol start="2"><li>使用<code>@font-face</code>：允许网页开发者为其网页指定在线字体；字体能从远程服务器或者用户本地安装的字体加载。如果提供了 local() 函数，从用户本地查找指定的字体名称，并且找到了一个匹配项，本地字体就会被使用。否则，字体就会使用 url() 函数下载的资源。在同时使用 url() 和 local() 功能时，为了用户已经安装的字体副本在需要使用时被使用，如果在用户本地没有找到字体副本就会去使用户下载的副本查找字体。@font-face 规则不仅仅使用在 CSS 的顶层，还可以用在任何 CSS 条件组规则中。</li></ol><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s6vny3lopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s6vny3lopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;KaiTi&#x27;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./mycustom/ttf/KaiTi.ttf&#x27;</span>); <br>&#125;<br><br><span class="hljs-keyword">@font-face</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Times New Roman&#x27;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./mycustom/ttf/Times New Roman.ttf&#x27;</span>); <br>&#125;<br><br><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Times New Roman&#x27;</span>,KaiTi <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.markdown-body</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Times New Roman&#x27;</span>,KaiTi <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231020111623065.png" alt="image-20231020111623065" style="zoom:50%;" /><p>不能在一个 CSS 选择器中定义<code>@font-face</code>。例如，这样写是无效的：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-44mpanlopkqy8n" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-44mpanlopkqy8n"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.className</span> &#123;<br>  <span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: MyHelvetica;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&quot;Helvetica Neue Bold&quot;</span>), <span class="hljs-built_in">local</span>(<span class="hljs-string">&quot;HelveticaNeue-Bold&quot;</span>),<br>      <span class="hljs-built_in">url</span>(<span class="hljs-string">MgOpenModernaBold.ttf</span>);<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>  &#125;<br></code></pre></td></tr></table></div></figure><ol start="3"><li>在main.styl中引用：</li></ol><img src="image-20231020102237376.png" alt="image-20231020102237376" style="zoom:50%;" /><p>效果：</p><img src="image-20231020103554840.png" alt="image-20231020103554840" style="zoom:50%;" /><hr><p>修改主题明暗背景色：</p><img src="image-20231025172617227.png" alt="image-20231025172617227" style="zoom:50%;" /><p class="note note-success" style="border-left: 4px solid #777777;padding: 10px 15px;color: #777;background-color: #f7f7f7;">修改scrollbar_color和scrollbar_hover_color没生效</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一.上传大文件到Github</title>
    <link href="/2023/08/24/%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%B0Github/"/>
    <url>/2023/08/24/%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%B0Github/</url>
    
    <content type="html"><![CDATA[<p>Github文档：<a href="https://docs.github.com/zh">https://docs.github.com/zh</a></p><p>上传超过100M的单个文件到github：可先进行pdf压缩</p><p>下载lfs：<a href="https://git-lfs.com/">https://git-lfs.com/</a></p><ol><li><p>Github新建空仓库</p></li><li><p>本地新建空文件夹</p></li><li><p>git lfs install</p></li><li><p>git init</p></li><li><p>git lfs track &quot;*.zip&quot; </p><ol><li>追踪单个文件：<code>git lfs track &quot;FrameworkFold/XXXFramework/xxx&quot;</code></li><li>追踪指定类型的文件：<code>git lfs track &quot;*.dmg&quot;</code></li><li>不再使用 Git LFS 管理指定的文件：<code>git lfs untrack &quot;*.dmg&quot;</code></li><li>追踪指定目录下的文件：<code>git lfs track &quot;FrameworkFold/*&quot;</code></li><li>枚举目前所有被 Git LFS 管理的具体文件：<code>git lfs ls-files</code></li></ol></li><li><p>git add .gitattributes</p></li><li><p>git config --global user.email &quot;<a href="mailto:&#x32;&#x31;&#x39;&#55;&#57;&#x31;&#x33;&#x36;&#54;&#53;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x32;&#x31;&#x39;&#55;&#57;&#x31;&#x33;&#x36;&#54;&#53;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;</a>&quot;</p></li><li><p>git config --global <a href="http://user.name/">user.name</a> &quot;lan720&quot;</p></li><li><p>git commit -m &quot;提交 .gitattributes 文件&quot;</p></li><li><p>git remote add origin <a href="mailto:git@github.com">git@github.com</a>:lan720&#x2F;study.git</p></li><li><p>git push origin master</p></li><li><p>加入 代码随想录1.assets.zip</p></li><li><p>git add .</p></li><li><p>git commit -m &quot;提交&quot;</p></li><li><p>git push origin master</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>lfs</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
