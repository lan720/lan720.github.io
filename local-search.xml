<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>七.React参考</title>
    <link href="/2023/11/20/React%E5%8F%82%E8%80%83/"/>
    <url>/2023/11/20/React%E5%8F%82%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>React-dom 仅支持在 web 应用程序中使用（在浏览器 DOM 环境中运行）。本节分为以下部分：</p><ul><li><a href="https://zh-hans.react.dev/reference/react-dom/hooks">Hook</a> - 适用于在浏览器 DOM 环境中运行的 web 应用程序的 Hook。</li><li><a href="https://zh-hans.react.dev/reference/react-dom/components">组件</a> - React 支持所有内置的 HTML 和 SVG 组件。</li><li><a href="https://zh-hans.react.dev/reference/react-dom">API</a> - <code>react-dom</code> 包含仅在 Web 应用程序中支持的方法。</li><li><a href="https://zh-hans.react.dev/reference/react-dom/client">客户端 API</a> - <code>react-dom/client</code> API 允许在客户端（浏览器中）呈现 React 组件。</li><li><a href="https://zh-hans.react.dev/reference/react-dom/server">服务器 API</a> - <code>react-dom/server</code> API 允许在服务器端将 React 组件渲染为 HTML。</li></ul><h1 id="React-内置-Hook"><a href="#React-内置-Hook" class="headerlink" title="React 内置 Hook"></a>React 内置 Hook</h1><p><strong>Hook</strong> 可以帮助在组件中使用不同的 React 功能。你可以使用内置的 Hook 或使用自定义 Hook。</p><h2 id="1-State-Hook"><a href="#1-State-Hook" class="headerlink" title="1.State Hook"></a>1.State Hook</h2><p><mark>状态帮助组件 <a href="https://zh-hans.react.dev/learn/state-a-components-memory">“记住”用户输入的信息</a></mark>。例如，一个表单组件可以使用状态存储输入值，而一个图像库组件可以使用状态存储所选的图像索引。</p><p>使用以下 Hook 以向组件添加状态：</p><ul><li>使用 <a href="https://zh-hans.react.dev/reference/react/useState"><code>useState</code></a> 声明可以直接更新的状态变量。</li><li>使用 <a href="https://zh-hans.react.dev/reference/react/useReducer"><code>useReducer</code></a> 在 <a href="https://zh-hans.react.dev/learn/extracting-state-logic-into-a-reducer">reducer 函数</a> 中声明带有更新逻辑的 state 变量。</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3uk3vvlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3uk3vvlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ImageGallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><h2 id="2-Context-Hook"><a href="#2-Context-Hook" class="headerlink" title="2.Context Hook"></a>2.Context Hook</h2><p>上下文帮助组件 <a href="https://zh-hans.react.dev/learn/passing-props-to-a-component">从祖先组件接收信息，而无需将其作为 props 传递</a>。例如，应用程序的顶层组件可以借助上下文将 UI 主题传递给所有下方的组件，无论这些组件层级有多深。</p><ul><li>使用 <a href="https://zh-hans.react.dev/reference/react/useContext"><code>useContext</code></a> 读取订阅上下文。</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dug98dlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dug98dlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><h2 id="3-Ref-Hook"><a href="#3-Ref-Hook" class="headerlink" title="3.Ref Hook"></a>3.Ref Hook</h2><p>ref 允许组件 <a href="https://zh-hans.react.dev/learn/referencing-values-with-refs">保存一些不用于渲染的信息</a>，比如 DOM 节点或 timeout ID。<mark>与状态不同，更新 ref 不会重新渲染组件</mark>。ref 是从 React 范例中的“脱围机制”。当需要与非 React 系统如浏览器内置 API 一同工作时，ref 将会非常有用。</p><ul><li>使用 <a href="https://zh-hans.react.dev/reference/react/useRef"><code>useRef</code></a> 声明 ref。你可以在其中保存任何值，<mark>但最常用于保存 DOM 节点</mark>。</li><li>使用 <a href="https://zh-hans.react.dev/reference/react/useImperativeHandle"><code>useImperativeHandle</code></a> 自定义从组件中暴露的 ref，但是很少使用。</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2in9kylqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2in9kylqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><h2 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4.Effect Hook"></a>4.Effect Hook</h2><p>Effect 允许组件 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects">连接到外部系统并与之同步</a>。这包括处理网络、浏览器、DOM、动画、使用不同 UI 库编写的小部件以及其他非 React 代码。</p><ul><li>使用 <a href="https://zh-hans.react.dev/reference/react/useEffect"><code>useEffect</code></a> 将组件连接到外部系统。</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4a7yprlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4a7yprlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>Effect 是从 React 范例中的“脱围机制”。避免使用 Effect 协调应用程序的数据流。<mark>如果不需要与外部系统交互，那么 <a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect">可能不需要 Effect</a></mark>。</p><p><code>useEffect</code> 有两个很少使用的变换形式，它们在执行时机有所不同：</p><ul><li><a href="https://zh-hans.react.dev/reference/react/useLayoutEffect"><code>useLayoutEffect</code></a> 在浏览器重新绘制屏幕前执行，可以在此处测量布局。</li><li><a href="https://zh-hans.react.dev/reference/react/useInsertionEffect"><code>useInsertionEffect</code></a> 在 React 对 DOM 进行更改之前触发，库可以在此处插入动态 CSS。</li></ul><h2 id="5-性能-Hook"><a href="#5-性能-Hook" class="headerlink" title="5.性能 Hook"></a>5.性能 Hook</h2><p>优化重新渲染性能的一种常见方法是跳过不必要的工作。例如，可以告诉 React 重用缓存的计算结果，或者如果数据自上次渲染以来没有更改，则跳过重新渲染。</p><p>可以使用以下 Hook 跳过计算和不必要的重新渲染：</p><ol><li><p><mark>使用 <a href="https://zh-hans.react.dev/reference/react/useMemo"><code>useMemo</code></a> 缓存计算代价昂贵的计算结果。</mark></p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0ehlzmlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0ehlzmlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params">&#123; todos, tab, theme &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> visibleTodos = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">filterTodos</span>(todos, tab), [todos, tab]);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>使用 <a href="https://zh-hans.react.dev/reference/react/useCallback"><code>useCallback</code></a> 将函数传递给优化组件之前缓存函数定义。</mark><code>useCallback</code> 是一个允许你在多次渲染中缓存函数的 React Hook。</p><p><code>useCallback(fn, dependencies)</code>：</p><ul><li><p><code>fn</code>：想要缓存的函数。此函数可以接受任何参数并且返回任何值。React 将会在初次渲染而非调用时返回该函数。当进行下一次渲染时，如果 <code>dependencies</code> 相比于上一次渲染时没有改变，那么 React 将会返回相同的函数。否则，React 将返回在最新一次渲染中传入的函数，并且将其缓存以便之后使用。React 不会调用此函数，而是返回此函数。你可以自己决定何时调用以及是否调用。</p></li><li><p><code>dependencies</code>：有关是否更新 <code>fn</code> 的所有响应式值的一个列表。响应式值包括 props、state，和所有在你组件内部直接声明的变量和函数。如果你的代码检查工具 <a href="https://zh-hans.react.dev/learn/editor-setup#linting">配置了 React</a>，那么它将校验每一个正确指定为依赖的响应式值。依赖列表必须具有确切数量的项，并且必须像 <code>[dep1, dep2, dep3]</code> 这样编写。React 使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is</code></a> 比较每一个依赖和它的之前的值。</p></li><li><p>在初次渲染时，<code>useCallback</code> 返回你已经传入的 <code>fn</code> 函数。</p><p>在之后的渲染中, 如果依赖没有改变，<code>useCallback</code> 返回上一次渲染中缓存的 <code>fn</code> 函数；否则返回这一次渲染传入的 <code>fn</code>。</p></li></ul><p>注意： </p><ul><li><code>useCallback</code> 是一个 Hook，所以应该在 <strong>组件的顶层</strong> 或自定义 Hook 中调用。你不应在循环或者条件语句中调用它。如果你需要这样做，请新建一个组件，并将 state 移入其中。</li><li>除非有特定的理由，React <strong>将不会丢弃已缓存的函数</strong>。例如，在开发中，当编辑组件文件时，React 会丢弃缓存。在生产和开发环境中，如果你的组件在初次挂载中暂停，React 将会丢弃缓存。在未来，React 可能会增加更多利用了丢弃缓存机制的特性。例如，如果 React 未来内置了对虚拟列表的支持，那么在滚动超出虚拟化表视口的项目时，抛弃缓存是有意义的。如果你依赖 <code>useCallback</code> 作为一个性能优化途径，那么这些对你会有帮助。否则请考虑使用 <a href="https://zh-hans.react.dev/reference/react/useState#im-trying-to-set-state-to-a-function-but-it-gets-called-instead">state 变量</a> 或 <a href="https://zh-hans.react.dev/reference/react/useRef#avoiding-recreating-the-ref-contents">ref</a>。</li></ul><p>用法：</p><ol><li><p><mark>跳过组件的重新渲染</mark>：当你优化渲染性能的时候，有时需要缓存传递给子组件的函数。</p><p>为了缓存组件中多次渲染的函数，你需要将其定义在 <code>useCallback</code> Hook 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xibtwxlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xibtwxlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer, theme &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>      referrer,<br>      orderDetails,<br>    &#125;);<br>  &#125;, [productId, referrer]);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>你需要传递两个参数给 <code>useCallback</code>：</p><ol><li>在多次渲染中需要缓存的函数</li><li>函数内部需要使用到的所有组件内部值的 依赖列表。</li></ol><p>初次渲染时，在 <code>useCallback</code> 处接收的 返回函数 将会是已经传入的函数。</p><p>在之后的渲染中，React 将会使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is</code></a> 把 当前的依赖 和已传入之前的依赖进行比较。如果没有任何依赖改变，<code>useCallback</code> 将会返回与之前一样的函数。否则 <code>useCallback</code> 将返回 <strong>此次</strong> 渲染中传递的函数。</p><p>简而言之，<code>useCallback</code> 在多次渲染中缓存一个函数，直至这个函数的依赖发生改变。</p><p>假设你正在从 <code>ProductPage</code> 传递一个 <code>handleSubmit</code> 函数到 <code>ShippingForm</code> 组件中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-on58m9lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-on58m9lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer, theme &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ShippingForm</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br></code></pre></td></tr></table></div></figure><p>注意，切换 <code>theme</code> props 后会让应用停滞一小会，但如果将 <code>&lt;ShippingForm /&gt;</code> 从 JSX 中移除，应用将反应迅速。这就提示尽力优化 <code>ShippingForm</code> 组件将会很有用。</p><p><mark>默认情况下，当一个组件重新渲染时， React 将递归渲染它的所有子组件</mark>，因此每当因 <code>theme</code> 更改时而 <code>ProductPage</code> 组件重新渲染时，<code>ShippingForm</code> 组件也会重新渲染。这对于不需要大量计算去重新渲染的组件来说影响很小。但如果你发现某次重新渲染很慢，你可以将 <code>ShippingForm</code> 组件包裹在 <a href="https://zh-hans.react.dev/reference/react/memo"><code>memo</code></a> 中。如果 props 和上一次渲染时相同，那么 <code>ShippingForm</code> 组件将跳过重新渲染。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jtfae6lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jtfae6lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ShippingForm</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">ShippingForm</span>(<span class="hljs-params">&#123; onSubmit &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></div></figure><p><strong>当代码像上面一样改变后，如果 props 与上一次渲染时相同，<code>ShippingForm</code> 将跳过重新渲染</strong>。这时缓存函数就变得很重要。假设定义了 <code>handleSubmit</code> 而没有定义 <code>useCallback</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8gcyillqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8gcyillqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer, theme &#125;</span>) &#123;<br>  <span class="hljs-comment">// 每当 theme 改变时，都会生成一个不同的函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">orderDetails</span>) &#123;<br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>      referrer,<br>      orderDetails,<br>    &#125;);<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 这将导致 ShippingForm props 永远都不会是相同的，并且每次它都会重新渲染 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ShippingForm</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>与字面量对象 <code>&#123;&#125;</code> 总是会创建新对象类似，<strong>在 JavaScript 中，<code>function () &#123;&#125;</code> 或者 <code>() =&gt; &#123;&#125;</code> 总是会生成不同的函数</strong>。正常情况下，这不会有问题，但是这意味着 <code>ShippingForm</code> props 将永远不会是相同的，并且 <a href="https://zh-hans.react.dev/reference/react/memo"><code>memo</code></a> 对性能的优化永远不会生效。而这就是 <code>useCallback</code> 起作用的地方：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-r6qbxflqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-r6qbxflqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer, theme &#125;</span>) &#123;<br>  <span class="hljs-comment">// 在多次渲染中缓存函数</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>      referrer,<br>      orderDetails,<br>    &#125;);<br>  &#125;, [productId, referrer]); <span class="hljs-comment">// 只要这些依赖没有改变</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;/* ShippingForm 就会收到同样的 props 并且跳过重新渲染 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ShippingForm</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>将 <code>handleSubmit</code> 传递给 <code>useCallback</code> 就可以确保它在多次重新渲染之间是相同的函数</strong>，直到依赖发生改变。注意，除非出于某种特定原因，否则不必将一个函数包裹在 <code>useCallback</code> 中。在本例中，你将它传递到了包裹在 <a href="https://zh-hans.react.dev/reference/react/memo"><code>memo</code></a> 中的组件，这允许它跳过重新渲染。</p><p>注意：</p><p><strong><code>useCallback</code> 只应作用于性能优化</strong>。如果代码在没有它的情况下无法运行，请找到根本问题并首先修复它，然后再使用 <code>useCallback</code>。</p><p>——<code>useCallback</code> 与 <code>useMemo</code> 有何关系？ </p><p><a href="https://zh-hans.react.dev/reference/react/useMemo"><code>useMemo</code></a> 经常与 <code>useCallback</code> 一同出现。当尝试优化子组件时，它们都很有用。他们会 <a href="https://en.wikipedia.org/wiki/Memoization">记住</a>（或者说，缓存）正在传递的东西：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a30ps6lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a30ps6lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useMemo, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> product = <span class="hljs-title function_">useData</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId);<br>  <span class="hljs-keyword">const</span> requirements = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">//调用函数并缓存结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">computeRequirements</span>(product);<br>  &#125;, [product]);<br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123; <span class="hljs-comment">// 缓存函数本身</span><br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>      referrer,<br>      orderDetails,<br>    &#125;);<br>  &#125;, [productId, referrer]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ShippingForm</span> <span class="hljs-attr">requirements</span>=<span class="hljs-string">&#123;requirements&#125;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>区别在于你需要缓存 <strong>什么</strong>:</p><ul><li><strong><a href="https://zh-hans.react.dev/reference/react/useMemo"><code>useMemo</code></a> 缓存函数调用的结果</strong>。在这里，它缓存了调用 <code>computeRequirements(product)</code> 的结果。除非 <code>product</code> 发生改变，否则它将不会发生变化。这让你向下传递 <code>requirements</code> 时而无需不必要地重新渲染 <code>ShippingForm</code>。必要时，React 将会调用传入的函数重新计算结果。</li><li><strong><code>useCallback</code> 缓存函数本身</strong>。不像 <code>useMemo</code>，它不会调用你传入的函数。相反，它缓存此函数。从而除非 <code>productId</code> 或 <code>referrer</code> 发生改变，<code>handleSubmit</code> 自己将不会发生改变。这让你向下传递 <code>handleSubmit</code> 函数而无需不必要地重新渲染 <code>ShippingForm</code>。直至用户提交表单，你的代码都将不会运行。</li></ul><p>如果你已经熟悉了 <a href="https://zh-hans.react.dev/reference/react/useMemo"><code>useMemo</code></a>，你可能发现将 <code>useCallback</code> 视为以下内容会很有帮助：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gsj792lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gsj792lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 在 React 内部的简化实现</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useCallback</span>(<span class="hljs-params">fn, dependencies</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> fn, dependencies);<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>从记忆化回调中更新 state</mark>：有时，你可能在记忆化回调汇中基于之前的 state 来更新 state。</p><p>下面的 <code>handleAddTodo</code> 函数将 <code>todos</code> 指定为依赖项，因为它会从中计算下一个 todos：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9ervoolqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9ervoolqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [todos, setTodos] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> handleAddTodo = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">text</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> newTodo = &#123; <span class="hljs-attr">id</span>: nextId++, text &#125;;<br>    <span class="hljs-title function_">setTodos</span>([...todos, newTodo]);<br>  &#125;, [todos]);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>我们期望记忆化函数具有尽可能少的依赖，当你读取 state 只是为了计算下一个 state 时，你可以通过传递 <a href="https://zh-hans.react.dev/reference/react/useState#updating-state-based-on-the-previous-state">updater function</a> 以移除该依赖：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-aur39nlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-aur39nlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [todos, setTodos] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> handleAddTodo = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">text</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> newTodo = &#123; <span class="hljs-attr">id</span>: nextId++, text &#125;;<br>    <span class="hljs-title function_">setTodos</span>(<span class="hljs-function"><span class="hljs-params">todos</span> =&gt;</span> [...todos, newTodo]);<br>  &#125;, []); <span class="hljs-comment">// ✅ 不需要 todos 依赖项</span><br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>在这里，并不是将 <code>todos</code> 作为依赖项并在内部读取它，而是传递一个关于 <strong>如何</strong> 更新 state 的指示器 (<code>todos =&gt; [...todos, newTodo]</code>) 给 React。</p></li><li><p><mark>防止频繁触发 Effect </mark>：有时，你想要在 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects">Effect</a> 内部调用函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ej0bktlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ej0bktlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [message, setMessage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createOptions</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">serverUrl</span>: <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>,<br>      <span class="hljs-attr">roomId</span>: roomId<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> options = <span class="hljs-title function_">createOptions</span>();<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>这会产生一个问题，<a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency">每一个响应值都必须声明为 Effect 的依赖</a>。但是如果将 <code>createOptions</code> 声明为依赖，它会导致 Effect 不断重新连接到聊天室：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yt6rsllqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yt6rsllqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> options = <span class="hljs-title function_">createOptions</span>();<br>  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>  connection.<span class="hljs-title function_">connect</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>&#125;, [createOptions]); <span class="hljs-comment">// 🔴 问题：这个依赖在每一次渲染中都会发生改变</span><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>为了解决这个问题，需要在 Effect 中将要调用的函数包裹在 <code>useCallback</code> 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2wg8kylqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2wg8kylqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [message, setMessage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> createOptions = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">serverUrl</span>: <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>,<br>      <span class="hljs-attr">roomId</span>: roomId<br>    &#125;;<br>  &#125;, [roomId]); <span class="hljs-comment">// ✅ 仅当 roomId 更改时更改</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> options = <span class="hljs-title function_">createOptions</span>();<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [createOptions]); <span class="hljs-comment">// ✅ 仅当 createOptions 更改时更改</span><br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>这将确保如果 <code>roomId</code> 相同，<code>createOptions</code> 在多次渲染中会是同一个函数。<strong>但是，最好消除对函数依赖项的需求</strong>。将你的函数移入 Effect <strong>内部</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nr6danlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nr6danlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [message, setMessage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">createOptions</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// ✅ 无需使用回调或函数依赖！</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">serverUrl</span>: <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>,<br>        <span class="hljs-attr">roomId</span>: roomId<br>      &#125;;<br>    &#125;<br>    <span class="hljs-keyword">const</span> options = <span class="hljs-title function_">createOptions</span>();<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]); <span class="hljs-comment">// ✅ 仅当 roomId 更改时更改</span><br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>现在你的代码变得更简单了并且不需要 <code>useCallback</code>。</p></li><li><p><mark>优化自定义 Hook</mark>：如果你正在编写一个 <a href="https://zh-hans.react.dev/learn/reusing-logic-with-custom-hooks">自定义 Hook</a>，建议将它返回的任何函数包裹在 <code>useCallback</code> 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s3fd4llqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s3fd4llqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">useRouter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; dispatch &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">RouterStateContext</span>);<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">url</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;navigate&#x27;</span>, url &#125;);<br>  &#125;, [dispatch]);<br>  <span class="hljs-keyword">const</span> goBack = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;back&#x27;</span> &#125;);<br>  &#125;, [dispatch]);<br>  <span class="hljs-keyword">return</span> &#123;<br>    navigate,<br>    goBack,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这确保了 Hook 的使用者在需要时能够优化自己的代码。</p><hr><p>——我的组件每一次渲染时, <code>useCallback</code> 都返回了完全不同的函数?</p><p>确保你已经将依赖数组指定为第二个参数！</p><p>如果你忘记使用依赖数组，<code>useCallback</code> 每一次都将返回一个新的函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7tdo64lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7tdo64lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>      referrer,<br>      orderDetails,<br>    &#125;);<br>  &#125;); <span class="hljs-comment">// 🔴 每一次都返回一个新函数：没有依赖项数组</span><br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>这是将依赖项数组作为第二个参数传递的更正版本：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-w0eeielqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-w0eeielqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>      referrer,<br>      orderDetails,<br>    &#125;);<br>  &#125;, [productId, referrer]); <span class="hljs-comment">// ✅ 必要时返回一个新的函数</span><br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>如果这没有帮助，那么问题是至少有一个依赖项与之前的渲染不同。你可以通过手动将依赖项记录到控制台来调试此问题：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yr4vuilqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yr4vuilqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123;<br><br>    <span class="hljs-comment">// ..</span><br><br>  &#125;, [productId, referrer]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([productId, referrer]);<br></code></pre></td></tr></table></div></figure><p>然后，你可以在控制台中右键单击来自不同重新渲染的数组，并为它们选择“存储为全局变量”。假设第一个被保存为 <code>temp1</code>，第二个被保存为 <code>temp2</code>，然后你可以使用浏览器控制台检查两个数组中的每个依赖项是否相同：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7pvsm7lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7pvsm7lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(temp1[<span class="hljs-number">0</span>], temp2[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 数组之间的第一个依赖关系是否相同？</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(temp1[<span class="hljs-number">1</span>], temp2[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 数组之间的第二个依赖关系是否相同？</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(temp1[<span class="hljs-number">2</span>], temp2[<span class="hljs-number">2</span>]); <span class="hljs-comment">// 数组之间的每一个依赖关系是否相同...</span><br></code></pre></td></tr></table></div></figure><p>当你发现是某一个依赖性破坏记忆化时，请尝试将其删除，或者 <a href="https://zh-hans.react.dev/reference/react/useMemo#memoizing-a-dependency-of-another-hook">也对其进行记忆化</a>。</p><p>——我需要在循环中为每一个列表项调用 <code>useCallback</code> 函数，但是这不被允许？</p><p>假设 <code>Chart</code> 组件被包裹在 <a href="https://zh-hans.react.dev/reference/react/memo"><code>memo</code></a> 中。你希望在 <code>ReportList</code> 组件重新渲染时跳过重新渲染列表中的每个 <code>Chart</code>。但是，你不能在循环中调用 <code>useCallback</code>。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-i09m8plqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-i09m8plqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ReportList</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>     &#123;items.map(item =&gt; &#123;</span><br><span class="language-xml">        // 🔴 你不能在循环中调用 useCallback：</span><br><span class="language-xml">        const handleClick = useCallback(() =&gt; &#123;</span><br><span class="language-xml">          sendReport(item)</span><br><span class="language-xml">        &#125;, [item]);</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Chart</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>相反，为单个项目提取一个组件，然后使用 <code>useCallback</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9pmxnxlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9pmxnxlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ReportList</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span></span><br><span class="language-xml">      &#123;items.map(item =&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Report</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&#123;item&#125;</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Report</span>(<span class="hljs-params">&#123; item &#125;</span>) &#123;<br>  <span class="hljs-comment">// ✅ 在最顶层调用 useCallback</span><br>  <span class="hljs-keyword">const</span> handleClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">sendReport</span>(item)<br>  &#125;, [item]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Chart</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>或者，你可以删除最后一个代码段中的 <code>useCallback</code>，并将 <code>Report</code> 本身包装在 <a href="https://zh-hans.react.dev/reference/react/memo"><code>memo</code></a> 中。如果 <code>item</code> props 没有更改，<code>Report</code> 将跳过重新渲染，因此 <code>Chart</code> 也将跳过重新渲染：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-uc9974lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-uc9974lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ReportList</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Report</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">Report</span>(<span class="hljs-params">&#123; item &#125;</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">sendReport</span>(item);<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Chart</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span></span><br>  );<br>&#125;);<br></code></pre></td></tr></table></div></figure></li></ol></li></ol><p>有时由于屏幕确实需要更新，无法跳过重新渲染。在这种情况下，可以通过将必须同步的阻塞更新（比如使用输入法输入内容）与不需要阻塞用户界面的非阻塞更新（比如更新图表）分离以提高性能。</p><p>使用以下 Hook 处理渲染优先级：</p><ul><li><a href="https://zh-hans.react.dev/reference/react/useTransition"><code>useTransition</code></a> 允许将状态转换标记为非阻塞，并允许其他更新中断它。</li><li><a href="https://zh-hans.react.dev/reference/react/useDeferredValue"><code>useDeferredValue</code></a> 允许延迟更新 UI 的非关键部分，以让其他部分先更新。</li></ul><h2 id="6-资源-Hook"><a href="#6-资源-Hook" class="headerlink" title="6.资源 Hook"></a>6.资源 Hook</h2><p>资源可以被组件访问，而无需将它们作为状态的一部分。例如，组件可以从 Promise 中读取消息，或从上下文中读取样式信息。</p><p>Promise 对象表示异步操作最终的完成（或失败）以及其结果值。</p><p>一个 <strong><code>Promise</code></strong> 是一个代理，它代表一个在创建 promise 时不一定已知的值。它允许你将处理程序与异步操作的最终成功值或失败原因关联起来。这使得异步方法可以像同步方法一样返回值：异步方法不会立即返回最终值，而是返回一个 <em>promise</em>，以便在将来的某个时间点提供该值。</p><p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p><ul><li>待定（pending）：初始状态，既没有被兑现，也没有被拒绝。</li><li>已兑现（fulfilled）：意味着操作成功完成。</li><li>已拒绝（rejected）：意味着操作失败。</li></ul><p>一个待定的 Promise <em>最终状态</em>可以是<em>已兑现</em>并返回一个值，或者是<em>已拒绝</em>并返回一个原因（错误）。当其中任意一种情况发生时，通过 Promise 的 <code>then</code> 方法串联的处理程序将被调用。如果绑定相应处理程序时 Promise 已经兑现或拒绝，这处理程序将被立即调用，因此在异步操作完成和绑定处理程序之间不存在竞态条件。</p><p>如果一个 Promise 已经被兑现或拒绝，即不再处于待定状态，那么则称之为已<em>敲定（settled）</em>。</p><p>你还会听到使用<em>已解决</em>（resolved）这个术语来描述 Promise——这意味着该 Promise 已经敲定（settled），或为了匹配另一个 Promise 的最终状态而被“锁定（lock-in）”，进一步解决或拒绝它都没有影响。</p><img src="image-20231230201957024.png" alt="image-20231230201957024" style="zoom:50%;" /><p>使用以下 Hook 以从资源中读取值：</p><ul><li><a href="https://zh-hans.react.dev/reference/react/use"><code>use</code></a> 允许读取像 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> 或 <a href="https://zh-hans.react.dev/learn/passing-data-deeply-with-context">上下文context</a> 这样的资源的值。</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jv271slqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jv271slqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MessageComponent</span>(<span class="hljs-params">&#123; messagePromise &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">use</span>(messagePromise);<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">use</span>(<span class="hljs-title class_">ThemeContext</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>与其他 React Hook 不同的是，<mark>可以在循环和条件语句（如 <code>if</code>）中调用 <code>use</code></mark>。但需要注意的是，调用 <code>use</code> 的函数仍然必须是一个组件或 Hook。</p><p>当使用 Promise 调用 <code>use</code> Hook 时，它会与 <a href="https://zh-hans.react.dev/reference/react/Suspense"><code>Suspense</code></a> 和 <a href="https://zh-hans.react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary">错误边界</a> 集成。当传递给 <code>use</code> 的 Promise 处于 pending 时，调用 <code>use</code> 的组件也会 <strong>挂起</strong>。如果调用 <code>use</code> 的组件被包装在 Suspense 边界内，将显示后备 UI。一旦 Promise 被解决，Suspense 后备方案将被使用 <code>use</code> Hook 返回的数据替换。如果传递给 <code>use</code> 的 Promise 被拒绝，将显示最近错误边界的后备 UI。</p><p><code>use</code> Hook 返回从资源中读取的值，类似于 fullfilled <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> 或 <a href="https://zh-hans.react.dev/learn/passing-data-deeply-with-context">context</a>。</p><p>注意： </p><ul><li><code>use</code> Hook 必须在组件或 Hook 内部调用。</li><li>在 <a href="https://zh-hans.react.dev/reference/react/use-server">服务器组件</a> 中获取数据时，应优先使用 <code>async</code> 和 <code>await</code> 而不是 <code>use</code>。<mark><code>async</code> 和 <code>await</code> 会从调用 <code>await</code> 的点开始渲染，而 <code>use</code> 会在数据获取到后重新渲染组件</mark>。</li><li>在 <a href="https://zh-hans.react.dev/reference/react/use-server">服务器组件</a> 中创建 Promise 并将其传递给 <a href="https://zh-hans.react.dev/reference/react/use-client">客户端组件</a> 优于在客户端组件中创建 Promise。<mark>在客户端组件中创建的 Promise 每次渲染都会重新创建。从服务器组件传递到客户端组件的 Promise 在重新渲染时保持稳定</mark>。</li></ul><p>用法：</p><ol><li><p>使用 <code>use</code> 读取 context：当 <a href="https://zh-hans.react.dev/learn/passing-data-deeply-with-context">context</a> 被传递给 <code>use</code> 时，它的工作方式类似于<a href="https://zh-hans.react.dev/reference/react/useContext"><code>useContext</code></a>。而 <code>useContext</code> 必须在组件的顶层调用，<code>use</code> 可以在条件语句如 <code>if</code> 和循环如 <code>for</code> 内调用。相比之下，<code>use</code> 比 <code>useContext</code>更加灵活。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-muums1lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-muums1lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; use &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">use</span>(<span class="hljs-title class_">ThemeContext</span>);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p><code>use</code> 返回传递的 context 的 context 值。React 会搜索组件树并找到 <strong>最接近的 context provider</strong> 以确定需要返回的 context 值。</p><p>如果要将上下文传递给 <code>Button</code>，请将其或其父组件之一包装在相应的 context provdier 内。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ummxy5lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ummxy5lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyPage</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Form</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ……在这里面渲染按钮……</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>无论在 provider 和 <code>Button</code> 之间有多少层组件，都不会有影响。当 <code>Form</code> 内的任何位置的 <code>Button</code> 调用 <code>use(ThemeContext)</code> 时，它将接收到值为 <code>&quot;dark&quot;</code>。</p><p>不同于 <a href="https://zh-hans.react.dev/reference/react/useContext"><code>useContext</code></a>，<code>use</code> 可以在条件语句和循环中调用，比如 <code>if</code>。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vrplwzlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vrplwzlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">HorizontalRule</span>(<span class="hljs-params">&#123; show &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (show) &#123;<br>    <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">use</span>(<span class="hljs-title class_">ThemeContext</span>);<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;theme&#125;</span> /&gt;</span></span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>if</code> 语句内部调用了 <code>use</code>，允许有条件地从 context 中读取值。</p><p>与 <code>useContext</code> 类似，<code>use(context)</code> 始终查找调用它的组件上方最近的 context provider。它向上搜索并忽略调用 <code>use(context)</code> 的组件中的 context provider。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t23qpnlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t23qpnlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext, use &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Form</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Welcome&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">show</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span>Sign up<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">show</span>=<span class="hljs-string">&#123;false&#125;</span>&gt;</span>Log in<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123; title, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">use</span>(<span class="hljs-title class_">ThemeContext</span>);<br>  <span class="hljs-keyword">const</span> className = <span class="hljs-string">&#x27;panel-&#x27;</span> + theme;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; show, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (show) &#123;<br>    <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">use</span>(<span class="hljs-title class_">ThemeContext</span>);<br>    <span class="hljs-keyword">const</span> className = <span class="hljs-string">&#x27;button-&#x27;</span> + theme;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231120171744803.png" alt="image-20231120171744803" style="zoom:50%;" /></li><li><p><mark>将数据从服务器流式传递给客户端</mark>：数据可以通过将 Promise 作为 prop 从 服务器组件 传递到 客户端组件 以从服务器流式传输到客户端。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v20zuclqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v20zuclqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; fetchMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./lib.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./message.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> messagePromise = <span class="hljs-title function_">fetchMessage</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">p</span>&gt;</span>waiting for message...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">messagePromise</span>=<span class="hljs-string">&#123;messagePromise&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>客户端组件将 从 prop 中接收到的 Promise  传递给 <code>use</code> Hook。这允许 客户端组件 从最初由服务器组件创建的 Promise 中读取值。</p><p>Message.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n3xvewlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n3xvewlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-string">&#x27;use client&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; use &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; messagePromise &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> messageContent = <span class="hljs-title function_">use</span>(messagePromise);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here is the message: &#123;messageContent&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>由于 <code>Message</code> 被包裹在 <a href="https://zh-hans.react.dev/reference/react/Suspense"><code>Suspense</code></a> 中，所以在 Promise 解决之前将显示后备方案。当 Promise 被解决后，<code>use</code> Hook 将读取值，然后 <code>Message</code> 组件将替换 Suspense 后备方案。</p><p>Message.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x7y12alqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x7y12alqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-string">&quot;use client&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; use, <span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; messagePromise &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> messageContent = <span class="hljs-title function_">use</span>(messagePromise);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here is the message: &#123;messageContent&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MessageContainer</span>(<span class="hljs-params">&#123; messagePromise &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">p</span>&gt;</span>⌛Downloading message...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">messagePromise</span>=<span class="hljs-string">&#123;messagePromise&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="message.gif" alt="message" style="zoom:50%;" /><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">将来自服务器组件的 Promise 传递至客户端组件时，其解析值必须可序列化以在服务器和客户端之间传递。像函数这样的数据类型不可序列化，不能成为这种 Promise 的解析值。</p><p>——应该在服务器组件还是客户端组件解析 Promise？ </p><p>Promise 可以从服务器组件传递至客户端组件，并且可以在客户端组件中使用 <code>use</code> Hook 解析它。也可以在服务器组件中使用 <code>await</code> 解析 Promise，并将所需的数据作为 prop 传递给客户端组件。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ydg1yflqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ydg1yflqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> messageContent = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchMessage</span>();<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">messageContent</span>=<span class="hljs-string">&#123;messageContent&#125;</span> /&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>但是<mark>在 <a href="https://zh-hans.react.dev/reference/react/components#server-components">服务器组件</a> 中使用 <code>await</code> 会在 <code>await</code> 执行完成前阻塞渲染。而将 Promise 从服务器组件传递到客户端组件可以防止 Promise 阻塞服务器组件渲染</mark>。</p></li><li><p>处理 rejected Promise：在某些情况下，传递给 <code>use</code> 的 Promise 可能会被拒绝（rejected）。可以通过以下方式处理 rejected Promise：</p><ol><li><p><mark>使用错误边界将错误展示给用户</mark>：如果希望在 Promise 被拒绝（rejected）时向用户显示错误信息，可以使用 <a href="https://zh-hans.react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary">错误边界</a>。如果需要使用错误边界，请将调用 <code>use</code> Hook 的组件包装在错误边界中。如果传递给 <code>use</code> 的 Promise 被拒绝（rejected），将显示错误边界的后备方案。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-aluyfulqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-aluyfulqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-string">&quot;use client&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; use, <span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ErrorBoundary</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-error-boundary&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MessageContainer</span>(<span class="hljs-params">&#123; messagePromise &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ErrorBoundary</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">p</span>&gt;</span>⚠️Something went wrong<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">p</span>&gt;</span>⌛Downloading message...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">messagePromise</span>=<span class="hljs-string">&#123;messagePromise&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ErrorBoundary</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; messagePromise &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> content = <span class="hljs-title function_">use</span>(messagePromise);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here is the message: &#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="reject.gif" alt="reject" style="zoom:50%;" /></li><li><p><mark>使用 <code>Promise.catch</code> 提供替代值</mark>：如果希望在传递给 <code>use</code> 的 Promise 被拒绝（rejected）时提供替代值，可以使用 Promise 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"><code>catch</code></a> 方法。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-efzu9glqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-efzu9glqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./message.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> messagePromise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">reject</span>();<br>  &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;no new message found.&quot;</span>;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">p</span>&gt;</span>waiting for message...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">messagePromise</span>=<span class="hljs-string">&#123;messagePromise&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>要使用 Promise 的 <code>catch</code> 方法，请在 Promise 对象上调用 <code>catch</code>。<code>catch</code> 接受一个参数：一个接受错误消息作为参数的函数。由传递给 <code>catch</code> 的函数 返回 的任何内容都将视为 Promise 的解决值。</p><p>不能在 try-catch 块中调用 <code>use</code>。可以选择将组件 <a href="https://zh-hans.react.dev/reference/react/use#displaying-an-error-to-users-with-error-boundary">包装在错误边界中</a>，或者 <a href="https://zh-hans.react.dev/reference/react/use#providing-an-alternative-value-with-promise-catch">使用 Promise <code>.catch</code> 方法提供替代值给 <code>use</code></a>。</p></li></ol></li></ol><p>要么在 React 组件或 Hook 函数之外调用 <code>use</code>，或者在 try-catch 块中调用 <code>use</code>。如果你在 try-catch 块中调用 <code>use</code>，请将组件包裹在错误边界中，或者使用 Promise 的 <code>catch</code> 方法来捕获错误并提供给替代值。</p><p><mark>如果在 React 组件或 Hook 函数之外调用 <code>use</code>，请将 <code>use</code> 调用移至 React 组件或 Hook 函数中f</mark>。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-73h6nvlqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-73h6nvlqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MessageComponent</span>(<span class="hljs-params">&#123;messagePromise&#125;</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">download</span>(<span class="hljs-params"></span>) &#123;<br>    &lt;!--  ❌ 调用 <span class="hljs-string">`use`</span> 的函数不是组件或者 <span class="hljs-title class_">Hook</span> --&gt; <br>    <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">use</span>(messagePromise);<br>    <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>相反，请在任何组件封闭区域之外调用 <code>use</code>，而调用 <code>use</code> 的函数本身应为组件或 Hook。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zs4dm8lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zs4dm8lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MessageComponent</span>(<span class="hljs-params">&#123;messagePromise&#125;</span>) &#123;<br>  &lt;!--  ✅ <span class="hljs-string">`use`</span> 正在组件内被调用 --&gt; <br>  <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">use</span>(messagePromise);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><h2 id="7-其他-Hook"><a href="#7-其他-Hook" class="headerlink" title="7.其他 Hook"></a>7.其他 Hook</h2><p>这些 Hook 主要适用于库作者，不常在应用程序代码中使用。</p><ul><li>使用 <a href="https://zh-hans.react.dev/reference/react/useDebugValue"><code>useDebugValue</code></a> 自定义 React 开发者工具为自定义 Hook 添加的标签。</li><li>使用 <a href="https://zh-hans.react.dev/reference/react/useId"><code>useId</code></a> 将唯一的 ID 与组件相关联，其通常与可访问性 API 一起使用。</li><li>使用 <a href="https://zh-hans.react.dev/reference/react/useSyncExternalStore"><code>useSyncExternalStore</code></a> 订阅外部 store。</li></ul><h2 id="8-自定义-Hook"><a href="#8-自定义-Hook" class="headerlink" title="8.自定义 Hook"></a>8.自定义 Hook</h2><p>开发者可以 <a href="https://zh-hans.react.dev/learn/reusing-logic-with-custom-hooks#extracting-your-own-custom-hook-from-a-component">自定义 Hook</a> 作为 JavaScript 函数。</p><p>useContext：<a href="https://zh-hans.react.dev/reference/react/useContext">https://zh-hans.react.dev/reference/react/useContext</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Hook</tag>
      
      <tag>组件</tag>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六.React教程</title>
    <link href="/2023/11/01/React%E6%95%99%E7%A8%8B/"/>
    <url>/2023/11/01/React%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>React官方中文文档：<a href="https://zh-hans.react.dev/learn/react-developer-tools">https://zh-hans.react.dev/learn/react-developer-tools</a></p><p>官方Github仓库：<a href="https://github.com/reactjs/zh-hans.react.dev">https://github.com/reactjs/zh-hans.react.dev</a></p><p>前端在线编辑器公开沙盒：<a href="https://codesandbox.io/dashboard/recent?workspace=44913078-bd56-4551-abd7-4139b7ec6366">https://codesandbox.io/dashboard/recent?workspace=44913078-bd56-4551-abd7-4139b7ec6366</a></p><p>本地启动项目：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0qo1n9lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0qo1n9lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g yarn<br>yarn <br>yarn dev<br></code></pre></td></tr></table></div></figure><img src="image-20231030163722152.png" alt="image-20231030163722152" style="zoom:50%;" /><img src="image-20231030164520318.png" alt="image-20231030164520318" style="zoom:50%;" /><img src="image-20231030164705426.png" alt="image-20231030164705426" style="zoom:50%;" /><p>安装扩展ESLint【 JavaScript 代码检查工具】，Prettier</p><p>保存并自动格式化：</p><ol><li>按快捷键 <code>Ctrl/Cmd + Shift + P</code>.</li><li>输入 “settings”</li><li>按回车键</li><li>在搜索栏, 输入 “format on save”</li><li>确保勾选 “format on save” 选项</li></ol><p>Chrome插件：<code>React Developer Tools</code></p><img src="image-20231101175313970.png" alt="image-20231101175313970" style="zoom:50%;" /><img src="image-20231101175344676.png" alt="image-20231101175344676" style="zoom:50%;" /><h1 id="一-使用TypeScript"><a href="#一-使用TypeScript" class="headerlink" title="一.使用TypeScript"></a>一.使用TypeScript</h1><p>TypeScript官方文档：<a href="https://www.typescriptlang.org/zh/docs/handbook/">https://www.typescriptlang.org/zh/docs/handbook/</a></p><p>TypeScript 是一种向 JavaScript 代码添加类型定义的常用方法。TypeScript 天然支持 JSX——只需在项目中添加 <a href="https://www.npmjs.com/package/@types/react"><code>@types/react</code></a> 和 <a href="https://www.npmjs.com/package/@types/react-dom"><code>@types/react-dom</code></a> 即可获得完整的 React Web 支持。</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hz1hinlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hz1hinlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install @types/react @types/react-dom<br></code></pre></td></tr></table></div></figure><p>然后在 <code>tsconfig.json</code> 中设置以下编译器选项：</p><ol><li>必须在 <a href="https://www.typescriptlang.org/tsconfig/#lib"><code>lib</code></a> 中包含 <code>dom</code>（注意：如果没有指定 <code>lib</code> 选项，默认情况下会包含 <code>dom</code>）。</li><li><a href="https://www.typescriptlang.org/tsconfig/#jsx"><code>jsx</code></a> 必须设置为一个有效的选项。对于大多数应用程序，<code>preserve</code> 应该足够了。 如果你正在发布一个库，请查阅 <a href="https://www.typescriptlang.org/tsconfig/#jsx"><code>jsx</code> 文档</a> 以选择合适的值。</li></ol><p>为按钮的 <code>title</code> 添加一个描述类型：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sc4ghflqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sc4ghflqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; title &#125;: &#123; title: <span class="hljs-built_in">string</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这种内联语法是为组件提供类型的最简单方法，但是一旦你开始描述几个字段，它可能变得难以管理。相反，你可以使用 <code>interface</code> 或 <code>type</code> 来描述组件的 props：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cnubi2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cnubi2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyButtonProps</span> &#123;<br>  <span class="hljs-comment">/* 按钮文字 */</span><br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-comment">/* 按钮是否禁用 */</span><br>  <span class="hljs-attr">disabled</span>: <span class="hljs-built_in">boolean</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; title, disabled &#125;: MyButtonProps</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;disabled&#125;</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to my app<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;我是一个禁用按钮&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;true&#125;/</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>为 state 显式提供一个类型，你可以通过为 <code>useState</code> 调用提供一个类型参数来实现：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ouzwo5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ouzwo5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 显式设置类型为 &quot;boolean&quot;</span><br><span class="hljs-keyword">const</span> [enabled, setEnabled] = useState&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></div></figure><p>在这种情况下，这并不是很有用，但是当你有一个联合类型时，你可能想要提供一个 <code>type</code>。例如，这里的 <code>status</code> 可以是几个不同的字符串之一：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bp2d88lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bp2d88lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Status</span> = <span class="hljs-string">&quot;idle&quot;</span> | <span class="hljs-string">&quot;loading&quot;</span> | <span class="hljs-string">&quot;success&quot;</span> | <span class="hljs-string">&quot;error&quot;</span>;<br><br><span class="hljs-keyword">const</span> [status, setStatus] = useState&lt;<span class="hljs-title class_">Status</span>&gt;(<span class="hljs-string">&quot;idle&quot;</span>);<br></code></pre></td></tr></table></div></figure><p>或者，如 <a href="http://localhost:3000/learn/choosing-the-state-structure#principles-for-structuring-state">选择 state 结构原则</a> 中推荐的，你可以将相关的 state 作为一个对象分组，并通过对象类型描述不同的可能性：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1a6qhvlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1a6qhvlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">type</span> <span class="hljs-title class_">RequestState</span> =<br>  | &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;idle&#x27;</span> &#125;<br>  | &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;loading&#x27;</span> &#125;<br>  | &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-attr">data</span>: <span class="hljs-built_in">any</span> &#125;<br>  | &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-attr">error</span>: <span class="hljs-title class_">Error</span> &#125;;<br><br><span class="hljs-keyword">const</span> [requestState, setRequestState] = useState&lt;<span class="hljs-title class_">RequestState</span><br></code></pre></td></tr></table></div></figure><p><code>useReducer</code>接受一个 reducer 函数和一个初始 state 作为参数，并将从初始 state 推断出 reducer 函数的类型。你可以选择性地为 <code>useReducer</code> 提供类型参数以为 state 提供类型。但是更高的做法仍然是在初始 state 上添加类型：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-87zoj7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-87zoj7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123;useReducer&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>   <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span> <br>&#125;;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">CounterAction</span> =<br>  | &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;reset&quot;</span> &#125;<br>  | &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;setCount&quot;</span>; <span class="hljs-attr">value</span>: <span class="hljs-title class_">State</span>[<span class="hljs-string">&quot;count&quot;</span>] &#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">State</span> = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">stateReducer</span>(<span class="hljs-params">state: State, action: CounterAction</span>): <span class="hljs-title class_">State</span> &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;reset&quot;</span>:<br>      <span class="hljs-keyword">return</span> initialState;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;setCount&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">count</span>: action.<span class="hljs-property">value</span> &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Unknown action&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(stateReducer, initialState);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addFive</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;setCount&quot;</span>, <span class="hljs-attr">value</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">5</span> &#125;);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">reset</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;reset&quot;</span> &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到我的计数器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>计数： &#123;state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addFive&#125;</span>&gt;</span>加 5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;reset&#125;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101152507530.png" alt="image-20231101152507530" style="zoom:50%;" /><hr><p><a href="http://localhost:3000/reference/react/useContext"><code>useContext</code></a> 是一种无需通过组件传递 props 而可以直接在组件树中传递数据的技术。它是通过创建 provider 组件使用，通常还会创建一个 hook 以在子组件中使用该值。</p><p>从传递给 <code>createContext</code> 调用的值推断 context 提供的值的类型：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sni9s0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sni9s0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Theme</span> = <span class="hljs-string">&quot;light&quot;</span> | <span class="hljs-string">&quot;dark&quot;</span> | <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = createContext&lt;<span class="hljs-title class_">Theme</span>&gt;(<span class="hljs-string">&quot;system&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useGetTheme</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [theme, setTheme] = useState&lt;<span class="hljs-title class_">Theme</span>&gt;(<span class="hljs-string">&#x27;light&#x27;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useGetTheme</span>();<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前主题：&#123;theme&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101155923881.png" alt="image-20231101155923881" style="zoom:50%;" /><p>当你没有一个合理的默认值时，这种技术是有效的，而在这些情况下，<code>null</code> 作为默认值可能感觉是合理的。但是，为了让类型系统理解你的代码，你需要在 <code>createContext</code> 上显式设置 <code>ContextShape | null</code>。</p><p>这会导致一个问题，你需要在 context consumer 中消除 <code>| null</code> 的类型。我们建议让 hook 在运行时检查它的存在，并在不存在时抛出一个错误：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q28gaulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q28gaulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext, useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// 这是一个简单的示例，但你可以想象一个更复杂的对象</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ComplexObject</span> = &#123;<br>  <span class="hljs-attr">kind</span>: <span class="hljs-built_in">string</span><br>&#125;;<br><br><span class="hljs-comment">// 上下文在类型中创建为 `| null`，以准确反映默认值。</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Context</span> = createContext&lt;<span class="hljs-title class_">ComplexObject</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 这个 hook 会在运行时检查 context 是否存在，并在不存在时抛出一个错误。</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useGetComplexObject</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">object</span> = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">Context</span>);<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">object</span>) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;useGetComplexObject must be used within a Provider&quot;</span>) &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">object</span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">object</span> = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;complex&quot;</span> &#125;), []);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;object&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Context.Provider</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">object</span> = <span class="hljs-title function_">useGetComplexObject</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Current object: &#123;object.kind&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p><a href="http://localhost:3000/reference/react/useMemo"><code>useMemo</code></a> 会从函数调用中创建&#x2F;重新访问记忆化值，只有在第二个参数中传入的依赖项发生变化时，才会重新运行该函数。函数的类型是根据第一个参数中函数的返回值进行推断的，如果希望明确指定，可以为这个钩子提供一个类型参数以指定函数类型。</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y2p8sylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y2p8sylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 从 filterTodos 的返回值推断 visibleTodos 的类型</span><br><span class="hljs-keyword">const</span> visibleTodos = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">filterTodos</span>(todos, tab), <br></code></pre></td></tr></table></div></figure><hr><p><a href="http://localhost:3000/reference/react/useCallback"><code>useCallback</code></a> 会在第二个参数中传入的依赖项保持不变的情况下，为函数提供相同的引用。与 <code>useMemo</code> 类似，函数的类型是根据第一个参数中函数的返回值进行推断的，如果希望明确指定，可以为这个钩子提供一个类型参数以指定函数类型。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-093fcplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-093fcplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> handleClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;, [todos]);<br></code></pre></td></tr></table></div></figure><p>当在 TypeScript 严格模式下，使用 <code>useCallback</code> 需要为回调函数中的参数添加类型注解。这是因为回调函数的类型是根据函数的返回值进行推断的——如果没有参数，那么类型就不能完全理解。</p><p>根据自身的代码风格偏好，你可以使用 React 类型中的 <code>*EventHandler</code> 函数以在定义回调函数的同时为事件处理程序提供类型注解：</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-12zez2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-12zez2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useState, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Change me&quot;</span>);<br>  <span class="hljs-keyword">const</span> handleChange = useCallback&lt;<span class="hljs-title class_">React</span>.<span class="hljs-property">ChangeEventHandler</span>&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt;&gt;(<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">setValue</span>(event.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">value</span>);<br><br>  &#125;, [setValue])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>值： &#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>在 React 中处理 DOM 事件时，事件的类型通常可以从事件处理程序中推断出来。但是，当你想提取一个函数以传递给事件处理程序时，你需要明确设置事件的类型。</p><figure class="highlight tsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bwjc66lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bwjc66lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Change me&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">event: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) &#123;<br>    <span class="hljs-title function_">setValue</span>(event.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>值： &#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101170008390.png" alt="image-20231101170008390" style="zoom:50%;" /><p>描述组件的子元素有两种常见方法。第一种是使用 <code>React.ReactNode</code> 类型，这是可以在 JSX 中作为子元素传递的所有可能类型的并集：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-k0hue4lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-k0hue4lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ModalRendererProps</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactNode</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这是对子元素的一个非常宽泛的定义。第二种方法是使用 <code>React.ReactElement</code> 类型，它只包括 JSX 元素，而不包括 JavaScript 原始类型，如 string 或 number：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-92ldpnlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-92ldpnlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ModalRendererProps</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactElement</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>注意，你不能使用 TypeScript 来描述子元素是某种类型的 JSX 元素，所以你不能使用类型系统来描述一个只接受 <code>&lt;li&gt;</code> 子元素的组件。</p><p>当在 React 中使用内联样式时，你可以使用 <code>React.CSSProperties</code> 来描述传递给 <code>style</code> 属性的对象。这个类型是所有可能的 CSS 属性的并集，它能确保你传递给 <code>style</code> 属性的是有效的 CSS 属性，并且你能在编辑器中获得样式编码提示。</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9uc61ylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9uc61ylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyComponentProps</span> &#123;<br>  <span class="hljs-attr">style</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">CSSProperties</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="二-入门"><a href="#二-入门" class="headerlink" title="二.入门"></a>二.入门</h1><p>React 应用程序是由 组件 组成的。一个组件是 UI（用户界面）的一部分，它拥有自己的逻辑和外观。组件可以小到一个按钮，也可以大到整个页面。</p><p><mark>React 组件是返回标签的 JavaScript 函数</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pi6p2qlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pi6p2qlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>I&#x27;m a button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>至此，你已经声明了 <code>MyButton</code>，现在把它嵌套到另一个组件中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0d42yglqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0d42yglqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to my app<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">React 是常规的 JavaScript 函数，除了：<br />1. 它们的名字总是以大写字母开头。<br />2. 它们返回 JSX 标签。</p><p><mark>React 组件必须以大写字母开头，而 HTML 标签则必须是小写字母。</mark></p><p>所使用的标签语法被称为 <em>JSX</em>。</p><p>JSX 比 HTML 更加严格。你必须闭合标签，如 <code>&lt;br /&gt;</code>。你的组件也不能返回多个 JSX 标签。你必须将它们包裹到一个共享的父级中，比如 <code>&lt;div&gt;...&lt;/div&gt;</code> 或使用空的 <code>&lt;&gt;...&lt;/&gt;</code> 包裹：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-u61grtlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-u61grtlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AboutPage</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello there.<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>How do you do?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>可以使用 <code>className</code> 来指定一个 CSS 的 class。它与 HTML 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/class"><code>class</code></a> 属性的工作方式相同：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rd4h02lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rd4h02lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;img className=<span class="hljs-string">&quot;avatar&quot;</span> /&gt;<br></code></pre></td></tr></table></div></figure><p>React 并没有规定你如何添加 CSS 文件。最简单的方式是使用 HTML 的 <code>&lt;link&gt;</code> 标签。</p><p class="note note-warning" style="border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;">大括号是{}</p><p>JSX 会让你把标签放到 JavaScript 中。而大括号会让你 “回到” JavaScript 中，这样你就可以从你的代码中嵌入一些变量并展示给用户。例如，这将显示 <code>user.name</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ehqmxjlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ehqmxjlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    &#123;user.name&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>你还可以将 JSX 属性 “转义到 JavaScript”，但你必须使用大括号 而非 引号。例如，<code>className=&quot;avatar&quot;</code> 是将 <code>&quot;avatar&quot;</code> 字符串传递给 <code>className</code>，作为 CSS 的 class。但 <code>src=&#123;user.imageUrl&#125;</code> 会读取 JavaScript 的 <code>user.imageUrl</code> 变量，然后将该值作为 <code>src</code> 属性传递：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bl5eyclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bl5eyclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.imageUrl&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  /&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>你也可以把更为复杂的表达式放入 JSX 的大括号内，例如 <a href="https://javascript.info/operators#string-concatenation-with-binary">字符串拼接</a>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-j32b1glqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-j32b1glqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Hedy Lamarr&#x27;</span>,<br>  <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;https://i.imgur.com/yXOvdOSs.jpg&#x27;</span>,<br>  <span class="hljs-attr">imageSize</span>: <span class="hljs-number">90</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;user.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.imageUrl&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">Photo</span> <span class="hljs-attr">of</span> &#x27; + <span class="hljs-attr">user.name</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">width:</span> <span class="hljs-attr">user.imageSize</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">height:</span> <span class="hljs-attr">user.imageSize</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>style=&#123;&#123;&#125;&#125;</code> 并不是一个特殊的语法，而是 <code>style=&#123; &#125;</code> JSX 大括号内的一个普通 <code>&#123;&#125;</code> 对象。当你的样式依赖于 JavaScript 变量时，你可以使用 <code>style</code> 属性。</p><hr><p><mark>条件渲染</mark>：React 没有特殊的语法来编写条件语句，因此你使用的就是普通的 JavaScript 代码。例如使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else"><code>if</code></a> 语句根据条件引入 JSX：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8vt5uxlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8vt5uxlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> content;<br><br><span class="hljs-keyword">if</span> (isLoggedIn) &#123;<br>  content = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span></span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  content = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LoginForm</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &#123;content&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>如果你喜欢更为紧凑的代码，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">条件 <code>?</code> 运算符</a>。与 <code>if</code> 不同的是，它工作于 JSX 内部：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tjtxpslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tjtxpslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  &#123;isLoggedIn ? (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span><br>  ) : (<br>   <span class="hljs-tag">&lt;<span class="hljs-name">LoginForm</span> /&gt;</span><br>  )&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>当你不需要 <code>else</code> 分支时，你还可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation">逻辑 <code>&amp;&amp;</code> 语法</a>：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8guacwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8guacwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  &#123;isLoggedIn &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p><mark>渲染列表</mark>：例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for"><code>for</code> 循环</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">array 的 <code>map()</code> 函数</a> 来渲染组件列表。</p><p>假设你有一个产品数组：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-h5cci8lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-h5cci8lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> products = [<br><br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Cabbage&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br><br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Garlic&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br><br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;,<br><br>];<br></code></pre></td></tr></table></div></figure><p>在你的组件中，使用 <code>map()</code> 函数将这个数组转换为 <code>&lt;li&gt;</code> 标签构成的列表:</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3q6o7tlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3q6o7tlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ShoppingList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> listItems = products.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">product</span> =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color:</span> <span class="hljs-attr">product.isFruit</span> ? &#x27;<span class="hljs-attr">magenta</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">darkgreen</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;product.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p> <code>&lt;li&gt;</code> 有一个 <code>key</code> 属性。对于列表中的每一个元素，你都应该传递一个字符串或者数字给 <code>key</code>，用于在其兄弟节点中唯一标识该元素。</p><p>这些 key 会告诉 React，每个组件对应着数组里的哪一项，所以 React 可以把它们匹配起来。这在数组项进行移动（例如排序）、插入或删除等操作时非常重要。一个合适的 <code>key</code> 可以帮助 React 推断发生了什么，从而得以正确地更新 DOM 树。</p><p>用作 key 的值应该在数据中提前就准备好，而不是在运行时才随手生成。</p><hr><p><mark>响应事件</mark>：通过在组件中声明 事件处理 函数来响应事件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rrdhjllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rrdhjllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;You clicked me!&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Click me</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p class="note note-danger" style="border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;">onClick={handleClick} 的结尾没有小括号！不要 调用 事件处理函数：你只需 把函数传递给事件 即可。当用户点击按钮时 React 会调用你传递的事件处理函数。</p><hr><p><mark>更新界面</mark>：从 React 引入 <a href="http://localhost:3000/reference/react/useState"><code>useState</code></a>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-k7zn6plqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-k7zn6plqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>现在你可以在你的组件中声明一个 state 变量：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-oguljllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-oguljllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>你将从 <code>useState</code> 中获得两样东西：当前的 state（<code>count</code>），以及用于更新它的函数（<code>setCount</code>）。</p><p>第一次显示按钮时，<code>count</code> 的值为 <code>0</code>，因为你把 <code>0</code> 传给了 <code>useState()</code>。当你想改变 state 时，调用 <code>setCount()</code> 并将新的值传递给它。点击该按钮计数器将递增：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ryw16elqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ryw16elqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果你多次渲染同一个组件，每个组件都会拥有自己的 state。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fxkyn4lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fxkyn4lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update separately<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101143311372-1698820394429-1.png" alt="image-20231101143311372" style="zoom:50%;" /><p>每个按钮会 “记住” 自己的 <code>count</code>，而不影响其他按钮。</p><img src="image-20231101144402210.png" alt="image-20231101144402210" style="zoom:50%;" /><hr><p><mark>使用hook</mark>：以 <code>use</code> 开头的函数被称为 Hook。<code>useState</code> 是 React 提供的一个内置 Hook。Hook 比普通函数更为严格。你只能在你的组件（或其他 Hook）的 顶层 调用 Hook。如果你想在一个条件或循环中使用 <code>useState</code>，请提取一个新的组件并在组件内部使用它。</p><hr><p><mark>组件间共享数据</mark>：为了使得 <code>MyButton</code> 组件显示相同的 <code>count</code> 并一起更新，你需要将各个按钮的 state “向上” 移动到最接近包含所有按钮的组件之中。</p><img src="image-20231101144445700.png" alt="image-20231101144445700" style="zoom:50%;" /><p>此刻，当你点击任何一个按钮时，<code>MyApp</code> 中的 <code>count</code> 都将改变，同时会改变 <code>MyButton</code> 中的两个 count。</p><p>首先，将 <code>MyButton</code> 的 state 上移到 <code>MyApp</code> 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nbwfx6lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nbwfx6lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update separately<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ... we&#x27;re moving code from here ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>接着，将 <code>MyApp</code> 中的点击事件处理函数以及 state 一同向下传递到 每个 <code>MyButton</code> 中。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xdhravlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xdhravlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update together<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>使用这种方式传递的信息被称作 prop。此时 <code>MyApp</code> 组件包含了 <code>count</code> state 以及 <code>handleClick</code> 事件处理函数，并将它们作为 prop 传递给 了每个按钮。</p><p>最后，改变 <code>MyButton</code> 以 读取 从父组件传递来的 prop：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-z38w9glqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-z38w9glqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; count, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>当你点击按钮时，<code>onClick</code> 处理程序会启动。每个按钮的 <code>onClick</code> prop 会被设置为 <code>MyApp</code> 内的 <code>handleClick</code> 函数，所以函数内的代码会被执行。该代码会调用 <code>setCount(count + 1)</code>，使得 state 变量 <code>count</code> 递增。新的 <code>count</code> 值会被作为 prop 传递给每个按钮，因此它们每次展示的都是最新的值。这被称为“<mark>状态提升</mark>”。通过向上移动 state，我们实现了在组件间共享它。</p><p>完整代码：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s5310ylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s5310ylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update together<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; count, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231101145014997.png" alt="image-20231101145014997" style="zoom:50%;" /><h1 id="三-描述用户界面UI"><a href="#三-描述用户界面UI" class="headerlink" title="三.描述用户界面UI"></a>三.描述用户界面UI</h1><h2 id="1-第一个组件"><a href="#1-第一个组件" class="headerlink" title="1.第一个组件"></a>1.第一个组件</h2><p>React 应用是由被称为 组件 的独立 UI 片段构建而成。React 组件本质上是可以任意添加标签的 JavaScript 函数。组件可以小到一个按钮，也可以大到是整个页面。</p><p>React 允许你将标签、CSS 和 JavaScript 组合成自定义“组件”，即 应用程序中可复用的 UI 元素。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yqmj13lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yqmj13lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Amazing scientists<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>开源UI组件仓库：<a href="https://github.com/mui">https://github.com/mui</a></p><p>material-ui文档：<a href="https://mui.com/material-ui">https://mui.com/material-ui</a></p><p>React 组件是一段可以 使用标签进行扩展 的 JavaScript 函数。</p><p>构建组件的方法：</p><ol><li><p>导出组件： <code>export default</code> 前缀是一种 <a href="https://developer.mozilla.org/docs/web/javascript/reference/statements/export">JavaScript 标准语法</a>（非 React 的特性）。它允许你标签一个文件中的主要函数以便你以后可以从其他文件引入它。</p></li><li><p>定义函数： 使用 <code>function Profile() &#123; &#125;</code> 定义名为 <code>Profile</code> 的 JavaScript 函数。</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">React 组件是常规的 JavaScript 函数，但 组件的名称必须以大写字母开头，否则它们将无法运行！</p></li><li><p>添加标签：这个组件返回一个带有 <code>src</code> 和 <code>alt</code> 属性的 <code>&lt;img /&gt;</code> 标签。<code>&lt;img /&gt;</code> 写得像 HTML，但实际上是 JavaScript！这种语法被称为 <a href="http://localhost:3000/learn/writing-markup-with-jsx">JSX</a>，它允许你在 JavaScript 中嵌入使用标签。</p><p>返回语句可以全写在一行上，如下面组件中所示：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dyy88zlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dyy88zlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span></span>;<br></code></pre></td></tr></table></div></figure><p><mark>如果你的标签和 <code>return</code> 关键字不在同一行，则必须把它包裹在一对括号中</mark>，如下所示：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-caq3p2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-caq3p2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>没有括号包裹的话，任何在 <code>return</code> 下一行的代码都<a href="https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi">将被忽略</a>！</p></li></ol><p>现在你已经定义了 <code>Profile</code> 组件，你可以在其他组件中使用它。例如，你可以导出一个内部使用了多个 <code>Profile</code> 组件的 <code>Gallery</code> 组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-egtqrrlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-egtqrrlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>区别：</p><ul><li><code>&lt;section&gt;</code> 是小写的，所以 React 知道我们指的是 HTML 标签。</li><li><code>&lt;Profile /&gt;</code> 以大写 <code>P</code> 开头，所以 React 知道我们想要使用名为 <code>Profile</code> 的组件。</li></ul><p> <code>Profile</code> 包含更多的 HTML：<code>&lt;img /&gt;</code>。这是浏览器最后所看到的：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a9yb2clqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a9yb2clqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>因为 <code>Profile</code> 组件在 <code>Gallery</code> 组件中渲染——甚至好几次！——我们可以认为 <code>Gallery</code> 是一个 父组件，将每个 <code>Profile</code> 渲染为一个“孩子”。这是 React 的神奇之处：你可以只定义组件一次，然后按需多处和多次使用。</p><p>组件可以渲染其他组件，但是 请不要嵌套他们的定义：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-msljlplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-msljlplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 🔴 永远不要在组件中定义组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>上面这段代码 <a href="http://localhost:3000/learn/preserving-and-resetting-state#different-components-at-the-same-position-reset-state">非常慢，并且会导致 bug 产生</a>。因此，你应该在顶层定义每个组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0id17zlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0id17zlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br><br><span class="hljs-comment">// ✅ 在顶层声明组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>当子组件需要使用父组件的数据时，你需要 <a href="http://localhost:3000/learn/passing-props-to-a-component">通过 props 的形式进行传递</a>，而不是嵌套定义。</p><h2 id="2-组件的导入与导出"><a href="#2-组件的导入与导出" class="headerlink" title="2.组件的导入与导出"></a>2.组件的导入与导出</h2><p>对组件进行拆分：</p><ol><li><p>创建 一个新的 JS 文件来存放该组件。</p></li><li><p>导出 该文件中的函数组件（可以使用 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_the_default_export">默认导出</a> 或 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_named_exports">具名导出</a>）</p><ul><li><p>JavaScript 里两个主要用来导出值的方式：默认导出和具名导出。到目前为止，我们的示例中只用到了默认导出。但你可以在一个文件中，选择使用其中一种，或者两种都使用。</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">同一个文件里有且仅有一个默认导出，但是可以有任意多个 具名导出。</p><img src="image-20231103111403523.png" alt="image-20231103111403523" style="zoom:50%;" /><p>组件的导出方式决定了其导入方式。当你用默认导入的方式，导入具名导出的组件时，就会报错。如下表格可以帮你更好地理解它们：</p><table><thead><tr><th>语法</th><th>导出语句</th><th>导入语句</th></tr></thead><tbody><tr><td>默认</td><td><code>export default function Button() &#123;&#125;</code></td><td><code>import Button from &#39;./Button.js&#39;;</code></td></tr><tr><td>具名</td><td><code>export function Button() &#123;&#125;</code></td><td><code>import &#123; Button &#125; from &#39;./Button.js&#39;;</code></td></tr></tbody></table><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">当使用默认导入时，你可以在 `import` 语句后面进行任意命名。比如 `import Banana from './Button.js'`，如此你能获得与默认导出一致的内容。相反，对于具名导入，导入和导出的名字必须一致。这也是为什么称其为 具名 导入的原因！</p><p>通常，文件中仅包含一个组件时，人们会选择默认导出，而当文件中包含多个组件或某个值需要导出时，则会选择具名导出。 无论选择哪种方式，请记得给你的组件和相应的文件命名一个有意义的名字。我们不建议创建未命名的组件，比如 <code>export default () =&gt; &#123;&#125;</code>，因为这样会使得调试变得异常困难。</p></li></ul></li><li><p>在需要使用该组件的文件中 导入（可以根据相应的导出方式使用 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#importing_defaults">默认导入</a> 或 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#import_a_single_export_from_a_module">具名导入</a>）。</p></li></ol><p>这里将 <code>Profile</code> 组件和 <code>Gallery</code> 组件，从 <code>App.js</code> 文件中移动到了 <code>Gallery.js</code> 文件中。修改后，即可在 <code>App.js</code> 中导入 <code>Gallery.js</code> 中的 <code>Gallery</code> 组件：</p><p>App.js：无论是 .&#x2F;Gallery.js 还是 .&#x2F;Gallery，在 React 里都能正常使用，只是前者更符合 原生 ES 模块。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g0nyahlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g0nyahlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Gallery</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Gallery.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Gallery</span> /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Gallery.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x0rf5zlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x0rf5zlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/QIrZWGIs.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Alan L. Hart&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家们<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Gallery.js</p><ul><li>定义了 <code>Profile</code> 组件，该组件仅在该文件内使用，没有被导出。</li><li>使用 默认导出 的方式，将 <code>Gallery</code> 组件导出</li></ul><p>App.js</p><ul><li>使用 默认导入 的方式，从 <code>Gallery.js</code> 中导入 <code>Gallery</code> 组件。</li><li>使用 默认导出 的方式，将根组件 <code>App</code> 导出。</li></ul><h2 id="3-使用JSX书写标签语言"><a href="#3-使用JSX书写标签语言" class="headerlink" title="3.使用JSX书写标签语言"></a>3.使用JSX书写标签语言</h2><p>JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。</p><p>随着 Web 的交互性越来越强，逻辑越来越决定页面中的内容。JavaScript 负责 HTML 的内容！这也是为什么 在 React 中，渲染逻辑和标签共同存在于同一个地方——组件。</p><p>将一个按钮的渲染逻辑和标签放在一起可以确保它们在每次编辑时都能保持互相同步。反之，彼此无关的细节是互相隔离的，例如按钮的标签和侧边栏的标签。这样我们在修改其中任意一个组件时会更安全。</p><p>每个 React 组件都是一个 JavaScript 函数，它会返回一些标签，React 会将这些标签渲染到浏览器上。</p><p>JSX and React 是相互独立的 东西。但它们经常一起使用，但你 可以 单独使用它们中的任意一个，JSX 是一种语法扩展，而 React 则是一个 JavaScript 的库。</p><p>JSX 规则：</p><ol><li><p><mark>只能返回一个根元素</mark>：如果想要在一个组件中包含多个元素，需要用一个父标签把它们包裹起来。如果你不想在标签中增加一个额外的 <code>&lt;div&gt;</code>，可以用 <code>&lt;&gt;</code> 和 <code>&lt;/&gt;</code> 元素来代替。这个空标签被称作 *<a href="http://localhost:3000/reference/react/Fragment">Fragment</a>*。React Fragment 允许你将子元素分组，而不会在 HTML 结构中添加额外节点。</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">为什么多个 JSX 标签需要被一个父元素包裹：JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。</p></li><li><p><mark>标签必须正确闭合</mark>：像 <code>&lt;img&gt;</code> 这样的自闭合标签必须书写成 <code>&lt;img /&gt;</code>，而像 <code>&lt;li&gt;oranges</code> 这样只有开始标签的元素必须带有闭合标签，需要改为 <code>&lt;li&gt;oranges&lt;/li&gt;</code>。</p></li><li><p><mark>使用驼峰式命名法给大部分属性命名</mark>：JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在你自己的组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，<mark>变量名称不能包含 <code>-</code> 符号或者像 <code>class</code> 这样的保留字</mark>。</p></li></ol><p>  这就是为什么在 React 中，大部分 HTML 和 SVG 属性都用驼峰式命名法表示。例如，需要用 <code>strokeWidth</code> 代替 <code>stroke-width</code>。由于 <code>class</code> 是一个保留字，所以在 React 中需要用 <code>className</code> 来代替。这也是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/className">DOM 属性中的命名</a>:</p>  <figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wxgqwzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wxgqwzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span>   <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></div></figure><p> 你可以 <a href="http://localhost:3000/reference/react-dom/components/common">在 React DOM 元素中找到所有对应的属性</a>。</p><p>由于历史原因，<a href="https://developer.mozilla.org/docs/Web/Accessibility/ARIA"><code>aria-*</code></a> 和 <a href="https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes"><code>data-*</code></a> 属性是以带 <code>-</code> 符号的 HTML 格式书写的。</p><p>HTML→JSX转化器：<a href="https://transform.tools/html-to-jsx">https://transform.tools/html-to-jsx</a></p><h2 id="4-在-JSX-中通过大括号使用-JavaScript"><a href="#4-在-JSX-中通过大括号使用-JavaScript" class="headerlink" title="4.在 JSX 中通过大括号使用 JavaScript"></a>4.在 JSX 中通过大括号使用 JavaScript</h2><p>当你想把一个字符串属性传递给 JSX 时，把它放到单引号或双引号中：<code>src=&quot;https://i.imgur.com/7vQD0fPs.jpg&quot;</code></p><p>如果你想要动态地指定 <code>src</code> 或 <code>alt</code> 的值呢？你可以 用 <code>&#123;</code> 和 <code>&#125;</code> 替代 <code>&quot;</code> 和 <code>&quot;</code> 以使用 JavaScript 变量 ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bwnln6lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bwnln6lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> avatar = <span class="hljs-string">&#x27;https://i.imgur.com/7vQD0fPs.jpg&#x27;</span>;<br>  <span class="hljs-keyword">const</span> description = <span class="hljs-string">&#x27;Gregorio Y. Zara&#x27;</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;avatar&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;description&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><mark>大括号内的任何 JavaScript 表达式都能正常运行</mark>，包括像 <code>formatDate()</code> 这样的函数调用：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qfdyh3lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qfdyh3lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDate</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">DateTimeFormat</span>(<br>    <span class="hljs-string">&#x27;zh-CN&#x27;</span>,<br>    &#123; <span class="hljs-attr">weekday</span>: <span class="hljs-string">&#x27;long&#x27;</span> &#125;<br>  ).<span class="hljs-title function_">format</span>(date);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>To Do List for &#123;formatDate(today)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 JSX 中，只能在以下两种场景中使用大括号：</p><ol><li><mark>用作 JSX 标签内的文本</mark>：<code>&lt;h1&gt;&#123;name&#125;&#39;s To Do List&lt;/h1&gt;</code> 是有效的，但是 <code>&lt;&#123;tag&#125;&gt;Gregorio Y. Zara&#39;s To Do List&lt;/&#123;tag&#125;&gt;</code> 无效。</li><li><mark>用作紧跟在 <code>=</code> 符号后的 属性</mark>：<code>src=&#123;avatar&#125;</code> 会读取 <code>avatar</code> 变量，但是 <code>src=&quot;&#123;avatar&#125;&quot;</code> 只会传一个字符串 <code>&#123;avatar&#125;</code>。</li></ol><p><mark>双大括号</mark>：除了字符串、数字和其它 JavaScript 表达式，你甚至可以在 JSX 中传递对象。对象也用大括号表示，例如 <code>&#123; name: &quot;Hedy Lamarr&quot;, inventions: 5 &#125;</code>。因此，为了能在 JSX 中传递，你必须用另一对额外的大括号包裹对象：<code>person=&#123;&#123; name: "Hedy Lamarr", inventions: 5 &#125;&#125;</code>。</p><p>React 不要求你使用内联样式（使用 CSS 类就能满足大部分情况）。但是当你需要内联样式的时候，你可以给 <code>style</code> 属性传递一个对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0ae5kslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0ae5kslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              &#123;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">black</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">color:</span> &#x27;<span class="hljs-attr">pink</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          &#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Improve the videophone<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Prepare aeronautics lectures<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Work on the alcohol-fuelled engine<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>内联 <code>style</code> 属性 使用驼峰命名法编写。例如，HTML <code>&lt;ul style=&quot;background-color: black&quot;&gt;</code> 在你的组件里应该写成 <code>&lt;ul style=&#123;&#123; backgroundColor: 'black' &#125;&#125;&gt;</code>。</p><p>可以将多个表达式合并到一个对象中，在 JSX 的大括号内分别使用它们：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-86lnbvlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-86lnbvlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Gregorio Y. Zara&#x27;</span>,<br>  <span class="hljs-attr">theme</span>: &#123;<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;black&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;pink&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;person.theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;person.name&#125;&#x27;s Todos<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span>       <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span>     <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/7vQD0fPs.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Gregorio Y. Zara&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-将props传递给组件"><a href="#5-将props传递给组件" class="headerlink" title="5.将props传递给组件"></a>5.将props传递给组件</h2><p>React 组件使用 props 来互相通信。每个父组件都可以提供 props 给它的子组件，从而将一些信息传递给它。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hhs7mjlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hhs7mjlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/1bX5QH6.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Lin Lanying&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>向组件传递props：</p><ol><li><p><mark>将 props 传递给子组件</mark>：<code>person</code>（一个对象）和 <code>size</code>（一个数字）：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-82yblelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-82yblelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">name:</span> &#x27;<span class="hljs-attr">Lin</span> <span class="hljs-attr">Lanying</span>&#x27;, <span class="hljs-attr">imageId:</span> &#x27;<span class="hljs-attr">1bX5QH6</span>&#x27; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>在子组件中读取 props</mark>：在 <code>function Avatar</code> 之后直接列出它们的名字 <code>person, size</code> 来读取这些 props。这些 props 在 <code>(&#123;</code> 和 <code>&#125;)</code> 之间，并由逗号分隔。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ngz4i3lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ngz4i3lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br>  <span class="hljs-comment">// 在这里 person 和 size 是可访问的</span><br>&#125;<br></code></pre></td></tr></table></div></figure></li></ol><p>props 正是 组件的唯一参数！ React 组件函数接受一个参数，一个 <code>props</code> 对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2y3h6ylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2y3h6ylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">let</span> person = props.<span class="hljs-property">person</span>;<br>  <span class="hljs-keyword">let</span> size = props.<span class="hljs-property">size</span>;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>通常你不需要整个 <code>props</code> 对象，所以可以将它解构为单独的 props。&gt;凯瑟琳·约翰逊: 数学家</li></p><p>在声明 props 时， 不要忘记 <code>(</code> 和 <code>)</code> 之间的一对花括号 <code>&#123;</code> 和 <code>&#125;</code>  ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-69mzqvlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-69mzqvlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>这种语法被称为 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Unpacking_fields_from_objects_passed_as_a_function_parameter">“解构”</a>，等价于于从函数参数中读取属性：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-z146k6lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-z146k6lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-keyword">let</span> person = props.<span class="hljs-property">person</span>;<br>    <span class="hljs-keyword">let</span> size = props.<span class="hljs-property">size</span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果你想在没有指定值的情况下给 prop 一个默认值，你可以通过在参数后面写 <code>=</code> 和默认值来进行解构：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3f4cqalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3f4cqalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size = <span class="hljs-number">100</span> &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在， 如果 <code>&lt;Avatar person=&#123;...&#125; /&gt;</code> 渲染时没有 <code>size</code> prop，  <code>size</code> 将被赋值为 <code>100</code>。</p><p>默认值仅在缺少 <code>size</code> prop 或 <code>size=&#123;undefined&#125;</code> 时生效。 但是<mark>如果你传递了 <code>size=&#123;null&#125;</code> 或 <code>size=&#123;0&#125;</code>，默认值将不被使用。</mark></p><p>重复：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-oidf1ulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-oidf1ulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params">&#123; person, size, isSepia, thickBorder &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;person&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;size&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isSepia</span>=<span class="hljs-string">&#123;isSepia&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">thickBorder</span>=<span class="hljs-string">&#123;thickBorder&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>改为<mark>使用 JSX 展开语法传递 props</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ylgrzelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ylgrzelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这会将 <code>Profile</code> 的所有 props 转发到 <code>Avatar</code>，而不列出每个名字。</p><p>请克制地使用展开语法。 如果你在所有其他组件中都使用它，那就有问题了。 通常，它表示你应该拆分组件，并将子组件作为 JSX 传递。 </p><p><mark>将 JSX 作为子组件传递</mark>：当您将内容嵌套在 JSX 标签中时，父组件将在名为 <code>children</code> 的 prop 中接收到该内容。例如，下面的 <code>Card</code> 组件将接收一个被设为 <code>&lt;Avatar /&gt;</code> 的 <code>children</code> prop 并将其包裹在 div 中渲染。</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7p4gytlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7p4gytlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Avatar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Avatar.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Card</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;&#123;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name:</span> &#x27;<span class="hljs-attr">Katsuko</span> <span class="hljs-attr">Saruhashi</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">imageId:</span> &#x27;<span class="hljs-attr">YfeOqp2</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Avatar.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-20dgjwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-20dgjwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; getImageUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./utils.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;getImageUrl(person)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;person.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;size&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height</span>=<span class="hljs-string">&#123;size&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>utils.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-onik83lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-onik83lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getImageUrl</span>(<span class="hljs-params">person, size = <span class="hljs-string">&#x27;s&#x27;</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-string">&#x27;https://i.imgur.com/&#x27;</span> +<br>    person.<span class="hljs-property">imageId</span> +<br>    size +<br>    <span class="hljs-string">&#x27;.jpg&#x27;</span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>一个组件可能会随着时间的推移收到不同的 props。 Props 并不总是静态的！Props 反映了组件在任何时间点的数据，并不仅仅是在开始时。</p><p>props 是 <a href="https://en.wikipedia.org/wiki/Immutable_object">不可变的</a>（一个计算机科学术语，意思是“不可改变”）。当一个组件需要改变它的 props（例如，响应用户交互或新数据）时，它不得不“请求”它的父组件传递 不同的 props —— 一个新对象！它的旧 props 将被丢弃，最终 JavaScript 引擎将回收它们占用的内存。</p><p>不要尝试“更改 props”。 当你需要响应用户输入（例如更改所选颜色）时，你可以“设置 state”。</p><h2 id="6-条件渲染"><a href="#6-条件渲染" class="headerlink" title="6.条件渲染"></a>6.条件渲染</h2><p> React 中，你可以通过使用 JavaScript 的 <code>if</code> 语句、<code>&amp;&amp;</code> 和 <code>? :</code> 运算符【又称条件运算符，三目运算符】来选择性地渲染 JSX。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tdhyv5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tdhyv5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Item</span>(<span class="hljs-params">&#123; name, isPacked &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (isPacked) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125; ✔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">PackingList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Sally Ride 的行李清单<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;true&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;宇航服&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;true&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;带金箔的头盔&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isPacked</span>=<span class="hljs-string">&#123;false&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Tam 的照片&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231103154214180.png" alt="image-20231103154214180" style="zoom:50%;" /><p>条件运算符：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wh8v1glqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wh8v1glqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (isPacked) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125; ✔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ranl5ylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ranl5ylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;isPacked ? name + &#x27; ✔&#x27; : name&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>使用 <code>&amp;&amp;</code>，你也可以实现仅当 <code>isPacked</code> 为 <code>true</code> 时，渲染勾选符号。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2k5ky5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2k5ky5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;name&#125; &#123;isPacked &amp;&amp; &#x27;✔&#x27;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>当 <code>isPacked</code> 为真值时，则（<code>&amp;&amp;</code>）渲染勾选符号，否则，不渲染。</p><p>当 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND">JavaScript &amp;&amp; 表达式</a> 的左侧（我们的条件）为 <code>true</code> 时，它则返回其右侧的值（在我们的例子里是勾选符号）。但条件的结果是 <code>false</code>，则整个表达式会变成 <code>false</code>。在 JSX 里，React 会将 <code>false</code> 视为一个“空值”，就像 <code>null</code> 或者 <code>undefined</code>，这样 React 就不会在这里进行任何渲染。</p><p>切勿将数字放在 <code>&amp;&amp;</code> 左侧：<mark>JavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否</mark>。然而，如果左侧是 <code>0</code>，整个表达式将变成左侧的值（<code>0</code>），React 此时则会渲染 <code>0</code> 而不是不进行渲染。</p><p>例如，一个常见的错误是 <code>messageCount &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;</code>。其原本是想当 <code>messageCount</code> 为 0 的时候不进行渲染，但实际上却渲染了 <code>0</code>。</p><p>为了更正，可以将左侧的值改成布尔类型：<code>messageCount &gt; 0 &amp;&amp; &lt;p&gt;New messages&lt;/p&gt;</code>。</p><h2 id="7-渲染列表"><a href="#7-渲染列表" class="headerlink" title="7.渲染列表"></a>7.渲染列表</h2><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b5y1gjlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b5y1gjlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>凯瑟琳·约翰逊: 数学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>马里奥·莫利纳: 化学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>穆罕默德·阿卜杜勒·萨拉姆: 物理学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>珀西·莱温·朱利亚: 化学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苏布拉马尼扬·钱德拉塞卡: 天体物理学家<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-754k4wlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-754k4wlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> people = [<br>  <span class="hljs-string">&#x27;凯瑟琳·约翰逊: 数学家&#x27;</span>,<br>  <span class="hljs-string">&#x27;马里奥·莫利纳: 化学家&#x27;</span>,<br>  <span class="hljs-string">&#x27;穆罕默德·阿卜杜勒·萨拉姆: 物理学家&#x27;</span>,<br>  <span class="hljs-string">&#x27;珀西·莱温·朱利亚: 化学家&#x27;</span>,<br>  <span class="hljs-string">&#x27;苏布拉马尼扬·钱德拉塞卡: 天体物理学家&#x27;</span>,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> listItems = people.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;person&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>输出控制台错误：<code>Warning: Each child in a list should have a unique “key” prop.</code></p><p>解决方法：因为你必须给数组中的每一项都指定一个 <code>key</code>——它可以是字符串或数字的形式，只要能唯一标识出各个数组项就行：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v98s4nlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v98s4nlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;person.id&#125;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p><mark>直接放在 <code>map()</code> 方法里的 JSX 元素一般都需要指定 <code>key</code> 值！</mark></p><p>不同来源的数据往往对应不同的 key 值获取方式：</p><ul><li>来自数据库的数据： 如果你的数据是从数据库中获取的，那你可以直接使用数据表中的主键，因为它们天然具有唯一性。</li><li>本地产生数据： 如果你数据的产生和保存都在本地（例如笔记软件里的笔记），那么你可以使用一个自增计数器或者一个类似 <a href="https://www.npmjs.com/package/uuid"><code>uuid</code></a> 的库来生成 key。</li></ul><p>key 需要满足的条件：</p><ol><li>key 值在兄弟节点之间必须是唯一的。 不过不要求全局唯一，在不同的数组中可以使用相同的 key。</li><li>key 值不能改变，否则就失去了使用 key 的意义！所以千万不要在渲染时动态地生成 key。</li></ol><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">你可能会想直接把数组项的索引当作 key 值来用，实际上，如果你没有显式地指定 `key` 值，React 确实默认会这么做。但是数组项的顺序在插入、删除或者重新排序等操作中会发生改变，此时把索引顺序用作 key 值会产生一些微妙且令人困惑的 bug。<br />与之类似，请不要在运行过程中动态地产生 key，像是 `key={Math.random()}` 这种方式。这会导致每次重新渲染后的 key 值都不一样，从而使得所有的组件和 DOM 元素每次都要重新创建。这不仅会造成运行变慢的问题，更有可能导致用户输入的丢失。所以，使用能从给定数据中稳定取得的值才是明智的选择。<p>有一点需要注意，组件不会把 <code>key</code> 当作 props 的一部分。Key 的存在只对 React 本身起到提示作用。如果你的组件需要一个 ID，那么请把它作为一个单独的 prop 传给组件： <code>&lt;Profile key=&#123;id&#125; userId=&#123;id&#125; /&gt;</code>。</p></p><hr><p>data.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7oo6sflqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7oo6sflqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> people = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;凯瑟琳·约翰逊&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;数学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;太空飞行相关数值的核算&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;MK3eW3A&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;马里奥·莫利纳&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;化学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;北极臭氧空洞的发现&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;mynHUSa&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;穆罕默德·阿卜杜勒·萨拉姆&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;物理学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;关于基本粒子间弱相互作用和电磁相互作用的统一理论&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;bE7W1ji&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;珀西·莱温·朱利亚&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;化学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;开创性的可的松药物、类固醇和避孕药的研究&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;IOjWm71&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;苏布拉马尼扬·钱德拉塞卡&#x27;</span>,<br>    <span class="hljs-attr">profession</span>: <span class="hljs-string">&#x27;天体物理学家&#x27;</span>,<br>    <span class="hljs-attr">accomplishment</span>: <span class="hljs-string">&#x27;白矮星质量计算&#x27;</span>,<br>    <span class="hljs-attr">imageId</span>: <span class="hljs-string">&#x27;lrWQx8l&#x27;</span>,<br>  &#125;,<br>];<br></code></pre></td></tr></table></div></figure><p>utils.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8tpye0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8tpye0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getImageUrl</span>(<span class="hljs-params">person</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-string">&#x27;https://i.imgur.com/&#x27;</span> +<br>    person.<span class="hljs-property">imageId</span> +<br>    <span class="hljs-string">&#x27;s.jpg&#x27;</span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nitpkclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nitpkclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; people &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getImageUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./utils.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> chemists = people.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>    person.<span class="hljs-property">profession</span> === <span class="hljs-string">&#x27;化学家&#x27;</span><br>  );<br>  <span class="hljs-keyword">const</span> listItems = chemists.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;getImageUrl(person)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;person.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;person.name&#125;:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="language-xml">        &#123;&#x27; &#x27; + person.profession + &#x27; &#x27;&#125;</span><br><span class="language-xml">        因&#123;person.accomplishment&#125;而闻名世界</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>控制台错误：<code>Warning: Each child in a list should have a unique &quot;key&quot; prop. Check the render method of List. See https://reactjs.org/link/warning-keys for more information.    at li    at List</code></p><p><mark>因为箭头函数会隐式地返回位于 <code>=&gt;</code> 之后的表达式，所以你可以省略 <code>return</code> 语句。</mark></p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cchia2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cchia2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> listItems = chemists.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span> <span class="hljs-comment">// 隐式地返回！</span><br>);<br></code></pre></td></tr></table></div></figure><p><mark>如果你的 <code>=&gt;</code> 后面跟了一对花括号 <code>&#123;</code> ，那你必须使用 <code>return</code> 来指定返回值！</mark></p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-c0ld9ilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-c0ld9ilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> listItems = chemists.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>箭头函数 <code>=&gt; &#123;</code> 后面的部分被称为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body">“块函数体”</a>，块函数体支持多行代码的写法，但要用 <code>return</code> 语句才能指定返回值。假如你忘了写 <code>return</code>，那这个函数什么都不会返回！</p><p>为每个列表项显示多个 DOM 节点：Fragment 语法的简写形式 <code>&lt;&gt; &lt;/&gt;</code> 无法接受 key 值，所以你只能要么把生成的节点用一个 <code>&lt;div&gt;</code> 标签包裹起来，要么使用长一点但更明确的 <code>&lt;Fragment&gt;</code> 写法：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t4d8e0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t4d8e0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Fragment</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> listItems = people.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">person</span> =&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;person.id&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;person.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;person.bio&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></div></figure><p>这里的 Fragment 标签本身并不会出现在 DOM 上，这串代码最终会转换成 <code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>…… 的列表。</p><h2 id="8-保持组件纯粹"><a href="#8-保持组件纯粹" class="headerlink" title="8.保持组件纯粹"></a>8.保持组件纯粹</h2><p>部分 JavaScript 函数是 纯粹 的，这类函数通常被称为纯函数。纯函数仅执行计算操作，不做其他操作。你可以通过将组件按纯函数严格编写，以避免一些随着代码库的增长而出现的、令人困扰的 bug 以及不可预测的行为。</p><p>纯函数的特征：</p><ul><li>只负责自己的任务。它不会更改在该函数调用前就已存在的对象或变量。</li><li>输入相同，则输出相同。给定相同的输入，纯函数应总是返回相同的结果。</li></ul><p>React 假设你编写的所有组件都是纯函数。也就是说，对于相同的输入，你所编写的 React 组件必须总是返回相同的 JSX。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5gnh69lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5gnh69lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Recipe</span>(<span class="hljs-params">&#123; drinkers &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>    </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Boil &#123;drinkers&#125; cups of water.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Add &#123;drinkers&#125; spoons of tea and &#123;0.5 * drinkers&#125; spoons of spice.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Add &#123;0.5 * drinkers&#125; cups of milk to boil and sugar to taste.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Spiced Chai Recipe<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>For two<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Recipe</span> <span class="hljs-attr">drinkers</span>=<span class="hljs-string">&#123;2&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>For a gathering<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Recipe</span> <span class="hljs-attr">drinkers</span>=<span class="hljs-string">&#123;4&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>React 的渲染过程必须自始至终是纯粹的。组件应该只 返回 它们的 JSX，而不 改变 在渲染前，就已存在的任何对象或变量 — 这将会使它们变得不纯粹！</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x2l8t6lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x2l8t6lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> guest = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params"></span>) &#123;<br>  guest = guest + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaSet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p> <a href="http://localhost:3000/learn/passing-props-to-a-component">将 <code>guest</code> 作为 prop 传入</a> 来修复此组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1a15n1lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1a15n1lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params">&#123; guest &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaSet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;1&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;2&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;3&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 React 中，你可以在渲染时读取三种输入：<a href="http://localhost:3000/learn/passing-props-to-a-component">props</a>，<a href="http://localhost:3000/learn/state-a-components-memory">state</a> 和 <a href="http://localhost:3000/learn/passing-data-deeply-with-context">context</a>。你应该始终将这些输入视为只读。</p><p>当你想根据用户输入更改某些内容时，你应该 <a href="http://localhost:3000/learn/state-a-components-memory">设置state</a>，而不是直接写入变量。当你的组件正在渲染时，你永远不应该改变预先存在的变量或对象。</p><p>React 提供了 “严格模式”，在严格模式下开发时，它将会调用每个组件函数两次。通过重复调用组件函数，严格模式有助于找到违反这些规则的组件。</p><p>严格模式在生产环境下不生效，因此它不会降低应用程序的速度。如需引入严格模式，你可以用 <code>&lt;React.StrictMode&gt;</code> 包裹根组件。一些框架会默认这样做。</p><hr><p>&#x3D;&#x3D;突变&#x3D;&#x3D;mutation：在渲染过程中，组件改变了 预先存在的 变量的值 。纯函数不会改变函数作用域外的变量、或在函数调用前创建的对象——这会使函数变得不纯粹！</p><p>但是，你完全可以在渲染时更改你刚刚创建的变量和对象。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t02addlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t02addlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params">&#123; guest &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaGathering</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> cups = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++) &#123;<br>    cups.<span class="hljs-title function_">push</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span> <span class="hljs-attr">guest</span>=<span class="hljs-string">&#123;i&#125;</span> /&gt;</span></span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> cups;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果 <code>cups</code> 变量或 <code>[]</code> 数组是在 <code>TeaGathering</code> 函数之外创建的，这将是一个很大的问题！因为如果那样的话，当你调用数组的 push 方法时，就会更改 预先存在的 对象。</p><p>但是，这里不会有影响，因为每次渲染时，你都是在 <code>TeaGathering</code> 函数内部创建的它们。TeaGathering 之外的代码并不会知道发生了什么即局部mutation。</p><p> 副作用：更新屏幕、启动动画、更改数据等。它们是 “额外” 发生的事情，与渲染过程无关。</p><p>在 React 中，副作用通常属于 <a href="http://localhost:3000/learn/responding-to-events">事件处理程序</a>。事件处理程序是 React 在你执行某些操作（如单击按钮）时运行的函数。即使事件处理程序是在你的组件 内部 定义的，它们也不会在渲染期间运行！ 因此事件处理程序无需是纯函数。</p><p>如果你用尽一切办法，仍无法为副作用找到合适的事件处理程序，你还可以调用组件中的 <a href="http://localhost:3000/reference/react/useEffect"><code>useEffect</code></a> 方法将其附加到返回的 JSX 中。这会告诉 React 在渲染结束后执行它。然而，这种方法应该是你最后的手段。</p><p>React 为何侧重于纯函数：</p><ol><li>你的组件可以在不同的环境下运行 — 例如，在服务器上！由于它们针对相同的输入，总是返回相同的结果，因此一个组件可以满足多个用户请求。</li><li>你可以为那些输入未更改的组件来 <a href="http://localhost:3000/reference/react/memo">跳过渲染</a>，以提高性能。这是安全的做法，因为纯函数总是返回相同的结果，所以可以安全地缓存它们。</li><li>如果在渲染深层组件树的过程中，某些数据发生了变化，React 可以重新开始渲染，而不会浪费时间完成过时的渲染。纯粹性使得它随时可以安全地停止计算。</li></ol><p>我们正在构建的每个 React 新特性都利用到了纯函数。从数据获取到动画再到性能，保持组件的纯粹可以充分释放 React 范式的能力。</p><h2 id="9-将UI视为树"><a href="#9-将UI视为树" class="headerlink" title="9.将UI视为树"></a>9.将UI视为树</h2><p>React 创建的 UI 树是由渲染过的组件构成的，被称为渲染树。</p><p>渲染树表示 React 应用程序的单个渲染过程。在 <a href="http://localhost:3000/learn/conditional-rendering">条件渲染</a> 中，父组件可以根据传递的数据渲染不同的子组件。每次渲染过程的渲染树可能都不同。</p><p>在 React 应用程序中，可以使用树来建模的另一个关系是应用程序的模块依赖关系。当 <a href="http://localhost:3000/learn/importing-and-exporting-components#exporting-and-importing-a-component">拆分组件</a> 和逻辑到不同的文件中时，就创建了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">JavaScript 模块</a>，在这些模块中可以导出组件、函数或常量。</p><p>模块依赖树中的每个节点都是一个模块，每个分支代表该模块中的 <code>import</code> 语句。</p><p>渲染树：</p><img src="image-20231103171110755.png" alt="image-20231103171110755" style="zoom:50%;" /><p>模块依赖树：</p><img src="image-20231103171127909.png" alt="image-20231103171127909" style="zoom:50%;" /><p>依赖树对于确定运行 React 应用程序所需的模块非常有用。在为生产环境构建 React 应用程序时，通常会有一个构建步骤，该步骤将捆绑所有必要的 JavaScript 以供客户端使用。负责此操作的工具称为 <a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview#the_modern_tooling_ecosystem">bundler（捆绑器）</a>，并且 bundler 将使用依赖树来确定应包含哪些模块。</p><p>随着应用程序的增长，捆绑包大小通常也会增加。大型捆绑包大小对于客户端来说下载和运行成本高昂，并延迟 UI 绘制的时间。了解应用程序的依赖树可能有助于调试这些问题。</p><h1 id="四-添加交互"><a href="#四-添加交互" class="headerlink" title="四.添加交互"></a>四.添加交互</h1><p>在 React 中，随时间变化的数据被称为状态state。你可以向任何组件添加状态，并按需进行更新。</p><h2 id="1-响应事件"><a href="#1-响应事件" class="headerlink" title="1.响应事件"></a>1.响应事件</h2><p>React 允许你向 JSX 中添加事件处理程序。</p><p><code>&lt;button&gt;</code> 等内置组件只支持内置浏览器事件，如 <code>onClick</code>。可以定义 <code>handleClick</code> 函数然后 <a href="http://localhost:3000/learn/passing-props-to-a-component">将其作为 prop 传入</a> <code>&lt;button&gt;</code>。其中 <code>handleClick</code> 是一个 事件处理函数 。<mark>事件处理函数</mark>有如下特点:</p><ul><li>通常在你的组件 内部 定义。</li><li>名称以 <code>handle</code> 开头，后跟事件名称。</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y2f7jdlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y2f7jdlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      点我</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>或者，你也可以在 JSX 中定义一个内联的事件处理函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xpvzqolqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xpvzqolqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>);<br>&#125;&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>或者，直接使用更为简洁箭头函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7u8w79lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7u8w79lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>);<br>&#125;&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>传递给事件处理函数的函数应直接传递，而非调用。例如：</p><table><thead><tr><th>传递一个函数（正确）</th><th>调用一个函数（错误）</th></tr></thead><tbody><tr><td><code>&lt;button onClick=&#123;handleClick&#125;&gt;</code></td><td><code>&lt;button onClick=&#123;handleClick()&#125;&gt;</code></td></tr></tbody></table><p>区别很微妙。在第一个示例中，<code>handleClick</code> 函数作为 <code>onClick</code> 事件处理函数传递。这会让 React 记住它，并且只在用户点击按钮时调用你的函数。</p><p>在第二个示例中，<code>handleClick()</code> 中最后的 <code>()</code> 会在 <a href="http://localhost:3000/learn/render-and-commit">渲染</a> 过程中 立即 触发函数，即使没有任何点击。这是因为在 <a href="http://localhost:3000/learn/javascript-in-jsx-with-curly-braces">JSX <code>&#123;</code> 和 <code>&#125;</code></a> 之间的 JavaScript 会立即执行。</p><p>当你编写内联代码时，同样的陷阱可能会以不同的方式出现：</p><table><thead><tr><th>传递一个函数（正确）</th><th>调用一个函数（错误）</th></tr></thead><tbody><tr><td><code>&lt;button onClick=&#123;() =&gt; alert(&#39;...&#39;)&#125;&gt;</code></td><td><code>&lt;button onClick=&#123;alert(&#39;...&#39;)&#125;&gt;</code></td></tr></tbody></table><p>如果按如下方式传递内联代码，并不会在点击时触发，而是会在每次组件渲染时触发：这个 alert 在组件渲染时触发，而不是点击时触发！</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nwirjclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nwirjclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;alert(</span>&#x27;<span class="hljs-attr">你点击了我</span>！&#x27;)&#125;&gt;</span><br></code></pre></td></tr></table></div></figure><p>如果你想要定义内联事件处理函数，请将其包装在匿名函数中，如下所示：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f8vhallqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f8vhallqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;你点击了我！&#x27;)&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>这里创建了一个稍后调用的函数，而不会在每次渲染时执行其内部代码。</p><p>在这两种情况下，你都应该传递一个函数：</p><ul><li><code>&lt;button onClick=&#123;handleClick&#125;&gt;</code> 传递了 <code>handleClick</code> 函数。</li><li><code>&lt;button onClick=&#123;() =&gt; alert(&#39;...&#39;)&#125;&gt;</code> 传递了 <code>() =&gt; alert(&#39;...&#39;)</code> 函数。</li></ul><p>由于事件处理函数声明于组件内部，因此它们可以直接访问组件的 props：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ufkmnjlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ufkmnjlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AlertButton</span>(<span class="hljs-params">&#123; message, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(message)&#125;&gt;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AlertButton</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&quot;正在播放！&quot;</span>&gt;</span></span><br><span class="language-xml">        播放电影</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">AlertButton</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AlertButton</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&quot;正在上传！&quot;</span>&gt;</span></span><br><span class="language-xml">        上传图片</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">AlertButton</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>通常，我们会在父组件中定义子组件的事件处理函数。比如：置于不同位置的 <code>Button</code> 组件，可能最终执行的功能也不同。</p><p>为此，将组件从父组件接收的 prop 作为事件处理函数传递：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tghq14lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tghq14lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">PlayButton</span>(<span class="hljs-params">&#123; movieName &#125;</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePlayClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`正在播放 <span class="hljs-subst">$&#123;movieName&#125;</span>！`</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handlePlayClick&#125;</span>&gt;</span></span><br><span class="language-xml">      播放 &quot;&#123;movieName&#125;&quot;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">UploadButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在上传！&#x27;)&#125;&gt;</span><br><span class="language-xml">      上传图片</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">PlayButton</span> <span class="hljs-attr">movieName</span>=<span class="hljs-string">&quot;魔女宅急便&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">UploadButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>Toolbar</code> 组件渲染了一个 <code>PlayButton</code> 组件和 <code>UploadButton</code> 组件：</p><ul><li><code>PlayButton</code> 将 <code>handlePlayClick</code> 作为 <code>onClick</code> prop 传入 <code>Button</code> 组件内部。</li><li><code>UploadButton</code> 将 <code>() =&gt; alert(&#39;正在上传！&#39;)</code> 作为 <code>onClick</code> prop 传入 <code>Button</code> 组件内部。</li></ul><p>内置组件（<code>&lt;button&gt;</code> 和 <code>&lt;div&gt;</code>）仅支持 <a href="http://localhost:3000/reference/react-dom/components/common#common-props">浏览器事件名称</a>，例如 <code>onClick</code>。但是，当你构建自己的组件时，你可以按你个人喜好命名事件处理函数的 prop。</p><p><mark>按照惯例，事件处理函数 props 应该以 <code>on</code> 开头，后跟一个大写字母。</mark></p><p>例如，<code>Button</code> 组件的 <code>onClick</code> prop 本来也可以被命名为 <code>onSmash</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6hmgq4lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6hmgq4lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onSmash, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onSmash&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onSmash</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在播放！&#x27;)&#125;&gt;</span><br><span class="language-xml">        播放电影</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onSmash</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在上传！&#x27;)&#125;&gt;</span><br><span class="language-xml">        上传图片</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>&lt;button onClick=&#123;onSmash&#125;&gt;</code> 代表浏览器内置的 <code>&lt;button&gt;</code>（小写）仍然需要使用 <code>onClick</code> prop，而自定义的 <code>Button</code> 组件接收到的 prop 名称可由你决定！</p><p><mark>确保为事件处理程序使用适当的 HTML 标签。例如，要处理点击事件，请使用 <code>&lt;div onClick=&#123;handleClick&#125;&gt;</code>。使用真正的浏览器 <code>&lt;button&gt;</code> 启用内置的浏览器行为，如键盘导航。</mark></p><p>事件处理函数还将捕获任何来自子组件的事件。</p><p><mark>事件传播</mark>：事件会沿着树向上“冒泡”或“传播”：它从事件发生的地方开始，然后沿着树向上传播。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xdiehwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xdiehwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Toolbar&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      alert(&#x27;你点击了 toolbar ！&#x27;);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在播放！&#x27;)&#125;&gt;</span><br><span class="language-xml">        播放电影</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在上传！&#x27;)&#125;&gt;</span><br><span class="language-xml">        上传图片</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="事件传播.gif" alt="事件传播" style="zoom:50%;" /><p>如果你点击任一按钮，它自身的 <code>onClick</code> 将首先执行，然后父级 <code>&lt;div&gt;</code> 的 <code>onClick</code> 会接着执行。因此会出现两条消息。如果你点击 toolbar 本身，将只有父级 <code>&lt;div&gt;</code> 的 <code>onClick</code> 会执行。</p><p>在 React 中所有事件都会传播，除了 <code>onScroll</code>，它仅适用于你附加到的 JSX 标签。</p><p><mark>阻止传播</mark>：事件处理函数接收一个 事件对象 作为唯一的参数。按照惯例，它通常被称为 <code>e</code> ，代表 “event”（事件）。你可以使用此对象来读取有关事件的信息。</p><p>这个事件对象还允许你阻止传播。如果你想阻止一个事件到达父组件，你需要像下面 <code>Button</code> 组件那样调用 <code>e.stopPropagation()</code> ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yio9aklqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yio9aklqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">      e.stopPropagation();</span><br><span class="language-xml">      onClick();</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Toolbar&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      alert(&#x27;你点击了 toolbar ！&#x27;);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在播放！&#x27;)&#125;&gt;</span><br><span class="language-xml">        播放电影</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;正在上传！&#x27;)&#125;&gt;</span><br><span class="language-xml">        上传图片</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>当你点击按钮时：</p><ol><li><p>React 调用了传递给 <code>&lt;button&gt;</code> 的 <code>onClick</code> 处理函数。</p></li><li><p>定义在Button中的处理函数执行了如下操作：</p><ul><li>调用 <code>e.stopPropagation()</code>，阻止事件进一步冒泡。</li><li>调用 <code>onClick</code> 函数，它是从 <code>Toolbar</code> 组件传递过来的 prop。</li></ul></li><li><p>在 <code>Toolbar</code> 组件中定义的函数，显示按钮对应的 alert。</p></li><li><p>由于传播被阻止，父级 <code>&lt;div&gt;</code> 的 <code>onClick</code> 处理函数不会执行。</p></li></ol><p>由于调用了 <code>e.stopPropagation()</code>，点击按钮现在将只显示一个 alert（来自 <code>&lt;button&gt;</code>），而并非两个（分别来自 <code>&lt;button&gt;</code> 和父级 toolbar <code>&lt;div&gt;</code>）。</p><hr><p><mark>捕获阶段事件</mark>：极少数情况下，你可能需要捕获子元素上的所有事件，即便它们阻止了传播。例如，你可能想对每次点击进行埋点记录，传播逻辑暂且不论。那么你可以通过在事件名称末尾添加 <code>Capture</code> 来实现这一点：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fauga0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fauga0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClickCapture</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123; /* 这会首先执行 */ &#125;&#125;&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> e.stopPropagation()&#125; /&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> e.stopPropagation()&#125; /&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>每个事件分三个阶段传播：</p><ol><li>它向下传播，调用所有的 <code>onClickCapture</code> 处理函数。</li><li>它执行被点击元素的 <code>onClick</code> 处理函数。</li><li>它向上传播，调用所有的 <code>onClick</code> 处理函数。</li></ol><p>捕获事件对于路由或数据分析之类的代码很有用，但你可能不会在应用程序代码中使用它们。</p><hr><p><mark>传递处理函数作为事件传播的替代方案</mark>：注意，此处的点击事件处理函数先执行了一行代码，然后调用了父组件传递的 <code>onClick</code> prop：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jv7v9slqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jv7v9slqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">      e.stopPropagation();</span><br><span class="language-xml">      onClick();</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>你也可以在调用父元素 <code>onClick</code> 函数之前，向这个处理函数添加更多代码。此模式是事件传播的另一种 替代方案 。它让子组件处理事件，同时也让父组件指定一些额外的行为。与事件传播不同，它并非自动。但使用这种模式的好处是你可以清楚地追踪因某个事件的触发而执行的整条代码链。</p><p>如果你依赖于事件传播，而且很难追踪哪些处理程序在执行，及其执行的原因，可以尝试这种方法。</p><hr><p>某些浏览器事件具有与事件相关联的默认行为。例如，点击 <code>&lt;form&gt;</code> 表单内部的按钮会触发表单提交事件，<mark>默认情况下将重新加载整个页面</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-setjbilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-setjbilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Signup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;提交表单！&#x27;)&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="默认行为.gif" alt="默认行为" style="zoom:50%;" /><p>可以调用事件对象中的 <code>e.preventDefault()</code> 来阻止这种情况发生：页面不会重新加载。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yx2puolqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yx2puolqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Signup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">      e.preventDefault();</span><br><span class="language-xml">      alert(&#x27;提交表单！&#x27;);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>区别：</p><ul><li><a href="https://developer.mozilla.org/docs/Web/API/Event/stopPropagation"><code>e.stopPropagation()</code></a> 阻止触发绑定在外层标签上的事件处理函数。</li><li><a href="https://developer.mozilla.org/docs/Web/API/Event/preventDefault"><code>e.preventDefault()</code></a> 阻止少数事件的默认浏览器行为。</li></ul><p>事件处理函数是执行副作用的最佳位置。</p><p>与渲染函数不同，事件处理函数不需要是 <a href="http://localhost:3000/learn/keeping-components-pure">纯函数</a>，因此它是用来 <em>更改</em> 某些值的绝佳位置。例如，更改输入框的值以响应键入，或者更改列表以响应按钮的触发。但是，为了更改某些信息，你首先需要某种方式存储它。在 React 中，这是通过 <a href="http://localhost:3000/learn/state-a-components-memory">state（组件的记忆）</a> 来完成的。</p><h2 id="2-State：组件的记忆"><a href="#2-State：组件的记忆" class="headerlink" title="2.State：组件的记忆"></a>2.State：组件的记忆</h2><p>可以用 <a href="http://localhost:3000/reference/react/useState"><code>useState</code></a> Hook 为组件添加状态。<em>Hook</em> 是能让你的组件使用 React 功能的特殊函数（状态是这些功能之一），只在 React <a href="http://localhost:3000/learn/render-and-commit#step-1-trigger-a-render">渲染</a>时有效。它们能让你 “hook” 到不同的 React 特性中去。<code>useState</code> Hook 让你声明一个状态变量。它接收初始状态并返回一对值：当前状态，以及一个让你更新状态的设置函数。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ey8x1glqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ey8x1glqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">const</span> [showMore, setShowMore] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></div></figure><p>Hooks ——以 <code>use</code> 开头的函数——只能在组件或<a href="http://localhost:3000/learn/reusing-logic-with-custom-hooks">自定义 Hook</a> 的最顶层调用。 你不能在条件语句、循环语句或其他嵌套函数内调用 Hook。Hook 是函数，但将它们视为关于组件需求的无条件声明会很有帮助。在组件顶部 “use” React 特性，类似于在文件顶部“导入”模块。</p><p>点击 “Next” 按钮应该显示下一个雕塑并将 <code>index</code> 更改为 <code>1</code>，再次点击又更改为 <code>2</code>，以此类推。但这个组件现在不起作用：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-c1puj7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-c1puj7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; sculptureList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    index = index + <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> sculpture = sculptureList[index];<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;sculpture.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> </span><br><span class="language-xml">        by &#123;sculpture.artist&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  </span><br><span class="language-xml">        (&#123;index + 1&#125; of &#123;sculptureList.length&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;sculpture.url&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;sculpture.alt&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#123;sculpture.description&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>handleClick()</code> 事件处理函数正在更新局部变量 <code>index</code>。但存在两个原因使得变化不可见：</p><ol><li>局部变量无法在多次渲染中持久保存。 当 React 再次渲染这个组件时，它会从头开始渲染——不会考虑之前对局部变量的任何更改。</li><li>更改局部变量不会触发渲染。 React 没有意识到它需要使用新数据再次渲染组件。</li></ol><p>要使用新数据更新组件，需要做两件事：</p><ol><li>保留 渲染之间的数据。</li><li>触发 React 使用新数据渲染组件（重新渲染）。</li></ol><p><a href="http://localhost:3000/reference/react/useState"><code>useState</code></a> Hook 提供了这两个功能：</p><ol><li>State 变量 用于保存渲染间的数据。</li><li>State setter 函数 更新变量并触发 React 再次渲染组件。</li></ol><p>要添加 state 变量，先从文件顶部的 React 中导入 <code>useState</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9ggw65lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9ggw65lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>然后，替换这一行：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q9aaaalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q9aaaalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></div></figure><p>将其修改为</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-br3ylslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-br3ylslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p><code>index</code> 是一个 state 变量，<code>setIndex</code> 是对应的 setter 函数。</p><p>这里的 <code>[</code> 和 <code>]</code> 语法称为<a href="http://localhost:3000/learn/a-javascript-refresher#array-destructuring">数组解构</a>，它允许你从数组中读取值。 <code>useState</code> 返回的数组总是正好有两项。</p><p>以下展示了它们在 <code>handleClick()</code> 中是如何共同起作用的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7cm9dflqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7cm9dflqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在点击 “Next” 按钮切换当前雕塑：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hxxmedlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hxxmedlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; sculptureList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> sculpture = sculptureList[index];<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;sculpture.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> </span><br><span class="language-xml">        by &#123;sculpture.artist&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  </span><br><span class="language-xml">        (&#123;index + 1&#125; of &#123;sculptureList.length&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;sculpture.url&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;sculpture.alt&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#123;sculpture.description&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>useState</code> 的唯一参数是 state 变量的初始值。在这个例子中，<code>index</code> 的初始值被<code>useState(0)</code>设置为 <code>0</code>。</p><p>每次你的组件渲染时，<code>useState</code> 都会给你一个包含两个值的数组：</p><ol><li>state 变量 (<code>index</code>) 会保存上次渲染的值。</li><li>state setter 函数 (<code>setIndex</code>) 可以更新 state 变量并触发 React 重新渲染组件。</li></ol><p>以下是实际发生的情况：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-k6cvholqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-k6cvholqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><ol><li>组件进行第一次渲染。 因为你将 <code>0</code> 作为 <code>index</code> 的初始值传递给 <code>useState</code>，它将返回 <code>[0, setIndex]</code>。 React 记住 <code>0</code> 是最新的 state 值。</li><li>你更新了 state。当用户点击按钮时，它会调用 <code>setIndex(index + 1)</code>。 <code>index</code> 是 <code>0</code>，所以它是 <code>setIndex(1)</code>。这告诉 React 现在记住 <code>index</code> 是 <code>1</code> 并触发下一次渲染。</li><li>组件进行第二次渲染。React 仍然看到 <code>useState(0)</code>，但是因为 React <em>记住</em> 了你将 <code>index</code> 设置为了 <code>1</code>，它将返回 <code>[1, setIndex]</code>。</li><li>以此类推！</li></ol><p><mark>赋予一个组件多个 state 变量</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vmunpclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vmunpclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; sculptureList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [showMore, setShowMore] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNextClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleMoreClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setShowMore</span>(!showMore);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> sculpture = sculptureList[index];<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleNextClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;sculpture.name&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> </span><br><span class="language-xml">        by &#123;sculpture.artist&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  </span><br><span class="language-xml">        (&#123;index + 1&#125; of &#123;sculptureList.length&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleMoreClick&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;showMore ? &#x27;Hide&#x27; : &#x27;Show&#x27;&#125; details</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;showMore &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;sculpture.description&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;sculpture.url&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;sculpture.alt&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果它们不相关，那么存在多个 state 变量是一个好主意，例如本例中的 <code>index</code> 和 <code>showMore</code>。但是，如果你发现经常同时更改两个 state 变量，那么最好将它们合并为一个。例如，如果你有一个包含多个字段的表单，那么有一个值为对象的 state 变量比每个字段对应一个 state 变量更方便。 <a href="http://localhost:3000/learn/choosing-the-state-structure">选择 state 结构</a>在这方面有更多提示。</p><p><code>useState</code> 在调用时没有任何关于它引用的是<em>哪个</em> state 变量的信息。没有传递给 <code>useState</code> 的“标识符”，它是如何知道要返回哪个 state 变量呢？它是否依赖于解析函数之类的魔法？答案是否定的。</p><p>相反，为了使语法更简洁，在同一组件的每次渲染中，Hooks 都依托于一个稳定的调用顺序。这在实践中很有效，因为如果你遵循上面的规则（“只在顶层调用 Hooks”），Hooks 将始终以相同的顺序被调用。此外，<a href="https://www.npmjs.com/package/eslint-plugin-react-hooks">linter 插件</a>也可以捕获大多数错误。</p><p>在 React 内部，为每个组件保存了一个数组，其中每一项都是一个 state 对。它维护当前 state 对的索引值，在渲染之前将其设置为 “0”。每次调用 useState 时，React 都会为你提供一个 state 对并增加索引值。</p><hr><p><mark>State 是隔离且私有的</mark>：State 是屏幕上组件实例内部的状态。换句话说，如果你渲染同一个组件两次，每个副本都会有完全隔离的 state！改变其中一个不会影响另一个。</p><p>state 与声明在模块顶部的普通变量的区别： State 不依赖于特定的函数调用或在代码中的位置，它的作用域“只限于”屏幕上的某块特定区域。</p><p><code>Page</code> 组件“不知道”关于 <code>Gallery</code> state 的任何信息，甚至不知道它是否有任何 state。与 props 不同，&#x3D;&#x3D;state 完全私有于声明它的组件&#x3D;&#x3D;。父组件无法更改它。这使你可以向任何组件添加或删除 state，而不会影响其他组件。</p><p>如果你希望两个画廊保持其 states 同步怎么办？在 React 中执行此操作的正确方法是从子组件中<em>删除</em> state 并将其添加到离它们最近的共享父组件中。</p><h2 id="3-渲染和提交"><a href="#3-渲染和提交" class="headerlink" title="3.渲染和提交"></a>3.渲染和提交</h2><p>组件显示到屏幕之前，其必须被 React 渲染。</p><p>在一个 React 应用中一次屏幕更新都会发生以下三个步骤：触发+渲染+提交</p><ol><li><p><mark>触发一次渲染</mark></p><ul><li><p>有两种原因会导致组件的渲染:</p><ol><li><p>组件的 初次渲染：当应用启动时，会触发初次渲染。框架和沙箱有时会隐藏这部分代码，但它是通过调用目标 DOM 节点的 <a href="http://localhost:3000/reference/react-dom/client/createRoot"><code>createRoot</code></a>，然后用你的组件调用 <code>render</code> 函数完成的：</p><p>index.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vrp12zlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vrp12zlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Image</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;.image.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span></span>);<br></code></pre></td></tr></table></div></figure><p>Image.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-prb80qlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-prb80qlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Image</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/ZF6s192.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&#x27;Floralis Genérica&#x27; by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>删除<code>root.render()</code>后，你将会看到组件消失。</p></li><li><p>组件（或者其祖先之一）的 状态发生了改变：一旦组件被初次渲染，你就可以通过使用 <a href="http://localhost:3000/reference/react/useState#setstate"><code>set</code> 函数</a> 更新其状态来触发之后的渲染。更新组件的状态会自动将一次渲染送入队列。</p></li></ol></li></ul></li><li><p><mark>React 渲染你的组件</mark>：在你触发渲染后，React 会调用你的组件来确定要在屏幕上显示的内容。“渲染中” 即 React 在调用你的组件。</p><ul><li>在进行初次渲染时, React 会调用根组件。</li><li>对于后续的渲染, React 会调用内部状态更新触发了渲染的函数组件。</li></ul><p>这个过程是递归的：如果更新后的组件会返回某个另外的组件，那么 React 接下来就会渲染 <em>那个</em> 组件，而如果那个组件又返回了某个组件，那么 React 接下来就会渲染 那个 组件，以此类推。这个过程会持续下去，直到没有更多的嵌套组件并且 React 确切知道哪些东西应该显示到屏幕上为止。</p><p>index.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-i46j2ulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-i46j2ulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Gallery</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Gallery.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Gallery</span> /&gt;</span></span>);<br></code></pre></td></tr></table></div></figure><p>Gallery.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dvrnlblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dvrnlblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>鼓舞人心的雕塑<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Image</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/ZF6s192.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&#x27;Floralis Genérica&#x27; by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><ul><li>在初次渲染中， React 将会为<code>&lt;section&gt;</code>、<code>&lt;h1&gt;</code> 和三个 <code>&lt;img&gt;</code> 标签 <a href="https://developer.mozilla.org/docs/Web/API/Document/createElement">创建 DOM 节点</a>。</li><li>在一次重渲染过程中, React 将计算它们的哪些属性（如果有的话）自上次渲染以来已更改。在下一步（提交阶段）之前，它不会对这些信息执行任何操作。</li></ul><p>渲染必须始终是一次 <a href="http://localhost:3000/learn/keeping-components-pure">纯计算</a>:</p><ul><li>输入相同，输出相同。 给定相同的输入，组件应始终返回相同的 JSX。（当有人点了西红柿沙拉时，他们不应该收到洋葱沙拉！）</li><li>只做它自己的事情。 它不应更改任何存在于渲染之前的对象或变量。（一个订单不应更改其他任何人的订单。）</li></ul><p>否则，随着代码库复杂性的增加，你可能会遇到令人困惑的错误和不可预测的行为。<mark>在 “严格模式” 下开发时，React 会调用每个组件的函数两次，这可以帮助发现由不纯函数引起的错误。</mark></p></li><li><p><mark>React 把更改提交到 DOM 上</mark>：在渲染（调用）你的组件之后，React 将会修改 DOM。</p><ul><li>对于初次渲染， React 会使用 <a href="https://developer.mozilla.org/docs/Web/API/Node/appendChild"><code>appendChild()</code></a> DOM API 将其创建的所有 DOM 节点放在屏幕上。</li><li>对于重渲染， React 将应用最少的必要操作（在渲染时计算！），以使得 DOM 与最新的渲染输出相互匹配。</li></ul><p>React 仅在渲染之间存在差异时才会更改 DOM 节点。 </p><p>例如，有一个组件，它每秒使用从父组件传递下来的不同属性重新渲染一次。注意，你可以添加一些文本到 <code>&lt;input&gt;</code> 标签，更新它的 <code>value</code>，但是文本不会在组件重渲染时消失：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qhqiz7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qhqiz7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Clock</span>(<span class="hljs-params">&#123; time &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;time&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="Clock.gif" alt="Clock" style="zoom:50%;" /><p>之所以会正常运行，是因为在最后一步中，React 只会使用最新的 <code>time</code> 更新 <code>&lt;h1&gt;</code> 标签的内容。它看到 <code>&lt;input&gt;</code> 标签出现在 JSX 中与上次相同的位置，因此 React 不会修改 <code>&lt;input&gt;</code> 标签或它的 <code>value</code>！</p></li></ol><p>在渲染完成并且 React 更新 DOM 之后，浏览器就会重新绘制屏幕。尽管这个过程被称为“浏览器渲染”（browser rendering），但我们还是将它称为“绘制”（painting），以避免在这些文档的其余部分中出现混淆。</p><h2 id="4-state如同一张快照"><a href="#4-state如同一张快照" class="headerlink" title="4.state如同一张快照"></a>4.state如同一张快照</h2><p><mark>设置 state 会触发渲染</mark>：要使界面对输入做出反应，你需要设置其 state。</p><p>当 React 重新渲染一个组件时：</p><ol><li>React 会再次调用你的函数</li><li>函数会返回新的 JSX 快照</li><li>React 会更新界面以匹配返回的快照</li></ol><p>当 React 调用你的组件时，它会为特定的那一次渲染提供一张 state 快照。你的组件会在其 JSX 中返回一张包含一整套新的 props 和事件处理函数的 UI 快照 ，其中所有的值都是 根据那一次渲染中 state 的值 被计算出来的！</p><p>你可能会以为点击“+3”按钮会调用 <code>setNumber(number + 1)</code> 三次从而使计数器递增三次：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lz461qlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lz461qlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(number + 1);</span><br><span class="language-xml">        setNumber(number + 1);</span><br><span class="language-xml">        setNumber(number + 1);</span><br><span class="language-xml">      &#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><p><mark>每次点击只会让 <code>number</code> 递增一次！</mark></p><p>设置 state 只会为下一次渲染变更 state 的值。在第一次渲染期间，<code>number</code> 为 <code>0</code>。这也就解释了为什么在 那次渲染中的 <code>onClick</code> 处理函数中，即便在调用了 <code>setNumber(number + 1)</code> 之后，<code>number</code> 的值也仍然是 <code>0</code>：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d5t19vlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d5t19vlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;<br>  setNumber(number + 1);<br>  setNumber(number + 1);<br>  setNumber(number + 1);<br>&#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>以下是这个按钮的点击事件处理函数通知 React 要做的事情：</p><ol><li><p><code>setNumber(number + 1)</code>：</p><p><code>number</code>是0所以<code>setNumber(0 + 1)</code>。</p><ul><li>React 准备在下一次渲染时将 <code>number</code> 更改为 <code>1</code>。</li></ul></li><li><p><code>setNumber(number + 1)</code>：</p><p><code>number</code>是0所以<code>setNumber(0 + 1)</code>。</p><ul><li>React 准备在下一次渲染时将 <code>number</code> 更改为 <code>1</code>。</li></ul></li><li><p><code>setNumber(number + 1)</code>：</p><p><code>number</code>是0所以<code>setNumber(0 + 1)</code>。</p><ul><li>React 准备在下一次渲染时将 <code>number</code> 更改为 <code>1</code>。</li></ul></li></ol><p>尽管你调用了三次 <code>setNumber(number + 1)</code>，但在 这次渲染的 事件处理函数中 <code>number</code> 会一直是 <code>0</code>，所以你会三次将 state 设置成 <code>1</code>。这就是为什么在你的事件处理函数执行完以后，React 重新渲染的组件中的 <code>number</code> 等于 <code>1</code> 而不是 <code>3</code>。</p><p>你还可以通过在心里把 state 变量替换成它们在你代码中的值来想象这个过程。由于 这次渲染 中的 state 变量 <code>number</code> 是 <code>0</code>，其事件处理函数看起来会像这样：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hemrb7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hemrb7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;<br>  setNumber(0 + 1);<br>  setNumber(0 + 1);<br>  setNumber(0 + 1);<br>&#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>对于下一次渲染来说，<code>number</code> 是 <code>1</code>，因此 那次渲染中的 点击事件处理函数看起来会像这样：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cta3kblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cta3kblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;<br>  setNumber(1 + 1);<br>  setNumber(1 + 1);<br>  setNumber(1 + 1);<br>&#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>这就是为什么再次点击按钮会将计数器设置为 <code>2</code>，下次点击时会设为 <code>3</code>，依此类推。</p><hr><p>点击这个按钮会发出什么警告：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ew1ceclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ew1ceclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(number + 5);</span><br><span class="language-xml">        alert(number);</span><br><span class="language-xml">      &#125;&#125;&gt;+5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="button.gif" alt="button" style="zoom:50%;" /><p>如果你使用之前替换的方法，你就能猜到这个提示框将会显示 “0”：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-138tlulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-138tlulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setNumber</span>(<span class="hljs-number">0</span> + <span class="hljs-number">5</span>);<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p>但如果你在这个提示框上加上一个定时器， 使得它在组件重新渲染 之后 才触发，又会怎样呢？是会显示 “0” 还是 “5” ？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-68hxenlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-68hxenlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(number + 5);</span><br><span class="language-xml">        setTimeout(() =&gt; &#123;</span><br><span class="language-xml">          alert(number);</span><br><span class="language-xml">        &#125;, 3000);</span><br><span class="language-xml">      &#125;&#125;&gt;+5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="timeout.gif" alt="timeout" style="zoom:50%;" /><p>如果使用替代法，就能看到被传入提示框的 state “快照”：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t20jrolqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t20jrolqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setNumber</span>(<span class="hljs-number">0</span> + <span class="hljs-number">5</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-number">0</span>);<br>&#125;, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></div></figure><p>到提示框运行时，React 中存储的 state 可能已经发生了更改，但它是使用用户与之交互时状态的快照进行调度的！</p><p><mark>一个 state 变量的值永远不会在一次渲染的内部发生变化</mark>， 即使其事件处理函数的代码是异步的。在 那次渲染的 <code>onClick</code> 内部，<code>number</code> 的值即使在调用 <code>setNumber(number + 5)</code> 之后也还是 <code>0</code>。它的值在 React 通过调用你的组件“获取 UI 的快照”时就被“固定”了。</p><p>下面是一个会在五秒延迟之后发送一条消息的表单。想象以下场景：</p><ol><li>你按下“发送”按钮，向 Alice 发送“你好”。</li><li>在五秒延迟结束之前，将“To”字段的值更改为“Bob”。</li></ol><p>你觉得 <code>alert</code> 会显示什么？它是会显示“你向 Alice 说了你好“还是会显示“你向 Bob 说了你好”？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bbu2omlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bbu2omlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [to, setTo] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Alice&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [message, setMessage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">`You said <span class="hljs-subst">$&#123;message&#125;</span> to <span class="hljs-subst">$&#123;to&#125;</span>`</span>);<br>    &#125;, <span class="hljs-number">5000</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        To:&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;to&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setTo(e.target.value)&#125;&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Alice&quot;</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bob&quot;</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Message&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;message&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setMessage(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="hello.gif" alt="hello" style="zoom:50%;" /><p>React 会使 state 的值始终”固定“在一次渲染的各个事件处理函数内部。 你无需担心代码运行时 state 是否发生了变化。</p><p>但是，万一你想在重新渲染之前读取最新的 state 怎么办？你应该使用 <a href="http://localhost:3000/learn/queueing-a-series-of-state-updates">状态更新函数</a>。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ttsc8rlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ttsc8rlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TrafficLight</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [walk, setWalk] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setWalk</span>(!walk);<br>    <span class="hljs-title function_">alert</span>(walk ? <span class="hljs-string">&#x27;Stop is next&#x27;</span> : <span class="hljs-string">&#x27;Walk is next&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Change to &#123;walk ? &#x27;Stop&#x27; : &#x27;Walk&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color:</span> <span class="hljs-attr">walk</span> ? &#x27;<span class="hljs-attr">darkgreen</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">darkred</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;walk ? &#x27;Walk&#x27; : &#x27;Stop&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>实现红绿灯组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7g4b20lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7g4b20lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TrafficLight</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [walk, setWalk] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setWalk</span>(!walk);<br>    <span class="hljs-title function_">alert</span>(walk ? <span class="hljs-string">&#x27;Stop is next&#x27;</span> : <span class="hljs-string">&#x27;Walk is next&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        Change to &#123;walk ? &#x27;Stop&#x27; : &#x27;Walk&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">color:</span> <span class="hljs-attr">walk</span> ? &#x27;<span class="hljs-attr">darkgreen</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">darkred</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;walk ? &#x27;Walk&#x27; : &#x27;Stop&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>把 <code>alert</code> 方法放在 <code>setWalk</code> 方法之前或之后没有区别。那次渲染的 <code>walk</code> 的值是固定的。<mark>调用<code>setWalk</code> 只会为 下次 渲染对它进行变更，而不会影响来自上次渲染的事件处理函数。</mark></p><h2 id="5-把一系列-state-更新加入队列"><a href="#5-把一系列-state-更新加入队列" class="headerlink" title="5.把一系列 state 更新加入队列"></a>5.把一系列 state 更新加入队列</h2><p>设置组件 state 会把一次重新渲染加入队列。但有时你可能会希望在下次渲染加入队列之前对 state 的值执行多次操作。</p><p><mark>React 会等到事件处理函数中的 所有 代码都运行完毕再处理你的 state 更新。</mark></p><p>这让你可以更新多个 state 变量——甚至来自多个组件的 state 变量——而不会触发太多的 <a href="http://localhost:3000/learn/render-and-commit#re-renders-when-state-updates">重新渲染</a>。但这也意味着只有在你的事件处理函数及其中任何代码执行完成 之后，UI 才会更新。这种特性也就是 批处理，它会使你的 React 应用运行得更快。它还会帮你避免处理只更新了一部分 state 变量的令人困惑的“半成品”渲染。</p><p>React 不会跨多个需要刻意触发的事件（如点击）进行批处理——每次点击都是单独处理的。请放心，React 只会在一般来说安全的情况下才进行批处理。这可以确保，例如，如果第一次点击按钮会禁用表单，那么第二次点击就不会再次提交它。</p><p><mark>在下次渲染前多次更新同一个 state </mark>：这是一个不常见的用例，但是如果你想在下次渲染之前多次更新同一个 state，你可以像 <code>setNumber(n =&gt; n + 1)</code> 这样传入一个根据队列中的前一个 state 计算下一个 state 的 函数，而不是像 <code>setNumber(number + 1)</code> 这样传入 下一个 state 值。这是一种告诉 React “用 state 值做某事”而不是仅仅替换它的方法。</p><p>现在尝试递增计数器：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v8a91qlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v8a91qlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(n =&gt; n + 1);</span><br><span class="language-xml">        setNumber(n =&gt; n + 1);</span><br><span class="language-xml">        setNumber(n =&gt; n + 1);</span><br><span class="language-xml">      &#125;&#125;&gt;+3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>n =&gt; n + 1</code> 被称为 更新函数。当你将它传递给一个 state 设置函数时：</p><ol><li>React 会将此函数加入队列，以便在事件处理函数中的所有其他代码运行后进行处理。</li><li>在下一次渲染期间，React 会遍历队列并给你更新之后的最终 state。</li></ol><p>React 在执行事件处理函数时处理这几行代码的过程：</p><ol><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个函数。React 将它加入队列。</li><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个函数。React 将它加入队列。</li><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个函数。React 将它加入队列。</li></ol><p>当你在下次渲染期间调用 <code>useState</code> 时，React 会遍历队列。之前的 <code>number</code> state 的值是 <code>0</code>，所以这就是 React 作为参数 <code>n</code> 传递给第一个更新函数的值。然后 React 会获取你上一个更新函数的返回值，并将其作为 <code>n</code> 传递给下一个更新函数，以此类推：</p><table><thead><tr><th>更新队列</th><th><code>n</code></th><th>返回值</th></tr></thead><tbody><tr><td><code>n =&gt; n + 1</code></td><td><code>0</code></td><td><code>0 + 1 = 1</code></td></tr><tr><td><code>n =&gt; n + 1</code></td><td><code>1</code></td><td><code>1 + 1 = 2</code></td></tr><tr><td><code>n =&gt; n + 1</code></td><td><code>2</code></td><td><code>2 + 1 = 3</code></td></tr></tbody></table><p>React 会保存 <code>3</code> 为最终结果并从 <code>useState</code> 中返回。</p><p><mark>如果你在替换 state 后更新 state 会发生什么</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ps3spllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ps3spllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [number, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setNumber(number + 5);</span><br><span class="language-xml">        setNumber(n =&gt; n + 1);</span><br><span class="language-xml">      &#125;&#125;&gt;增加数字<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><p>0→6→12→...</p><p>这是事件处理函数告诉 React 要做的事情：</p><ol><li><code>setNumber(number + 5)</code>：<code>number</code> 为 <code>0</code>，所以 <code>setNumber(0 + 5)</code>。React 将 <em>“替换为 <code>5</code>”</em> 添加到其队列中。</li><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个更新函数。 React 将 该函数 添加到其队列中。</li></ol><p>在下一次渲染期间，React 会遍历 state 队列：</p><table><thead><tr><th>更新队列</th><th><code>n</code></th><th>返回值</th></tr></thead><tbody><tr><td>“替换为 <code>5</code>”</td><td><code>0</code>（未使用）</td><td><code>5</code></td></tr><tr><td><code>n =&gt; n + 1</code></td><td><code>5</code></td><td><code>5 + 1 = 6</code></td></tr></tbody></table><p>React 会保存 <code>6</code> 为最终结果并从 <code>useState</code> 中返回。</p><p><code>setState(x)</code> 实际上会像 <code>setState(n =&gt; x)</code> 一样运行，只是没有使用 <code>n</code>！</p><p><mark>如果你在更新 state 后替换 state 会发生什么</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5ydo0mlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5ydo0mlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setNumber</span>(number + <span class="hljs-number">5</span>);<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n + <span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">setNumber</span>(<span class="hljs-number">42</span>);<br>&#125;&#125;&gt;<br></code></pre></td></tr></table></div></figure><p>0→42</p><p>React 在执行事件处理函数时处理这几行代码的过程：</p><ol><li><code>setNumber(number + 5)</code>：<code>number</code> 为 <code>0</code>，所以 <code>setNumber(0 + 5)</code>。React 将 <em>“替换为 <code>5</code>”</em> 添加到其队列中。</li><li><code>setNumber(n =&gt; n + 1)</code>：<code>n =&gt; n + 1</code> 是一个更新函数。React 将该函数添加到其队列中。</li><li><code>setNumber(42)</code>：React 将 “替换为 <code>42</code>” 添加到其队列中。</li></ol><p>在下一次渲染期间，React 会遍历 state 队列：</p><table><thead><tr><th>更新队列</th><th><code>n</code></th><th>返回值</th></tr></thead><tbody><tr><td>“替换为 <code>5</code>”</td><td><code>0</code>（未使用）</td><td><code>5</code></td></tr><tr><td><code>n =&gt; n + 1</code></td><td><code>5</code></td><td><code>5 + 1 = 6</code></td></tr><tr><td>“替换为 <code>42</code>”</td><td><code>6</code>（未使用）</td><td><code>42</code></td></tr></tbody></table><p>然后 React 会保存 <code>42</code> 为最终结果并从 <code>useState</code> 中返回。</p><p>总而言之，以下是你可以考虑传递给 <code>setNumber</code> state 设置函数的内容：</p><ul><li>一个更新函数（例如：<code>n =&gt; n + 1</code>）会被添加到队列中。</li><li>任何其他的值（例如：数字 <code>5</code>）会导致“替换为 <code>5</code>”被添加到队列中，已经在队列中的内容会被忽略。</li></ul><p>事件处理函数执行完成后，React 将触发重新渲染。<mark>在重新渲染期间，React 将处理队列。更新函数会在渲染期间执行，因此 更新函数必须是 <a href="http://localhost:3000/learn/keeping-components-pure">纯函数</a> 并且只 返回 结果。不要尝试从它们内部设置 state 或者执行其他副作用</mark>。在严格模式下，React 会执行每个更新函数两次（但是丢弃第二个结果）以便帮助你发现错误。</p><p>命名惯例：通常可以通过相应 state 变量的第一个字母来命名更新函数的参数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a8eh9rlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a8eh9rlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setEnabled</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> !e);<br><br><span class="hljs-title function_">setLastName</span>(<span class="hljs-function"><span class="hljs-params">ln</span> =&gt;</span> ln.<span class="hljs-title function_">reverse</span>());<br><br><span class="hljs-title function_">setFriendCount</span>(<span class="hljs-function"><span class="hljs-params">fc</span> =&gt;</span> fc * <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></div></figure><p>如果你喜欢更冗长的代码，另一个常见的惯例是重复使用完整的 state 变量名称，如 <code>setEnabled(enabled =&gt; !enabled)</code>，或使用前缀，如 <code>setEnabled(prevEnabled =&gt; !prevEnabled)</code>。</p><h2 id="6-更新-state-中的对象"><a href="#6-更新-state-中的对象" class="headerlink" title="6.更新 state 中的对象"></a>6.更新 state 中的对象</h2><p>state 中可以保存任意类型的 JavaScript 值，包括对象。但是，你不应该直接修改存放在 React state 中的对象。相反，当你想要更新一个对象时，你需要创建一个新的对象（或者将其拷贝一份），然后将 state 更新为此对象。</p><p>数字、字符串和布尔值，这些类型的值在 JavaScript 中是不可变（immutable）的，这意味着它们不能被改变或是只读的。你可以通过替换它们的值以触发一次重新渲染。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n6mv5xlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n6mv5xlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setX</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></div></figure><p>state <code>x</code> 从 <code>0</code> 变为 <code>5</code>，但是数字 <code>0</code> 本身并没有发生改变。在 JavaScript 中，无法对内置的原始值，如数字、字符串和布尔值，进行任何更改。</p><p>现在考虑 state 中存放对象的情况：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-62serklqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-62serklqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;);<br></code></pre></td></tr></table></div></figure><p>从技术上来讲，可以改变对象自身的内容。当你这样做时，就制造了一个 mutation：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pu9puglqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pu9puglqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">position.<span class="hljs-property">x</span> = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></div></figure><p>然而，虽然严格来说 React state 中存放的对象是可变的，但你应该像处理数字、布尔值、字符串一样将它们视为不可变的。因此你应该替换它们的值，而不是对它们进行修改。 </p><p>应该 <mark>把所有存放在 state 中的 JavaScript 对象都视为只读的</mark>。</p><p>在下面的例子中，我们用一个存放在 state 中的对象来表示指针当前的位置。当你在预览区触摸或移动光标时，红色的点本应移动。但是实际上红点仍停留在原处：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kqjuo1lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kqjuo1lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MovingDot</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerMove</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">        position.x = e.clientX;</span><br><span class="language-xml">        position.y = e.clientY;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">      style=&#123;&#123;</span><br><span class="language-xml">        position: &#x27;relative&#x27;,</span><br><span class="language-xml">        width: &#x27;100vw&#x27;,</span><br><span class="language-xml">        height: &#x27;100vh&#x27;,</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">position:</span> &#x27;<span class="hljs-attr">absolute</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">red</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">borderRadius:</span> &#x27;<span class="hljs-attr">50</span>%&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">transform:</span> `<span class="hljs-attr">translate</span>($&#123;<span class="hljs-attr">position.x</span>&#125;<span class="hljs-attr">px</span>, $&#123;<span class="hljs-attr">position.y</span>&#125;<span class="hljs-attr">px</span>)`,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">left:</span> <span class="hljs-attr">-10</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">top:</span> <span class="hljs-attr">-10</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">width:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">height:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125; /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这段代码直接修改了 <a href="http://localhost:3000/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time">上一次渲染中</a> 分配给 <code>position</code> 的对象。但是因为并没有使用 state 的设置函数，React 并不知道对象已更改。所以 React 没有做出任何响应。这就像在吃完饭之后才尝试去改变要点的菜一样。虽然在一些情况下，直接修改 state 可能是有效的，但我们并不推荐这么做。你应该把在渲染过程中可以访问到的 state 视为只读的。</p><p>在这种情况下，为了真正地 <a href="http://localhost:3000/learn/state-as-a-snapshot#setting-state-triggers-renders">触发一次重新渲染</a>，你需要创建一个新对象并把它传递给 state 的设置函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ikyvz5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ikyvz5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">onPointerMove=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">setPosition</span>(&#123;<br>    <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span>,<br>    <span class="hljs-attr">y</span>: e.<span class="hljs-property">clientY</span><br>  &#125;);<br>&#125;&#125;<br></code></pre></td></tr></table></div></figure><p>通过使用 <code>setPosition</code>，你在告诉 React：</p><ul><li>使用这个新的对象替换 <code>position</code> 的值</li><li>然后再次渲染这个组件</li></ul><p>现在你可以看到，当你在预览区触摸或移动光标时，红点会跟随着你的指针移动。</p><p>像这样的代码是有问题的，因为它改变了 state 中现有的对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0fi7a3lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0fi7a3lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">position.<span class="hljs-property">x</span> = e.<span class="hljs-property">clientX</span>;<br><br>position.<span class="hljs-property">y</span> = e.<span class="hljs-property">clientY</span>;<br></code></pre></td></tr></table></div></figure><p>但是像这样的代码就 没有任何问题，因为你改变的是你刚刚创建的一个新的对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5kcddglqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5kcddglqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> nextPosition = &#123;&#125;;<br><br>nextPosition.<span class="hljs-property">x</span> = e.<span class="hljs-property">clientX</span>;<br><br>nextPosition.<span class="hljs-property">y</span> = e.<span class="hljs-property">clientY</span>;<br><br><span class="hljs-title function_">setPosition</span>(nextPosition);<br></code></pre></td></tr></table></div></figure><p>事实上，它完全等同于下面这种写法：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-faksunlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-faksunlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setPosition</span>(&#123;<br>    <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span>,<br>    <span class="hljs-attr">y</span>: e.<span class="hljs-property">client</span><br>&#125;);<br></code></pre></td></tr></table></div></figure><p>只有当你改变已经处于 state 中的 现有 对象时，mutation 才会成为问题。而修改一个你刚刚创建的对象就不会出现任何问题，因为 还没有其他的代码引用它。改变它并不会意外地影响到依赖它的东西。这叫做“局部 mutation”。你甚至可以 <a href="http://localhost:3000/learn/keeping-components-pure#local-mutation-your-components-little-secret">在渲染的过程中</a> 进行“局部 mutation”的操作。</p><p><mark>使用展开语法复制对象</mark>：在之前的例子中，始终会根据当前指针的位置创建出一个新的 <code>position</code> 对象。但是通常，你会希望把 现有 数据作为你所创建的新对象的一部分。例如，你可能只想要更新表单中的一个字段，其他的字段仍然使用之前的值。</p><p>下面的代码中，输入框并不会正常运行【无法修改输入框的值】，因为 <code>onChange</code> 直接修改了 state ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3kjrrnlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3kjrrnlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Barbara&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Hepworth&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;bhepworth@sculpture.com&#x27;</span><br>  &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFirstNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    person.<span class="hljs-property">firstName</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleLastNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    person.<span class="hljs-property">lastName</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleEmailChange</span>(<span class="hljs-params">e</span>) &#123;<br>    person.<span class="hljs-property">email</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        First name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.firstName&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleFirstNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Last name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.lastName&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleLastNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Email:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.email&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleEmailChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#123;person.firstName&#125;&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        &#123;person.lastName&#125;&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        (&#123;person.email&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231107160248607.png" alt="image-20231107160248607" style="zoom:50%;" /><p>下面这行代码修改了上一次渲染中的 state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vebxkklqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vebxkklqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">person.<span class="hljs-property">firstName</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br></code></pre></td></tr></table></div></figure><p>想要实现你的需求，最可靠的办法就是创建一个新的对象并将它传递给 <code>setPerson</code>。但是在这里，你还需要 把当前的数据复制到新对象中，因为你只改变了其中一个字段：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5mxi0klqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5mxi0klqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setPerson</span>(&#123;<br>  <span class="hljs-attr">firstName</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>, <span class="hljs-comment">/* 从 input 中获取新的 first name */</span><br>  <span class="hljs-attr">lastName</span>: person.<span class="hljs-property">lastName</span>,<br>  <span class="hljs-attr">email</span>: person.<span class="hljs-property">email</span><br>&#125;);<br></code></pre></td></tr></table></div></figure><p>你可以使用 <code>...</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals">对象展开</a> 语法，这样你就不需要单独复制每个属性。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5tt1njlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5tt1njlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person, <span class="hljs-comment">// 复制上一个 person 中的所有字段</span><br>  <span class="hljs-attr">firstName</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> <span class="hljs-comment">// 但是覆盖 firstName 字段 </span><br>&#125;);<br></code></pre></td></tr></table></div></figure><p>现在表单可以正常运行了！</p><p>可以看到，你并没有为每个输入框单独声明一个 state。对于大型表单，将所有数据都存放在同一个对象中是非常方便的——前提是你能够正确地更新它！</p><p><code>...</code> 展开语法本质是是“浅拷贝”——它只会复制一层。这使得它的执行速度很快，但是也意味着当你想要更新一个嵌套属性时，你必须得多次使用展开语法。</p><p>使用一个事件处理函数来更新多个字段：你也可以在对象的定义中使用 <code>[</code> 和 <code>]</code> 括号来实现属性的动态命名。下面是同一个例子，但它使用了一个事件处理函数而不是三个：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hmrc54lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hmrc54lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person,<br>  [e.<span class="hljs-property">target</span>.<span class="hljs-property">name</span>]: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>e.target.name</code> 引用了 <code>&lt;input&gt;</code> 这个 DOM 元素的 <code>name</code> 属性。</p><p><mark>更新一个嵌套对象</mark>：考虑下面这种结构的嵌套对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ulorh8lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ulorh8lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br>  <span class="hljs-attr">artwork</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>如果你想要更新 <code>person.artwork.city</code> 的值，用 mutation 来实现的方法非常容易理解：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lger3mlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lger3mlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">person.<span class="hljs-property">artwork</span>.<span class="hljs-property">city</span> = <span class="hljs-string">&#x27;New Delhi&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>但是在 React 中，你需要将 state 视为不可变的！为了修改 <code>city</code> 的值，你首先需要创建一个新的 <code>artwork</code> 对象（其中预先填充了上一个 <code>artwork</code> 对象中的数据），然后创建一个新的 <code>person</code> 对象，并使得其中的 <code>artwork</code> 属性指向新创建的 <code>artwork</code> 对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9yhdt6lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9yhdt6lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> nextArtwork = &#123; ...person.<span class="hljs-property">artwork</span>, <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;New Delhi&#x27;</span> &#125;;<br><span class="hljs-keyword">const</span> nextPerson = &#123; ...person, <span class="hljs-attr">artwork</span>: nextArtwork &#125;;<br><span class="hljs-title function_">setPerson</span>(nextPerson);<br></code></pre></td></tr></table></div></figure><p>或者，写成一个函数调用：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s0us3alqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s0us3alqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person, <span class="hljs-comment">/*  复制其它字段的数据   */</span> <br>  <span class="hljs-attr">artwork</span>: &#123; <span class="hljs-comment">/*  替换 artwork 字段   */</span> <br>    ...person.<span class="hljs-property">artwork</span>, <span class="hljs-comment">/* 复制之前 person.artwork 中的数据   */</span> <br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;New Delhi&#x27;</span> <span class="hljs-comment">/*  但是将 city 的值替换为 New Delhi！  */</span> <br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>这虽然看起来有点冗长，但对于很多情况都能有效地解决问</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yox73hlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yox73hlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br>    <span class="hljs-attr">artwork</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br>      <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br>      <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">name</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTitleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">title</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCityChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">city</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleImageChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setPerson</span>(&#123;<br>      ...person,<br>      <span class="hljs-attr">artwork</span>: &#123;<br>        ...person.<span class="hljs-property">artwork</span>,<br>        <span class="hljs-attr">image</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleNameChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Title:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleTitleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        City:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.city&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleCityChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Image:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person.artwork.image&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleImageChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;person.artwork.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">        &#123;&#x27; by &#x27;&#125;</span><br><span class="language-xml">        &#123;person.name&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        (located in &#123;person.artwork.city&#125;)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;person.artwork.image&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;person.artwork.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>对象并非是真正嵌套的：下面这个对象从代码上来看是“嵌套”的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8lgz2ilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8lgz2ilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> obj = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br><span class="hljs-attr">artwork</span>: &#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br><span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br><span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>然而，当我们思考对象的特性时，“嵌套”并不是一个非常准确的方式。当这段代码运行的时候，不存在“嵌套”的对象。你实际上看到的是两个不同的对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t2suqrlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t2suqrlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> obj1 = &#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br><span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br><span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj2 = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br><span class="hljs-attr">artwork</span>: obj1<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>对象 <code>obj1</code> 并不处于 <code>obj2</code> 的“内部”。例如，下面的代码中，<code>obj3</code> 中的属性也可以指向 <code>obj1</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rl07jqlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rl07jqlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> obj1 = &#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br><span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br><span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj2 = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br><span class="hljs-attr">artwork</span>: obj1<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj3 = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Copycat&#x27;</span>,<br><span class="hljs-attr">artwork</span>: obj1<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>如果你直接修改 <code>obj3.artwork.city</code>，就会同时影响 <code>obj2.artwork.city</code> 和 <code>obj1.city</code>。这是因为 <code>obj3.artwork</code>、<code>obj2.artwork</code> 和 <code>obj1</code> 都指向同一个对象。当你用“嵌套”的方式看待对象时，很难看出这一点。相反，它们是相互独立的对象，只不过是用属性“指向”彼此而已。</p><p><mark>使用 Immer 编写简洁的更新逻辑</mark>：如果你的 state 有多层的嵌套，你或许应该考虑 <a href="http://localhost:3000/learn/choosing-the-state-structure#avoid-deeply-nested-state">将其扁平化</a>。但是，如果你不想改变 state 的数据结构，你可能更喜欢用一种更便捷的方式来实现嵌套展开的效果。<a href="https://github.com/immerjs/use-immer">Immer</a> 是一个非常流行的库，它可以让你使用简便但可以直接修改的语法编写代码，并会帮你处理好复制的过程。通过使用 Immer，你写出的代码看起来就像是你“打破了规则”而直接修改了对象：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-60k6s0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-60k6s0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>  draft.<span class="hljs-property">artwork</span>.<span class="hljs-property">city</span> = <span class="hljs-string">&#x27;Lagos&#x27;</span>;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>但是不同于一般的 mutation，它并不会覆盖之前的 state！</p><p>由 Immer 提供的 <code>draft</code> 是一种特殊类型的对象，被称为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>，它会记录你用它所进行的操作。这就是你能够随心所欲地直接修改对象的原因所在！从原理上说，Immer 会弄清楚 <code>draft</code> 对象的哪些部分被改变了，并会依照你的修改创建出一个全新的对象。</p><p>使用 Immer:</p><ol><li>运行 <code>npm install use-immer</code> 添加 Immer 依赖</li><li>用 <code>import &#123; useImmer &#125; from &#39;use-immer&#39;</code> 替换掉 <code>import &#123; useState &#125; from &#39;react&#39;</code></li></ol><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g7e22xlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g7e22xlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useImmer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;use-immer&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [person, updatePerson] = <span class="hljs-title function_">useImmer</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Niki de Saint Phalle&#x27;</span>,<br>    <span class="hljs-attr">artwork</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blue Nana&#x27;</span>,<br>      <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Hamburg&#x27;</span>,<br>      <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://i.imgur.com/Sd1AgUOm.jpg&#x27;</span>,<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      draft.<span class="hljs-property">name</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTitleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      draft.<span class="hljs-property">artwork</span>.<span class="hljs-property">title</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCityChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      draft.<span class="hljs-property">artwork</span>.<span class="hljs-property">city</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleImageChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">updatePerson</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      draft.<span class="hljs-property">artwork</span>.<span class="hljs-property">image</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>    &#125;);<br>  &#125;<br>  ...<br>&#125; <br></code></pre></td></tr></table></div></figure><p>可以看到，事件处理函数变得更简洁了。你可以随意在一个组件中同时使用 <code>useState</code> 和 <code>useImmer</code>。如果你想要写出更简洁的更新处理函数，Immer 会是一个不错的选择，尤其是当你的 state 中有嵌套，并且复制对象会带来重复的代码时。</p><hr><p><mark>为什么在 React 中不推荐直接修改 state？</mark></p><ol><li>调试：如果你使用 <code>console.log</code> 并且不直接修改 state，你之前日志中的 state 的值就不会被新的 state 变化所影响。这样你就可以清楚地看到两次渲染之间 state 的值发生了什么变化</li><li>优化：React 常见的 <a href="http://localhost:3000/reference/react/memo">优化策略</a> 依赖于如果之前的 props 或者 state 的值和下一次相同就跳过渲染。如果你从未直接修改 state ，那么你就可以很快看到 state 是否发生了变化。如果 <code>prevObj === obj</code>，那么你就可以肯定这个对象内部并没有发生改变。</li><li>新功能：我们正在构建的 React 的新功能依赖于 state 被 <a href="http://localhost:3000/learn/state-as-a-snapshot">像快照一样看待</a> 的理念。如果你直接修改 state 的历史版本，可能会影响你使用这些新功能。</li><li>需求变更：有些应用功能在不出现任何修改的情况下会更容易实现，比如实现撤销&#x2F;恢复、展示修改历史，或是允许用户把表单重置成某个之前的值。这是因为你可以把 state 之前的拷贝保存到内存中，并适时对其进行再次使用。如果一开始就用了直接修改 state 的方式，那么后面要实现这样的功能就会变得非常困难。</li><li>更简单的实现：React 并不依赖于 mutation ，所以你不需要对对象进行任何特殊操作。它不需要像很多“响应式”的解决方案一样去劫持对象的属性、总是用代理把对象包裹起来，或者在初始化时做其他工作。这也是为什么 React 允许你把任何对象存放在 state 中——不管对象有多大——而不会造成有任何额外的性能或正确性问题的原因。</li></ol><p>在实践中，你经常可以“侥幸”直接修改 state 而不出现什么问题，但是我们强烈建议你不要这样做，这样你就可以使用我们秉承着这种理念开发的 React 新功能。</p><h2 id="7-更新-state-中的数组"><a href="#7-更新-state-中的数组" class="headerlink" title="7.更新 state 中的数组"></a>7.更新 state 中的数组</h2><p>数组是另外一种可以存储在 state 中的 JavaScript 对象，它虽然是可变的，但是却应该被视为不可变。同对象一样，当你想要更新存储于 state 中的数组时，你需要创建一个新的数组（或者创建一份已有数组的拷贝值），并使用新数组设置 state。</p><p><mark>在没有 mutation 的前提下更新数组</mark>：在 JavaScript 中，数组只是另一种对象。<a href="http://localhost:3000/learn/updating-objects-in-state">同对象一样</a>，你需要将 React state 中的数组视为只读的。这意味着你不应该使用类似于 <code>arr[0] = &#39;bird&#39;</code> 这样的方式来重新分配数组中的元素，也不应该使用会直接修改原始数组的方法，例如 <code>push()</code> 和 <code>pop()</code>。</p><p>相反，每次要更新一个数组时，你需要把一个新的数组传入 state 的 setting 方法中。为此，你可以通过使用像 <code>filter()</code> 和 <code>map()</code> 这样不会直接修改原始值的方法，从原始数组生成一个新的数组。然后你就可以将 state 设置为这个新生成的数组。</p><p>当你操作 React state 中的数组时，你需要避免使用左列的方法，而首选右列的方法：</p><table><thead><tr><th></th><th>避免使用 (会改变原始数组)</th><th>推荐使用 (会返回一个新数组）</th></tr></thead><tbody><tr><td>添加元素</td><td><code>push</code>，<code>unshift</code></td><td><code>concat</code>，<code>[...arr]</code> 展开语法（<a href="http://localhost:3000/learn/updating-arrays-in-state#adding-to-an-array">例子</a>）</td></tr><tr><td>删除元素</td><td><code>pop</code>，<code>shift</code>，<code>splice</code></td><td><code>filter</code>，<code>slice</code>（<a href="http://localhost:3000/learn/updating-arrays-in-state#removing-from-an-array">例子</a>）</td></tr><tr><td>替换元素</td><td><code>splice</code>，<code>arr[i] = ...</code> 赋值</td><td><code>map</code>（<a href="http://localhost:3000/learn/updating-arrays-in-state#replacing-items-in-an-array">例子</a>）</td></tr><tr><td>排序</td><td><code>reverse</code>，<code>sort</code></td><td>先将数组复制一份（<a href="http://localhost:3000/learn/updating-arrays-in-state#making-other-changes-to-an-array">例子</a>）</td></tr></tbody></table><p>或者，你可以<a href="http://localhost:3000/learn/updating-arrays-in-state#write-concise-update-logic-with-immer">使用 Immer</a> ，这样你便可以使用表格中的所有方法了。</p><ul><li><code>slice</code> 让你可以拷贝数组或是数组的一部分。</li><li><code>splice</code> 会直接修改 原始数组（插入或者删除元素）。</li></ul><p>在 React 中，更多情况下你会使用 <code>slice</code>（没有 <code>p</code> ！），因为你不想改变 state 中的对象或数组。</p><p><mark>向数组中添加元素</mark>：<code>push()</code> 会直接修改原始数组，而你不希望这样：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3qq16ilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3qq16ilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [artists, setArtists] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>振奋人心的雕塑家们：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        artists.push(&#123;</span><br><span class="language-xml">          id: nextId++,</span><br><span class="language-xml">          name: name,</span><br><span class="language-xml">        &#125;);</span><br><span class="language-xml">      &#125;&#125;&gt;添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;artists.map(artist =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artist.id&#125;</span>&gt;</span>&#123;artist.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>相反，你应该创建一个 新 数组，其包含了原始数组的所有元素 以及 一个在末尾的新元素。这可以通过很多种方法实现，最简单的一种就是使用 <code>...</code> <a href="http://localhost:3000/a-javascript-refresher#array-spread">数组展开</a> 语法：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pao1bhlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pao1bhlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;<br>        setArtists( /* 替换 state   */ <br>  [ /*  是通过传入一个新数组实现的  */ <br>    ...artists, /* 新数组包含原数组的所有元素   */ <br>    &#123; id: nextId++, name: name &#125; /*  并在末尾添加了一个新的元素  */ <br>  ]<br>);<br>    &#125;&#125;&gt;添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>数组展开运算符还允许你把新添加的元素放在原始的 <code>...artists</code> 之前：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g18nxulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g18nxulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setArtists</span>([<br>  &#123; <span class="hljs-attr">id</span>: nextId++, <span class="hljs-attr">name</span>: name &#125;,<br>  ...artists <span class="hljs-comment">/*  将原数组中的元素放在末尾  */</span> <br>]);<br></code></pre></td></tr></table></div></figure><p>这样一来，展开操作就可以完成 <code>push()</code> 和 <code>unshift()</code> 的工作，将新元素添加到数组的末尾和开头。</p><hr><p> <mark>从数组中删除元素</mark>：从数组中删除一个元素最简单的方法就是将它过滤出去。换句话说，你需要生成一个不包含该元素的新数组。这可以通过 <code>filter</code> 方法实现：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-w7bhu7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-w7bhu7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> initialArtists = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Marta Colvin Andrade&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Lamidi Olonade Fakeye&#x27;</span>&#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Louise Nevelson&#x27;</span>&#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [artists, setArtists] = <span class="hljs-title function_">useState</span>(<br>    initialArtists<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>振奋人心的雕塑家们：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;artists.map(artist =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artist.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;artist.name&#125;&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setArtists(</span><br><span class="language-xml">                artists.filter(a =&gt;</span><br><span class="language-xml">                  a.id !== artist.id</span><br><span class="language-xml">                )</span><br><span class="language-xml">              );</span><br><span class="language-xml">            &#125;&#125;&gt;</span><br><span class="language-xml">              删除</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>artists.filter(s =&gt; s.id !== artist.id)</code> 表示“创建一个新的数组，该数组由那些 ID 与 <code>artists.id</code> 不同的 <code>artists</code> 组成”。换句话说，每个 artist 的“删除”按钮会把 <em>那一个</em> artist 从原始数组中过滤掉，并使用过滤后的数组再次进行渲染。注意，<code>filter</code> 并不会改变原始数组。</p><hr><p><mark>转换数组</mark>：如果你想改变数组中的某些或全部元素，你可以用 <code>map()</code> 创建一个新数组。你传入 <code>map</code> 的函数决定了要根据每个元素的值或索引（或二者都要）对元素做何处理。</p><p>一个数组记录了两个圆形和一个正方形的坐标。当你点击按钮时，仅有两个圆形会向下移动 100 像素。这是通过使用 <code>map()</code> 生成一个新数组实现的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ze45hulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ze45hulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> initialShapes = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;circle&#x27;</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;square&#x27;</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">150</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;circle&#x27;</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">250</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ShapeEditor</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [shapes, setShapes] = <span class="hljs-title function_">useState</span>(<br>    initialShapes<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> nextShapes = shapes.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">shape</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">/*  不作改变  */</span><br>      <span class="hljs-keyword">if</span> (shape.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;square&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> shape;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/*  返回一个新的圆形，位置在下方 50px 处  */</span> <br>        <span class="hljs-keyword">return</span> &#123;<br>          ...shape,<br>          <span class="hljs-attr">y</span>: shape.<span class="hljs-property">y</span> + <span class="hljs-number">50</span>,<br>        &#125;;<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">/*  使用新的数组进行重渲染  */</span> <br>    <span class="hljs-title function_">setShapes</span>(nextShapes);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        所有圆形向下移动！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;shapes.map(shape =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;shape.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">background:</span> &#x27;<span class="hljs-attr">purple</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">position:</span> &#x27;<span class="hljs-attr">absolute</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">left:</span> <span class="hljs-attr">shape.x</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">top:</span> <span class="hljs-attr">shape.y</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">borderRadius:</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">shape.type</span> === <span class="hljs-string">&#x27;circle&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              ? &#x27;<span class="hljs-attr">50</span>%&#x27; <span class="hljs-attr">:</span> &#x27;&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">width:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">height:</span> <span class="hljs-attr">20</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125; /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>&#x3D;&#x3D;替换数组中的元素&#x3D;&#x3D;：想要替换数组中一个或多个元素是非常常见的。类似 <code>arr[0] = &#39;bird&#39;</code> 这样的赋值语句会直接修改原始数组，所以在这种情况下，你也应该使用 <code>map</code>。</p><p>要替换一个元素，请使用 <code>map</code> 创建一个新数组。在你的 <code>map</code> 回调里，第二个参数是元素的索引。使用索引来判断最终是返回原始的元素（即回调的第一个参数）还是替换成其他值：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jwb8dalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jwb8dalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> initialCounters = [<br>  <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">CounterList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [counters, setCounters] = <span class="hljs-title function_">useState</span>(<br>    initialCounters<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleIncrementClick</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">const</span> nextCounters = counters.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">c, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (i === index) &#123;<br>        <span class="hljs-comment">/*  递增被点击的计数器数值  */</span> <br>        <span class="hljs-keyword">return</span> c + <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/*  其余部分不发生变化  */</span> <br>        <span class="hljs-keyword">return</span> c;<br>      &#125;<br>    &#125;);<br>    <span class="hljs-title function_">setCounters</span>(nextCounters);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;counters.map((counter, i) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;counter&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            handleIncrementClick(i);</span><br><span class="language-xml">          &#125;&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>&#x3D;&#x3D;向数组中插入元素&#x3D;&#x3D;：有时，你也许想向数组特定位置插入一个元素，这个位置既不在数组开头，也不在末尾。为此，你可以将数组展开运算符 <code>...</code> 和 <code>slice()</code> 方法一起使用。<code>slice()</code> 方法让你从数组中切出“一片”。为了将元素插入数组，你需要先展开原数组在插入点之前的切片，然后插入新元素，最后展开原数组中剩下的部分。</p><p>下面的例子中，插入按钮总是会将元素插入到数组中索引为 <code>1</code> 的位置。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-upywrflqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-upywrflqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialArtists = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Marta Colvin Andrade&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Lamidi Olonade Fakeye&#x27;</span>&#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Louise Nevelson&#x27;</span>&#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [artists, setArtists] = <span class="hljs-title function_">useState</span>(<br>    initialArtists<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> insertAt = <span class="hljs-number">1</span>; <span class="hljs-comment">/*  可能是任何索引  */</span> <br>    <span class="hljs-keyword">const</span> nextArtists = [<br>      <span class="hljs-comment">/* 插入点之前的元素：   */</span> <br>      ...artists.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, insertAt),<br>      <span class="hljs-comment">/* 新的元素：  */</span> <br>      &#123; <span class="hljs-attr">id</span>: nextId++, <span class="hljs-attr">name</span>: name &#125;,<br>      <span class="hljs-comment">/* 插入点之后的元素：  */</span> <br>      ...artists.<span class="hljs-title function_">slice</span>(insertAt)<br>    ];<br>    <span class="hljs-title function_">setArtists</span>(nextArtists);<br>    <span class="hljs-title function_">setName</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>振奋人心的雕塑家们：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        插入</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;artists.map(artist =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artist.id&#125;</span>&gt;</span>&#123;artist.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>可能想翻转数组，或是对数组排序。而 JavaScript 中的 <code>reverse()</code> 和 <code>sort()</code> 方法会改变原数组，所以你无法直接使用它们。</p><p>然而，你可以先拷贝这个数组，再改变这个拷贝后的值。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qsde15lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qsde15lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialList = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Big Bellies&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Lunar Landscape&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Terracotta Army&#x27;</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>(initialList);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> nextList = [...list];<br>    nextList.<span class="hljs-title function_">reverse</span>();<br>    <span class="hljs-title function_">setList</span>(nextList);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        翻转</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;list.map(artwork =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artwork.id&#125;</span>&gt;</span>&#123;artwork.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>即使你拷贝了数组，你还是不能直接修改其内部的元素。这是因为<mark>数组的拷贝是浅拷贝——新的数组中依然保留了与原始数组相同的元素</mark>。因此，如果你修改了拷贝数组内部的某个对象，其实你正在直接修改当前的 state。举个例子，像下面的代码就会带来问题。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-z5c0hwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-z5c0hwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> nextList = [...list];<br>nextList[<span class="hljs-number">0</span>].<span class="hljs-property">seen</span> = <span class="hljs-literal">true</span>;  <span class="hljs-comment">/* 问题：直接修改了 list[0] 的值   */</span><br><span class="hljs-title function_">setList</span>(nextList);<br></code></pre></td></tr></table></div></figure><p>虽然 <code>nextList</code> 和 <code>list</code> 是两个不同的数组，<code>nextList[0]</code> 和 <code>list[0]</code> <mark>却指向了同一个对象</mark>。因此，通过改变 <code>nextList[0].seen</code>，<code>list[0].seen</code> 的值也被改变了。这是一种 state 的 mutation 操作，你应该避免这么做！你可以用类似于 <a href="http://localhost:3000/learn/updating-objects-in-state#updating-a-nested-object">更新嵌套的 JavaScript 对象</a> 的方式解决这个问题——<mark>拷贝想要修改的特定元素，而不是直接修改它</mark>。下面是具体的操作。</p><hr><p><mark>更新数组内部的对象</mark>：对象并不是 真的 位于数组“内部”。可能他们在代码中看起来像是在数组“内部”，但其实<mark>数组中的每个对象都是这个数组“指向”的一个存储于其它位置的值</mark>。这就是当你在处理类似 <code>list[0]</code> 这样的嵌套字段时需要格外小心的原因。其他人的艺术品清单可能指向了数组的同一个元素！</p><p><mark>当你更新一个嵌套的 state 时，你需要从想要更新的地方创建拷贝值，一直这样，直到顶层。</mark> </p><p>在下面的例子中，两个不同的艺术品清单有着相同的初始 state。他们本应该互不影响，但是因为一次 mutation，他们的 state 被意外地共享了，勾选一个清单中的事项会影响另外一个清单：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-94xeeplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-94xeeplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialList = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Big Bellies&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Lunar Landscape&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Terracotta Army&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">BucketList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [myList, setMyList] = <span class="hljs-title function_">useState</span>(initialList);<br>  <span class="hljs-keyword">const</span> [yourList, setYourList] = <span class="hljs-title function_">useState</span>(<br>    initialList<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleMyList</span>(<span class="hljs-params">artworkId, nextSeen</span>) &#123;<br>    <span class="hljs-keyword">const</span> myNextList = [...myList];<br>    <span class="hljs-keyword">const</span> artwork = myNextList.<span class="hljs-title function_">find</span>(<br>      <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a.<span class="hljs-property">id</span> === artworkId<br>    );<br>    artwork.<span class="hljs-property">seen</span> = nextSeen;<br>    <span class="hljs-title function_">setMyList</span>(myNextList);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleYourList</span>(<span class="hljs-params">artworkId, nextSeen</span>) &#123;<br>    <span class="hljs-keyword">const</span> yourNextList = [...yourList];<br>    <span class="hljs-keyword">const</span> artwork = yourNextList.<span class="hljs-title function_">find</span>(<br>      <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a.<span class="hljs-property">id</span> === artworkId<br>    );<br>    artwork.<span class="hljs-property">seen</span> = nextSeen;<br>    <span class="hljs-title function_">setYourList</span>(yourNextList);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>艺术愿望清单<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我想看的艺术清单：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;myList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggleMyList&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你想看的艺术清单：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;yourList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggleYourList&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ItemList</span>(<span class="hljs-params">&#123; artworks, onToggle &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;artworks.map(artwork =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artwork.id&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;artwork.seen&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                onToggle(</span><br><span class="language-xml">                  artwork.id,</span><br><span class="language-xml">                  e.target.checked</span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;artwork.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>虽然 <code>myNextList</code> 这个数组是新的，但是其内部的元素本身与原数组 <code>myList</code> 是相同的。因此，修改 <code>artwork.seen</code>，其实是在修改原始的 artwork 对象。而这个 artwork 对象也被 <code>yourList</code> 使用，这样就带来了 bug。这样的 bug 可能难以想到，但好在如果你避免直接修改 state，它们就会消失。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1u527xlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1u527xlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> myNextList = [...myList];<br><span class="hljs-keyword">const</span> artwork = myNextList.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a.<span class="hljs-property">id</span> === artworkId);<br>artwork.<span class="hljs-property">seen</span> = nextSeen; <span class="hljs-comment">/*  问题：直接修改了已有的元素  */</span> <br><span class="hljs-title function_">setMyList</span>(myNextList);<br></code></pre></td></tr></table></div></figure><p>可以使用 <code>map</code> 在没有 mutation 的前提下将一个旧的元素替换成更新的版本。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-78ntiklqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-78ntiklqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setMyList</span>(myList.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">artwork</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (artwork.<span class="hljs-property">id</span> === artworkId) &#123;<br>    <span class="hljs-comment">/*  创建包含变更的新对象  */</span> <br>    <span class="hljs-keyword">return</span> &#123; ...artwork, <span class="hljs-attr">seen</span>: nextSeen &#125;;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">/*  没有变更  */</span> <br>    <span class="hljs-keyword">return</span> artwork;<br>  &#125;<br>&#125;));<br></code></pre></td></tr></table></div></figure><p>此处的 <code>...</code> 是一个对象展开语法，被用来<a href="http://localhost:3000/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax">创建一个对象的拷贝</a>.</p><p>通过这种方式，没有任何现有的 state 中的元素会被改变，bug 也就被修复了。</p><p>通常来讲，你应该只直接修改你刚刚创建的对象。如果你正在插入一个新的 artwork，你可以修改它，但是如果你想要改变的是 state 中已经存在的东西，你就需要先拷贝一份了。</p><p><mark>使用 Immer 编写简洁的更新逻辑</mark>：在没有 mutation 的前提下更新嵌套数组可能会变得有点重复。<a href="http://localhost:3000/learn/updating-objects-in-state#write-concise-update-logic-with-immer">就像对对象一样</a>:</p><ul><li>通常情况下，你应该不需要更新处于非常深层级的 state 。如果你有此类需求，你或许需要<a href="http://localhost:3000/learn/choosing-the-state-structure#avoid-deeply-nested-state">调整一下数据的结构</a>，让数据变得扁平一些。</li><li>如果你不想改变 state 的数据结构，你也许会更喜欢使用 <a href="https://github.com/immerjs/use-immer">Immer</a> ，它让你可以继续使用方便的，但会直接修改原值的语法，并负责为你生成拷贝值。</li></ul><p>下面是我们用 Immer 来重写的艺术愿望清单的例子：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kz4sj7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kz4sj7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useImmer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;use-immer&#x27;</span>;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialList = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Big Bellies&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Lunar Landscape&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Terracotta Army&#x27;</span>, <span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">BucketList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [myList, updateMyList] = <span class="hljs-title function_">useImmer</span>(<br>    initialList<br>  );<br>  <span class="hljs-keyword">const</span> [yourList, updateYourList] = <span class="hljs-title function_">useImmer</span>(<br>    initialList<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleMyList</span>(<span class="hljs-params">id, nextSeen</span>) &#123;<br>    <span class="hljs-title function_">updateMyList</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> artwork = draft.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span><br>        a.<span class="hljs-property">id</span> === id<br>      );<br>      artwork.<span class="hljs-property">seen</span> = nextSeen;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleYourList</span>(<span class="hljs-params">artworkId, nextSeen</span>) &#123;<br>    <span class="hljs-title function_">updateYourList</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> artwork = draft.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span><br>        a.<span class="hljs-property">id</span> === artworkId<br>      );<br>      artwork.<span class="hljs-property">seen</span> = nextSeen;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>艺术愿望清单<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我想看的艺术清单：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;myList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggleMyList&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你想看的艺术清单：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ItemList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">artworks</span>=<span class="hljs-string">&#123;yourList&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggle</span>=<span class="hljs-string">&#123;handleToggleYourList&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ItemList</span>(<span class="hljs-params">&#123; artworks, onToggle &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;artworks.map(artwork =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;artwork.id&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;artwork.seen&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                onToggle(</span><br><span class="language-xml">                  artwork.id,</span><br><span class="language-xml">                  e.target.checked</span><br><span class="language-xml">                );</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;artwork.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>请注意当使用 Immer 时，类似 <code>artwork.seen = nextSeen</code> 这种会产生 mutation 的语法不会再有任何问题了：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-u2te2nlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-u2te2nlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">updateMyTodos</span>(<span class="hljs-function"><span class="hljs-params">draft</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> artwork = draft.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a.<span class="hljs-property">id</span> === artworkId);<br>  artwork.<span class="hljs-property">seen</span> = nextSeen;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>这是因为你并不是在直接修改原始的 state，而是在修改 Immer 提供的一个特殊的 <code>draft</code> 对象。同理，你也可以为 <code>draft</code> 的内容使用 <code>push()</code> 和 <code>pop()</code> 这些会直接修改原值的方法。</p><p>在幕后，Immer 总是会根据你对 <code>draft</code> 的修改来从头开始构建下一个 state。这使得你的事件处理程序非常的简洁，同时也不会直接修改 state。</p><h1 id="五-状态管理"><a href="#五-状态管理" class="headerlink" title="五.状态管理"></a>五.状态管理</h1><h2 id="1-用状态响应输入"><a href="#1-用状态响应输入" class="headerlink" title="1.用状态响应输入"></a>1.用状态响应输入</h2><p>React 控制 UI 的方式是声明式的。你不必直接控制 UI 的各个部分，只需要声明组件可以处于的不同状态，并根据用户的输入在它们之间切换。使用 React，你不用直接从代码层面修改 UI。例如，不用编写诸如“禁用按钮”、“启用按钮”、“显示成功消息”等命令。相反，你只需要描述组件在不同状态（“初始状态”、“输入状态”、“成功状态”）下希望展现的 UI，然后根据用户输入触发状态更改。</p><p>下面是一个使用 React 编写的反馈表单。请注意看它是如何使用 <code>status</code> 这个状态变量来决定启用或禁用提交按钮，以及是否显示成功消息的。</p><p>想象一个允许用户提交一个答案的表单：</p><ul><li>当你向表单输入数据时，“提交”按钮会随之变成可用状态</li><li>当你点击“提交”后，表单和提交按钮都会随之变成不可用状态，并且会加载动画会随之出现</li><li>如果网络请求成功，表单会随之隐藏，同时“提交成功”的信息会随之出现</li><li>如果网络请求失败，错误信息会随之出现，同时表单又变为可用状态</li></ul><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cl2hvulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cl2hvulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>答对了！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;submitting&#x27;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">submitForm</span>(answer);<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br>      <span class="hljs-title function_">setError</span>(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTextareaChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setAnswer</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>城市测验<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        哪个城市有把空气变成饮用水的广告牌？</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleTextareaChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">answer.length</span> === <span class="hljs-string">0</span> ||</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&gt;</span></span><br><span class="language-xml">          提交</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;error !== null &amp;&amp;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Error&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;error.message&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">submitForm</span>(<span class="hljs-params">answer</span>) &#123;<br>  <span class="hljs-comment">// 模拟接口请求</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> shouldError = answer.<span class="hljs-title function_">toLowerCase</span>() !== <span class="hljs-string">&#x27;lima&#x27;</span><br>      <span class="hljs-keyword">if</span> (shouldError) &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;猜的不错，但答案不对。再试试看吧！&#x27;</span>));<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">resolve</span>();<br>      &#125;<br>    &#125;, <span class="hljs-number">1500</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p><mark>声明式地考虑 UI 的过程</mark>：</p><ol><li><p><mark>定位组件中不同的视图状态</mark>：需要去可视化 UI 界面中用户可能看到的所有不同的“状态”：</p><ul><li>无数据：表单有一个不可用状态的“提交”按钮。</li><li>输入中：表单有一个可用状态的“提交”按钮。</li><li>提交中：表单完全处于不可用状态，加载动画出现。</li><li>成功时：显示“成功”的消息而非表单。</li><li>错误时：与输入状态类似，但会多错误的消息。</li></ul><p>如果一个组件有多个视图状态，你可以很方便地将它们展示在一个页面中：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-va46c9lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-va46c9lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Form</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Form.js&#x27;</span>;<br><br><span class="hljs-keyword">let</span> statuses = [<br>  <span class="hljs-string">&#x27;empty&#x27;</span>,<br>  <span class="hljs-string">&#x27;typing&#x27;</span>,<br>  <span class="hljs-string">&#x27;submitting&#x27;</span>,<br>  <span class="hljs-string">&#x27;success&#x27;</span>,<br>  <span class="hljs-string">&#x27;error&#x27;</span>,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      &#123;statuses.map(status =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;status&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Form (&#123;status&#125;):<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&#123;status&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Form.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3ts94jlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3ts94jlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params">&#123; status &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>That&#x27;s right!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;empty&#x27;</span> ||</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&gt;</span></span><br><span class="language-xml">        Submit</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;status === &#x27;error&#x27; &amp;&amp;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Error&quot;</span>&gt;</span></span><br><span class="language-xml">          Good guess but a wrong answer. Try again!</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>确定是什么触发了这些状态的改变</mark>：可以触发 state 的更新来响应两种输入：</p><ul><li>人为输入。比如点击按钮、在表单中输入内容，或导航到链接。【人为输入通常需要 <a href="http://localhost:3000/learn/responding-to-events">事件处理函数</a>！】</li><li>计算机输入。比如网络请求得到反馈、定时器被触发，或加载一张图片。</li></ul><p>以上两种情况中，你必须设置 <a href="http://localhost:3000/learn/state-a-components-memory#anatomy-of-usestate">state 变量</a> 去更新 UI。对于正在开发中的表单来说，你需要改变 state 以响应几个不同的输入：</p><ul><li>改变输入框中的文本时（人为）应该根据输入框的内容是否是空值，从而决定将表单的状态从空值状态切换到输入中或切换回原状态。</li><li>点击提交按钮时（人为）应该将表单的状态切换到提交中的状态。</li><li>网络请求成功后（计算机）应该将表单的状态切换到成功的状态。</li><li>网络请求失败后（计算机）应该将表单的状态切换到失败的状态，与此同时，显示错误信息。</li></ul></li><li><p><mark>通过 <code>useState</code> 表示内存中的 state</mark>：state 的每个部分都是“处于变化中的”，并且你需要让“变化的部分”尽可能的少。</p><p>先从绝对必须存在的状态开始。例如，你需要存储输入的 <code>answer</code> 以及用于存储最后一个错误的 <code>error</code> （如果存在的话）：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lkq315lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lkq315lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></div></figure><p>接下来，你需要一个状态变量来代表你想要显示的那个可视状态。通常有多种方式在内存中表示它，因此你需要进行实验。</p><p>如果你很难立即想出最好的办法，那就先从添加足够多的 state 开始，确保所有可能的视图状态都囊括其中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5xcplglqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5xcplglqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [isEmpty, setIsEmpty] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">const</span> [isTyping, setIsTyping] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [isSubmitting, setIsSubmitting] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [isSuccess, setIsSuccess] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [isError, setIsError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></div></figure><p>你最初的想法或许不是最好的，但是没关系，重构 state 也是步骤中的一部分！</p></li><li><p><mark>删除任何不必要的 state 变量</mark>：防止出现在内存中的 state 不代表任何你希望用户看到的有效 UI 的情况。</p><p>关于 state 变量的问题：</p><ul><li>这个 state 是否会导致矛盾？例如，<code>isTyping</code> 与 <code>isSubmitting</code> 的状态不能同时为 <code>true</code>。矛盾的产生通常说明了这个 state 没有足够的约束条件。两个布尔值有四种可能的组合，但是只有三种对应有效的状态。为了将“不可能”的状态移除，你可以将 <code>&#39;typing&#39;</code>、<code>&#39;submitting&#39;</code> 以及 <code>&#39;success&#39;</code> 这三个中的其中一个与 <code>status</code> 结合。</li><li>相同的信息是否已经在另一个 state 变量中存在？另一个矛盾：<code>isEmpty</code> 和 <code>isTyping</code> 不能同时为 <code>true</code>。通过使它们成为独立的 state 变量，可能会导致它们不同步并导致 bug。幸运的是，你可以移除 <code>isEmpty</code> 转而用 <code>message.length === 0</code>。</li><li>你是否可以通过另一个 state 变量的相反值得到相同的信息？<code>isError</code> 是多余的，因为你可以检查 <code>error !== null</code>。</li></ul><p>在清理之后，你只剩下 3 个（从原本的 7 个！）<em>必要</em>的 state 变量：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fyhfowlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fyhfowlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>); <span class="hljs-comment">// &#x27;typing&#x27;, &#x27;submitting&#x27;, or &#x27;success&#x27;</span><br></code></pre></td></tr></table></div></figure><p>正是因为你不能在不破坏功能的情况下删除其中任何一个状态变量，因此你可以确定这些都是必要的。</p><p><mark>通过 reducer 来减少“不可能” state</mark>：尽管这三个变量对于表示这个表单的状态来说已经足够好了，仍然是有一些中间状态并不是完全有意义的。例如一个非空的 <code>error</code> 当 <code>status</code> 的值为 <code>success</code> 时没有意义。为了更精确地模块化状态，你可以 <a href="http://localhost:3000/learn/extracting-state-logic-into-a-reducer">将状态提取到一个 reducer 中</a>。Reducer 可以让您合并多个状态变量到一个对象中并巩固所有相关的逻辑！</p></li><li><p><mark>连接事件处理函数以设置 state</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f931nllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f931nllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [answer, setAnswer] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>That&#x27;s right!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;submitting&#x27;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">submitForm</span>(answer);<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br>      <span class="hljs-title function_">setError</span>(err);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleTextareaChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setAnswer</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>City quiz<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        In which city is there a billboard that turns air into drinkable water?</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleTextareaChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">answer.length</span> === <span class="hljs-string">0</span> ||</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">status</span> === <span class="hljs-string">&#x27;submitting&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&gt;</span></span><br><span class="language-xml">          Submit</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;error !== null &amp;&amp;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Error&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;error.message&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">submitForm</span>(<span class="hljs-params">answer</span>) &#123;<br>  <span class="hljs-comment">// Pretend it&#x27;s hitting the network.</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> shouldError = answer.<span class="hljs-title function_">toLowerCase</span>() !== <span class="hljs-string">&#x27;lima&#x27;</span><br>      <span class="hljs-keyword">if</span> (shouldError) &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Good guess but a wrong answer. Try again!&#x27;</span>));<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">resolve</span>();<br>      &#125;<br>    &#125;, <span class="hljs-number">1500</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>将所有的交互变为 state 的改变，可以让你避免之后引入新的视图状态后导致现有 state 被破坏。同时也使你在不必改变交互逻辑的情况下，更改每个状态对应的 UI。</p></li></ol><h2 id="2-选择state结构"><a href="#2-选择state结构" class="headerlink" title="2.选择state结构"></a>2.选择state结构</h2><p><mark>构建 state 的原则</mark>：</p><ol><li><p><mark>合并关联的 state</mark>。如果你总是同时更新两个或更多的 state 变量，请考虑将它们合并为一个单独的 state 变量。</p><p>有时候你可能会不确定是使用单个 state 变量还是多个 state 变量。</p><p>你会像下面这样做吗？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s3k0shlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s3k0shlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [x, setX] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">const</span> [y, setY] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p>或这样？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-64bdxxlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-64bdxxlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;);<br></code></pre></td></tr></table></div></figure><p>从技术上讲，你可以使用其中任何一种方法。但是，如果某两个 state 变量总是一起变化，则将它们统一成一个 state 变量可能更好。</p><p><mark>如果你的 state 变量是一个对象时，请记住，<a href="http://localhost:3000/learn/updating-objects-in-state">你不能只更新其中的一个字段</a> 而不显式复制其他字段</mark>。例如，在上面的例子中，你不能写成 <code>setPosition(&#123; x: 100 &#125;)</code>，因为它根本就没有 <code>y</code> 属性! 相反，如果你想要仅设置 <code>x</code>，则可执行 <code>setPosition(&#123; ...position, x: 100 &#125;)</code>，或将它们分成两个 state 变量，并执行 <code>setX(100)</code>。</p></li><li><p><mark>避免互相矛盾的 state</mark>。当 state 结构中存在多个相互矛盾或“不一致”的 state 时，你就可能为此会留下隐患。应尽量避免这种情况。</p><p>下面是带有 <code>isSending</code> 和 <code>isSent</code> 两个 state 变量的酒店反馈表单：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0qr5hmlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0qr5hmlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FeedbackForm</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [isSending, setIsSending] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [isSent, setIsSent] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendMessage</span>(text);<br>    <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-title function_">setIsSent</span>(<span class="hljs-literal">true</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (isSent) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Thanks for feedback!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>How was your stay at The Prancing Pony?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        Send</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isSending &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sending...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 假装发送一条消息。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params">text</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>尽管这段代码是有效的，但也会让一些 state “极难处理”。例如，如果你忘记同时调用 <code>setIsSent</code> 和 <code>setIsSending</code>，则可能会出现 <code>isSending</code> 和 <code>isSent</code> 同时为 <code>true</code> 的情况。你的组件越复杂，你就越难理解发生了什么。</p><p>因为 <code>isSending</code> 和 <code>isSent</code> 不应同时为 <code>true</code>，所以最好用一个 <code>status</code> 变量来代替它们，这个 state 变量可以采取三种有效状态其中之一：<code>&#39;typing&#39;</code> (初始), <code>&#39;sending&#39;</code>, 和 <code>&#39;sent&#39;</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2lnjqslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2lnjqslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FeedbackForm</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;sending&#x27;</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendMessage</span>(text);<br>    <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;sent&#x27;</span>);<br>  &#125;<br><span class="hljs-comment">/* 常量   */</span><br>  <span class="hljs-keyword">const</span> isSending = status === <span class="hljs-string">&#x27;sending&#x27;</span>;<br>  <span class="hljs-keyword">const</span> isSent = status === <span class="hljs-string">&#x27;sent&#x27;</span>;<br><br>  <span class="hljs-keyword">if</span> (isSent) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Thanks for feedback!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>How was your stay at The Prancing Pony?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        Send</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isSending &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sending...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">/*  假装发送一条消息。  */</span> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params">text</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>避免冗余的 state</mark>。如果你能在渲染期间从组件的 props 或其现有的 state 变量中计算出一些信息，则不应将这些信息放入该组件的 state 中。</p><p><mark>不要在 state 中镜像 props</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-j25sozlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-j25sozlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; messageColor &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [color, setColor] = <span class="hljs-title function_">useState</span>(messageColor);   <br>&#125;<br></code></pre></td></tr></table></div></figure><p>这里，一个 <code>color</code> state 变量被初始化为 <code>messageColor</code> 的 prop 值。这段代码的问题在于，如果父组件稍后传递不同的 <code>messageColor</code> 值（例如，将其从 <code>&#39;blue&#39;</code> 更改为 <code>&#39;red&#39;</code>），则 <code>color</code> state 变量将不会更新！ state 仅在第一次渲染期间初始化。</p><p>这就是为什么在 state 变量中，“镜像”一些 prop 属性会导致混淆的原因。相反，你要在代码中直接使用 <code>messageColor</code> 属性。如果你想给它起一个更短的名称，请使用常量：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ycirqglqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ycirqglqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; messageColor &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> color = messageColor;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这种写法就不会与从父组件传递的属性失去同步。</p><p>只有当你 想要 忽略特定 props 属性的所有更新时，将 props “镜像”到 state 才有意义。按照惯例，prop 名称以 <code>initial</code> 或 <code>default</code> 开头，以阐明该 prop 的新值将被忽略：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kx55vdlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kx55vdlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">&#123; initialColor &#125;</span>) &#123;<br>  <span class="hljs-comment">// 这个 `color` state 变量用于保存 `initialColor` 的 初始值。</span><br>  <span class="hljs-comment">// 对于 `initialColor` 属性的进一步更改将被忽略。</span><br>  <span class="hljs-keyword">const</span> [color, setColor] = <span class="hljs-title function_">useState</span>(initialColor)<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>避免重复的 state</mark>。当同一数据在多个 state 变量之间或在多个嵌套对象中重复时，这会很难保持它们同步。应尽可能减少重复。</p><p>下面这个菜单列表组件可以让你在多种旅行小吃中选择一个：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tjowrnlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tjowrnlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> initialItems = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;pretzels&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;crispy seaweed&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;granola bar&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>(initialItems);<br>  <span class="hljs-keyword">const</span> [selectedItem, setSelectedItem] = <span class="hljs-title function_">useState</span>(<br>    items[<span class="hljs-number">0</span>]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>What&#x27;s your travel snack?<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;items.map(item =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;item.title&#125;</span><br><span class="language-xml">            &#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setSelectedItem(item);</span><br><span class="language-xml">            &#125;&#125;&gt;Choose<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You picked &#123;selectedItem.title&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231108141335706.png" alt="image-20231108141335706" style="zoom:50%;" /><p>当前，它将所选元素作为对象存储在 <code>selectedItem</code> state 变量中。然而，这并不好：<code>selectedItem</code> 的内容与 <code>items</code> 列表中的某个项是同一个对象。 这意味着关于该项本身的信息在两个地方产生了重复。</p><p>为什么这是个问题？让我们使每个项目都可以编辑：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-izxsvulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-izxsvulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> initialItems = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;pretzels&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;crispy seaweed&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;granola bar&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>(initialItems);<br>  <span class="hljs-keyword">const</span> [selectedItem, setSelectedItem] = <span class="hljs-title function_">useState</span>(<br>    items[<span class="hljs-number">0</span>]<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleItemChange</span>(<span class="hljs-params">id, e</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(items.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (item.<span class="hljs-property">id</span> === id) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...item,<br>          <span class="hljs-attr">title</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>        &#125;;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> item;<br>      &#125;<br>    &#125;));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>What&#x27;s your travel snack?<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;items.map((item, index) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                handleItemChange(item.id, e)</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setSelectedItem(item);</span><br><span class="language-xml">            &#125;&#125;&gt;Choose<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You picked &#123;selectedItem.title&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231108141408780.png" alt="image-20231108141408780" style="zoom:50%;" /><p>如果你首先单击菜单上的“Choose” 然后 编辑它，输入会更新，但底部的标签不会反映编辑内容。 这是因为你有重复的 state，并且你忘记更新了 <code>selectedItem</code>。</p><p>尽管你也可以更新 <code>selectedItem</code>，但更简单的解决方法是消除重复项。在下面这个例子中，你将 <code>selectedId</code> 保存在 state 中，而不是在 <code>selectedItem</code> 对象中（它创建了一个与 <code>items</code> 内重复的对象），然后 通过搜索 <code>items</code> 数组中具有该 ID 的项，以此获取 <code>selectedItem</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9grfx3lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9grfx3lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> initialItems = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;pretzels&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;crispy seaweed&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;granola bar&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>(initialItems);<br>  <span class="hljs-keyword">const</span> [selectedId, setSelectedId] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> selectedItem = items.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span><br>    item.<span class="hljs-property">id</span> === selectedId<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleItemChange</span>(<span class="hljs-params">id, e</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(items.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (item.<span class="hljs-property">id</span> === id) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...item,<br>          <span class="hljs-attr">title</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>        &#125;;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> item;<br>      &#125;<br>    &#125;));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>What&#x27;s your travel snack?<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;items.map((item, index) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">                handleItemChange(item.id, e)</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            /&gt;</span><br><span class="language-xml">            &#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setSelectedId(item.id);</span><br><span class="language-xml">            &#125;&#125;&gt;Choose<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You picked &#123;selectedItem.title&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231108141513225.png" alt="image-20231108141513225" style="zoom:50%;" /><p>如果你编辑 selected 元素，下面的消息将立即更新。这是因为 <code>setItems</code> 会<mark>触发重新渲染</mark>，而 <code>items.find(...)</code> 会找到带有更新文本的元素。你不需要在 state 中保存 选定的元素，因为只有 选定的 ID 是必要的。其余的可以在渲染期间计算。</p></li><li><p><mark>避免深度嵌套的 state</mark>。深度分层的 state 更新起来不是很方便。如果可能的话，最好以扁平化方式构建 state。</p><p>一个由行星、大陆和国家组成的旅行计划。你可能会尝试使用嵌套对象和数组来构建它的 state：</p><p>place.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-oxg9islqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-oxg9islqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> initialTravelPlan = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;(Root)&#x27;</span>,<br>  <span class="hljs-attr">childPlaces</span>: [&#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Earth&#x27;</span>,<br>    <span class="hljs-attr">childPlaces</span>: [&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Africa&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Botswana&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Egypt&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Kenya&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Madagascar&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Morocco&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">8</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Nigeria&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">9</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;South Africa&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;]<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Americas&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">11</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Argentina&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">12</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">13</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Barbados&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">14</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Canada&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">15</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Jamaica&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">16</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Mexico&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">17</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Trinidad and Tobago&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">18</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Venezuela&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;]<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">19</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Asia&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">20</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;China&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">21</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;India&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">22</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Singapore&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">23</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;South Korea&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">24</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Thailand&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">25</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Vietnam&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: []<br>      &#125;]<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">26</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Europe&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">27</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Croatia&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">28</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;France&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">29</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Germany&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">30</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Italy&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">31</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Portugal&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">32</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Spain&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">33</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Turkey&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;]<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">34</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Oceania&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: [&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">35</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Australia&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">36</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Bora Bora (French Polynesia)&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">37</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Easter Island (Chile)&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">38</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Fiji&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">39</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Hawaii (the USA)&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">40</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;New Zealand&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;, &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">41</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Vanuatu&#x27;</span>,<br>        <span class="hljs-attr">childPlaces</span>: [],<br>      &#125;]<br>    &#125;]<br>  &#125;, &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">42</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Moon&#x27;</span>,<br>    <span class="hljs-attr">childPlaces</span>: [&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">43</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Rheita&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">44</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Piccolomini&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">45</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Tycho&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []<br>    &#125;]<br>  &#125;, &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">46</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Mars&#x27;</span>,<br>    <span class="hljs-attr">childPlaces</span>: [&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">47</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Corn Town&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []<br>    &#125;, &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">48</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Green Hill&#x27;</span>,<br>      <span class="hljs-attr">childPlaces</span>: []      <br>    &#125;]<br>  &#125;]<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9qrfgmlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9qrfgmlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; initialTravelPlan &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./places.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">PlaceTree</span>(<span class="hljs-params">&#123; place &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> childPlaces = place.<span class="hljs-property">childPlaces</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      &#123;place.title&#125;</span><br><span class="language-xml">      &#123;childPlaces.length &gt; 0 &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">          &#123;childPlaces.map(place =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">PlaceTree</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;place.id&#125;</span> <span class="hljs-attr">place</span>=<span class="hljs-string">&#123;place&#125;</span> /&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TravelPlan</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [plan, setPlan] = <span class="hljs-title function_">useState</span>(initialTravelPlan);<br>  <span class="hljs-keyword">const</span> planets = plan.<span class="hljs-property">childPlaces</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Places to visit<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        &#123;planets.map(place =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">PlaceTree</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;place.id&#125;</span> <span class="hljs-attr">place</span>&#123;<span class="hljs-attr">place</span>&#125; /&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>假设你想添加一个按钮来删除一个你已经去过的地方。你会怎么做呢？<a href="http://localhost:3000/learn/updating-objects-in-state#updating-a-nested-object">更新嵌套的 state</a> 需要从更改部分一直向上复制对象。删除一个深度嵌套的地点将涉及复制其整个父级地点链。这样的代码可能非常冗长。</p><p>如果 state 嵌套太深，难以轻松更新，可以考虑将其“扁平化”。 这里有一个方法可以重构上面这个数据。不同于树状结构，每个节点的 <code>place</code> 都是一个包含 其子节点 的数组，你可以让每个节点的 <code>place</code> 作为数组保存 其子节点的 ID。然后存储一个节点 ID 与相应节点的映射关系。</p><p>这个数据重组可能会让你想起看到一个数据库表：</p><p>place.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8nq8f4lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8nq8f4lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> initialTravelPlan = &#123;<br>  <span class="hljs-number">0</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;(Root)&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">42</span>, <span class="hljs-number">46</span>],<br>  &#125;,<br>  <span class="hljs-number">1</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Earth&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">34</span>]<br>  &#125;,<br>  <span class="hljs-number">2</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Africa&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> , <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>  &#125;, <br>  <span class="hljs-number">3</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Botswana&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">4</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Egypt&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">5</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Kenya&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">6</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Madagascar&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;, <br>  <span class="hljs-number">7</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Morocco&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">8</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">8</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Nigeria&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">9</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">9</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;South Africa&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">10</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Americas&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>],   <br>  &#125;,<br>  <span class="hljs-number">11</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Argentina&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">12</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Brazil&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">13</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">13</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Barbados&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;, <br>  <span class="hljs-number">14</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">14</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Canada&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">15</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">15</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Jamaica&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">16</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">16</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Mexico&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">17</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">17</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Trinidad and Tobago&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">18</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Venezuela&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">19</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">19</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Asia&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>],   <br>  &#125;,<br>  <span class="hljs-number">20</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;China&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">21</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;India&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">22</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Singapore&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">23</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">23</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;South Korea&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">24</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">24</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Thailand&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">25</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">25</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Vietnam&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">26</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">26</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Europe&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>],   <br>  &#125;,<br>  <span class="hljs-number">27</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">27</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Croatia&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">28</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">28</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;France&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">29</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">29</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Germany&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">30</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Italy&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">31</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">31</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Portugal&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">32</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">32</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Spain&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">33</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">33</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Turkey&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">34</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">34</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Oceania&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>],   <br>  &#125;,<br>  <span class="hljs-number">35</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">35</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Australia&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">36</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">36</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Bora Bora (French Polynesia)&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">37</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">37</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Easter Island (Chile)&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">38</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">38</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Fiji&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">39</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Hawaii (the USA)&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">40</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;New Zealand&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">41</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">41</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Vanuatu&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">42</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">42</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Moon&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>]<br>  &#125;,<br>  <span class="hljs-number">43</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">43</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Rheita&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">44</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">44</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Piccolomini&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">45</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">45</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Tycho&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">46</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">46</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Mars&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: [<span class="hljs-number">47</span>, <span class="hljs-number">48</span>]<br>  &#125;,<br>  <span class="hljs-number">47</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">47</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Corn Town&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;,<br>  <span class="hljs-number">48</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">48</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Green Hill&#x27;</span>,<br>    <span class="hljs-attr">childIds</span>: []<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>App.jsx：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yhuorflqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yhuorflqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; initialTravelPlan &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./places.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">PlaceTree</span>(<span class="hljs-params">&#123; id, placesById &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> place = placesById[id];<br>  <span class="hljs-keyword">const</span> childIds = place.<span class="hljs-property">childIds</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      &#123;place.title&#125;</span><br><span class="language-xml">      &#123;childIds.length &gt; 0 &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">          &#123;childIds.map(childId =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">PlaceTree</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;childId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;childId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">placesById</span>=<span class="hljs-string">&#123;placesById&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TravelPlan</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [plan, setPlan] = <span class="hljs-title function_">useState</span>(initialTravelPlan);<br>  <span class="hljs-keyword">const</span> root = plan[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">const</span> planetIds = root.<span class="hljs-property">childIds</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Places to visit<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        &#123;planetIds.map(id =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">PlaceTree</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">placesById</span>=<span class="hljs-string">&#123;plan&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><mark>现在 state 已经“扁平化”（也称为“规范化”），更新嵌套项会变得更加容易，并且有助于确保在嵌套对象的不同部分中没有重复。</mark></p><p>现在要删除一个地点，您只需要更新两个 state 级别：</p><ul><li>其 <strong>父级</strong> 地点的更新版本应该从其 <code>childIds</code> 数组中排除已删除的 ID。</li><li>其根级“表”对象的更新版本应包括父级地点的更新版本。</li></ul><p>有时候，你也可以通过将一些嵌套 state 移动到子组件中来减少 state 的嵌套。这对于不需要保存的短暂 UI 状态非常有效，比如一个选项是否被悬停。</p></li></ol><p>这些原则背后的目标是 使 state 易于更新而不引入错误。</p><h2 id="3-在组件间共享状态"><a href="#3-在组件间共享状态" class="headerlink" title="3.在组件间共享状态"></a>3.在组件间共享状态</h2><p>有时候，你希望两个组件的状态始终同步更改。要实现这一点，可以将相关 state 从这两个组件上移除，并把 state 放到它们的公共父级，再通过 props 将 state 传递给这两个组件。这被称为“<mark>状态提升</mark>”。</p><p>父组件 <code>Accordion</code> 渲染了 2 个独立的 <code>Panel</code> 组件。</p><p><code>Accordion</code></p><ul><li><code>Panel</code></li><li><code>Panel</code></li></ul><p>每个 <code>Panel</code> 组件都有一个布尔值 <code>isActive</code>，用于控制其内容是否可见：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tnpwqilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tnpwqilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123; title, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isActive, setIsActive] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;isActive ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsActive(true)&#125;&gt;</span><br><span class="language-xml">          显示</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Accordion</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>哈萨克斯坦，阿拉木图<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于&quot;</span>&gt;</span></span><br><span class="language-xml">        阿拉木图人口约200万，是哈萨克斯坦最大的城市。它在 1929 年到 1997 年间都是首都。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;词源&quot;</span>&gt;</span></span><br><span class="language-xml">        这个名字来自于 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;kk-KZ&quot;</span>&gt;</span>алма<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>，哈萨克语中“苹果”的意思，经常被翻译成“苹果之乡”。事实上，阿拉木图的周边地区被认为是苹果的发源地，<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;la&quot;</span>&gt;</span>Malus sieversii<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 被认为是现今苹果的祖先。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>点击其中一个面板中的按钮并不会影响另外一个，他们是独立的。</p><img src="image-20231109094105013.png" alt="image-20231109094105013" style="zoom:50%;" /><img src="image-20231109094146988.png" alt="image-20231109094146988" style="zoom:50%;" /><p>**<mark>假设现在您想改变这种行为，以便在任何时候只展开一个面板</mark>**。在这种设计下，展开第 2 个面板应会折叠第 1 个面板。您该如何做到这一点呢？”</p><p>要协调好这两个面板，我们需要分 3 步将状态“提升”到他们的父组件中。</p><ol><li><p>从子组件中 <strong>移除</strong> state：先从 <code>Panel</code> 组件中 <strong>删除下面这一行</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bqkad4lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bqkad4lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [isActive, setIsActive] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></div></figure><p>然后，把 <code>isActive</code> 加入 <code>Panel</code> 组件的 <code>props</code> 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nwurkilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nwurkilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123; title, children, isActive &#125;</span>) &#123;<br></code></pre></td></tr></table></div></figure><p>现在 <code>Panel</code> 的父组件就可以通过 <a href="http://localhost:3000/learn/passing-props-to-a-component">向下传递 prop</a> 来 <strong>控制</strong> <code>isActive</code>。但相反地，<code>Panel</code> 组件对 <code>isActive</code> 的值 <strong>没有控制权</strong> —— 现在完全由父组件决定！</p></li><li><p>父组件 <strong>传递</strong> 硬编码数据：为了实现状态提升，必须定位到你想协调的 <strong>两个</strong> 子组件最近的公共父组件。在这个例子中，公共父组件是 <code>Accordion</code>。因为它位于两个面板之上，可以控制它们的 props，所以它将成为当前激活面板的“控制之源”。通过 <code>Accordion</code> 组件将硬编码值 <code>isActive</code>（例如 <code>true</code> ）传递给两个面板：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-o78kkvlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-o78kkvlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Accordion</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>哈萨克斯坦，阿拉木图<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于&quot;</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span></span><br><span class="language-xml">        阿拉木图人口约200万，是哈萨克斯坦最大的城市。它在 1929 年到 1997 年间都是首都。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;词源&quot;</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span></span><br><span class="language-xml">        这个名字来自于 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;kk-KZ&quot;</span>&gt;</span>алма<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>，哈萨克语中“苹果”的意思，经常被翻译成“苹果之乡”。事实上，阿拉木图的周边地区被认为是苹果的发源地，<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;la&quot;</span>&gt;</span>Malus sieversii<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 被认为是现今苹果的祖先。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123; title, children, isActive &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;isActive ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsActive(true)&#125;&gt;</span><br><span class="language-xml">          显示</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><mark>为共同的父组件添加 state ，并将其与事件处理函数一起向下传递</mark>：状态提升通常会改变原状态的数据存储类型。</p><p>在这个例子中，一次只能激活一个面板。这意味着 <code>Accordion</code> 这个父组件需要记录 <strong>哪个</strong> 面板是被激活的面板。我们可以用数字作为当前被激活 <code>Panel</code> 的索引，而不是 <code>boolean</code> 值：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-im9v26lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-im9v26lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [activeIndex, setActiveIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p>当 <code>activeIndex</code> 为 <code>0</code> 时，激活第一个面板，为 <code>1</code> 时，激活第二个面板。</p><p>在任意一个 <code>Panel</code> 中点击“显示”按钮都需要更改 <code>Accordion</code> 中的激活索引值。 <code>Panel</code> 中无法直接设置状态 <code>activeIndex</code> 的值，因为该状态是在 <code>Accordion</code> 组件内部定义的。 <code>Accordion</code> 组件需要 <strong>显式允许</strong> <code>Panel</code> 组件通过 <a href="http://localhost:3000/learn/responding-to-events#passing-event-handlers-as-props">将事件处理程序作为 prop 向下传递</a> 来更改其状态：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9o52z0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9o52z0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Panel</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">0&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(0)&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Panel</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">1&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(1)&#125;</span><br><span class="language-xml">  &gt;</span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br>&lt;/&gt;<br></code></pre></td></tr></table></div></figure><p>现在 <code>Panel</code> 组件中的 <code>&lt;button&gt;</code> 将使用 <code>onShow</code> 这个属性作为其点击事件的处理程序：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4leb53lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4leb53lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Accordion</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [activeIndex, setActiveIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>哈萨克斯坦，阿拉木图<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">0&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(0)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        阿拉木图人口约200万，是哈萨克斯坦最大的城市。它在 1929 年到 1997 年间都是首都。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;词源&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">1&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(1)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        这个名字来自于 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;kk-KZ&quot;</span>&gt;</span>алма<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>，哈萨克语中“苹果”的意思，经常被翻译成“苹果之乡”。事实上，阿拉木图的周边地区被认为是苹果的发源地，<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;la&quot;</span>&gt;</span>Malus sieversii<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 被认为是现今苹果的祖先。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  title,</span><br><span class="hljs-params">  children,</span><br><span class="hljs-params">  isActive,</span><br><span class="hljs-params">  onShow</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;isActive ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onShow&#125;</span>&gt;</span></span><br><span class="language-xml">          显示</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ol><p>这样，<code>Accordion</code> 组件就可以控制 2 个 <code>Panel</code> 组件，保证同一时间只能展开一个。我们就完成了对状态的提升！将状态移至公共父组件中可以让你更好的管理这两个面板。使用激活索引值代替之前的 <code>是否显示</code> 标识确保了一次只能激活一个面板。而通过向下传递事件处理函数可以让子组件修改父组件的状态。</p><img src="image-20231109103148744.png" alt="image-20231109103148744" style="zoom:50%;" /><p><mark>受控组件和非受控组件</mark>：通常我们把包含“不受控制”状态的组件称为“非受控组件”。例如，最开始带有 <code>isActive</code> 状态变量的 <code>Panel</code> 组件就是不受控制的，因为其父组件无法控制面板的激活状态。</p><p>相反，当组件中的重要信息是由 <code>props</code> 而不是其自身状态驱动时，就可以认为该组件是“受控组件”。这就允许父组件完全指定其行为。最后带有 <code>isActive</code> 属性的 <code>Panel</code> 组件是由 <code>Accordion</code> 组件控制的。</p><p>非受控组件通常很简单，因为它们不需要太多配置。但是当你想把它们组合在一起使用时，就不那么灵活了。受控组件具有最大的灵活性，但它们需要父组件使用 <code>props</code> 对其进行配置。</p><p>在实践中，“受控”和“非受控”并不是严格的技术术语——通常每个组件都同时拥有内部状态和 <code>props</code>。然而，这对于组件该如何设计和提供什么样功能的讨论是有帮助的。</p><p>当编写一个组件时，你应该考虑哪些信息应该受控制（通过 <code>props</code>），哪些信息不应该受控制（通过 <code>state</code>）。当然，你可以随时改变主意并重构代码。</p><hr><p><mark>每个状态都对应唯一的数据源 </mark>：在 <code>React</code> 应用中，很多组件都有自己的状态。一些状态可能“活跃”在叶子组件（树形结构最底层的组件）附近，例如输入框。另一些状态可能在应用程序顶部“活动”。例如，客户端路由库也是通过将当前路由存储在 <code>React</code> 状态中，利用 <code>props</code> 将状态层层传递下去来实现的！</p><p><strong>对于每个独特的状态，都应该存在且只存在于一个指定的组件中作为 state</strong>。这一原则也被称为拥有 <a href="https://en.wikipedia.org/wiki/Single_source_of_truth">“可信单一数据源”</a>。它并不意味着所有状态都存在一个地方——对每个状态来说，都需要一个特定的组件来保存这些状态信息。你应该 <strong>将状态提升</strong> 到公共父级，或 <strong>将状态传递</strong> 到需要它的子级中，而不是在组件之间复制共享的状态。</p><p>你的应用会随着你的操作而变化。当你将状态上下移动时，你依然会想要确定每个状态在哪里“活跃”。这都是过程的一部分！</p><h2 id="4-对state进行保留和重置"><a href="#4-对state进行保留和重置" class="headerlink" title="4.对state进行保留和重置"></a>4.对state进行保留和重置</h2><p>各个组件的 state 是各自独立的。根据组件在 UI 树中的位置，React 可以跟踪哪些 state 属于哪个组件。你可以控制在重新渲染过程中何时对 state 进行保留和重置。</p><p><mark>状态与渲染树中的位置相关</mark>：React 会为 UI 中的组件结构构建 <a href="http://localhost:3000/learn/understanding-your-ui-as-a-tree#the-render-tree">渲染树</a>。当向一个组件添加状态时，那么可能会认为状态“存在”在组件内。但实际上，状态是由 React 保存的。React 通过组件在渲染树中的位置将它保存的每个状态与正确的组件关联起来。</p><p>下面的例子中只有一个 <code>&lt;Counter /&gt;</code> JSX 标签，但它会在两个不同的位置渲染：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f3ka5jlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f3ka5jlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> counter = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> /&gt;</span></span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;counter&#125;</span><br><span class="language-xml">      &#123;counter&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231109111059717.png" alt="image-20231109111059717" style="zoom:50%;" /><p>React树：</p><img src="image-20231109111139160.png" alt="image-20231109111139160" style="zoom:50%;" /><p><strong><mark>这是两个独立的 counter，因为它们在树中被渲染在了各自的位置。</mark></strong> 一般情况下你不用去考虑这些位置来使用 React，但知道它们是如何工作会很有用。</p><p>在 React 中，屏幕中的每个组件都有完全独立的 state。举个例子，当你并排渲染两个 <code>Counter</code> 组件时，它们都会拥有各自独立的 <code>score</code> 和 <code>hover</code> state。</p><p>当一个计数器被更新时，只有该组件的状态会被更新：</p><img src="image-20231109111343125.png" alt="image-20231109111343125" style="zoom:50%;" /><p><mark>只有当在树中相同的位置渲染相同的组件时，React 才会一直保留着组件的 state</mark>。想要验证这一点，可以将两个计数器的值递增，取消勾选 “渲染第二个计数器” 复选框，然后再次勾选它：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vj1vvelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vj1vvelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [showB, setShowB] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> /&gt;</span></span><br><span class="language-xml">      &#123;showB &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> /&gt;</span>&#125; </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;showB&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setShowB(e.target.checked)</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        渲染第二个计数器</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="counter.gif" alt="counter" style="zoom:50%;" /><p>当你停止渲染第二个计数器的那一刻，它的 state 完全消失了。这是因为 <mark>React 在移除一个组件时，也会销毁它的 state</mark>。</p><p>当你重新勾选“渲染第二个计数器”复选框时，另一个计数器及其 state 将从头开始初始化（<code>score = 0</code>）并被添加到 DOM 中。</p><p><strong><mark>只要一个组件还被渲染在 UI 树的相同位置，React 就会保留它的 state</mark>。</strong> 如果它被移除，或者一个不同的组件被渲染在相同的位置，那么 React 就会丢掉它的 state。</p><hr><p><mark>相同位置的相同组件会使得 state 被保留下来 </mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-79ridelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-79ridelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isFancy, setIsFancy] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isFancy ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">isFancy</span>=<span class="hljs-string">&#123;true&#125;</span> /&gt;</span> </span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">isFancy</span>=<span class="hljs-string">&#123;false&#125;</span> /&gt;</span> </span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;isFancy&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setIsFancy(e.target.checked)</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        使用好看的样式</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params">&#123; isFancy &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (isFancy) &#123;<br>    className += <span class="hljs-string">&#x27; fancy&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="fancy1.gif" alt="fancy1" style="zoom:50%;" /><p>当你勾选或清空复选框的时候，计数器 state 并没有被重置。不管 <code>isFancy</code> 是 <code>true</code> 还是 <code>false</code>，根组件 <code>App</code> 返回的 <code>div</code> 的第一个子组件都是 <code>&lt;Counter /&gt;</code>：</p><img src="image-20231109135330938.png" alt="image-20231109135330938" style="zoom:50%;" /><p>更新 <code>App</code> 的状态不会重置 <code>Counter</code>，因为 <code>Counter</code> 始终保持在同一位置。<mark>它是位于相同位置的相同组件，所以对 React 来说，它是同一个计数器。</mark></p><p><mark>记住 对 React 来说重要的是组件在 UI 树中的位置,而不是在 JSX 中的位置！ </mark></p><p>这个组件在 <code>if</code> 内外有两个<code>return</code> 语句，它们带有不同的 <code>&lt;Counter /&gt;</code> JSX 标签：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v6tgo0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v6tgo0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isFancy, setIsFancy] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">if</span> (isFancy) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">isFancy</span>=<span class="hljs-string">&#123;true&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;isFancy&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">              setIsFancy(e.target.checked)</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">          /&gt;</span><br><span class="language-xml">          使用好看的样式</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">isFancy</span>=<span class="hljs-string">&#123;false&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;isFancy&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setIsFancy(e.target.checked)</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        使用好看的样式</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params">&#123; isFancy &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (isFancy) &#123;<br>    className += <span class="hljs-string">&#x27; fancy&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="fancy1.gif" alt="fancy1" style="zoom:50%;" /><p>你可能以为当你勾选复选框的时候 state 会被重置，但它并没有！这是因为 <strong>两个 <code>&lt;Counter /&gt;</code> 标签<mark>被渲染在了相同的位置</mark>。</strong> React 不知道你的函数里是如何进行条件判断的，它只会“看到”你返回的树。在这两种情况下，<code>App</code> 组件都会返回一个包裹着 <code>&lt;Counter /&gt;</code> 作为第一个子组件的 <code>div</code>。这就是 React 认为它们是 <strong>同一个</strong> <code>&lt;Counter /&gt;</code> 的原因。</p><p>你可以认为它们有相同的“地址”：根组件的第一个子组件的第一个子组件。不管你的逻辑是怎么组织的，这就是 React 在前后两次渲染之间将它们进行匹配的方式。</p><p><mark>相同位置的不同组件会使 state 重置 </mark>：在这个例子中，勾选复选框会将 <code>&lt;Counter&gt;</code> 替换为一个 <code>&lt;p&gt;</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gd51a6lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gd51a6lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPaused, setIsPaused] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPaused ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>待会见！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> /&gt;</span> </span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;isPaused&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setIsPaused(e.target.checked)</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        休息一下</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="fancy2-1699509744853-4.gif" alt="fancy2" style="zoom:50%;" /><p>在相同位置对 <strong>不同</strong> 的组件类型进行切换。刚开始 <code>&lt;div&gt;</code> 的第一个子组件是一个 <code>Counter</code>。但是当你切换成 <code>p</code> 时，React 将 <code>Counter</code> 从 UI 树中移除了并销毁了它的状态。</p><img src="image-20231109140248758.png" alt="image-20231109140248758" style="zoom:50%;" /><p>当切换回来时，<code>p</code> 会被删除，而 <code>Counter</code> 会被添加：</p><img src="image-20231109140313803.png" alt="image-20231109140313803" style="zoom:50%;" /><p><mark>当你在相同位置渲染不同的组件时，组件的整个子树都会被重置</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zddnzzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zddnzzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isFancy, setIsFancy] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isFancy ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">isFancy</span>=<span class="hljs-string">&#123;true&#125;</span> /&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">isFancy</span>=<span class="hljs-string">&#123;false&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;isFancy&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setIsFancy(e.target.checked)</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        使用好看的样式</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params">&#123; isFancy &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (isFancy) &#123;<br>    className += <span class="hljs-string">&#x27; fancy&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="fancy3.gif" style="zoom:50%;" /><p>当你勾选复选框后计数器的 state 被重置了。虽然你渲染了一个 <code>Counter</code>，但是 <code>div</code> 的第一个子组件从 <code>div</code> 变成了 <code>section</code>。当子组件 <code>div</code> 从 DOM 中被移除的时候，它底下的整棵树（包含 <code>Counter</code> 以及它的 state）也都被销毁了。</p><p>当 <code>section</code> 变为 <code>div</code> 时，<code>section</code> 会被删除，新的 <code>div</code> 被添加：</p><img src="image-20231109140745131.png" alt="image-20231109140745131" style="zoom:50%;" /><p>当切换回来时，<code>div</code> 会被删除，新的 <code>section</code> 被添加：</p><img src="image-20231109140804072.png" alt="image-20231109140804072" style="zoom:50%;" /><p><mark><strong>如果你想在重新渲染时保留 state，几次渲染中的树形结构就应该相互“匹配”</strong>。结构不同就会导致 state 的销毁，因为 React 会在将一个组件从树中移除时销毁它的 state。</mark></p><p><mark>不应该把组件函数的定义嵌套起来</mark>：示例中， <code>MyTextField</code> 组件被定义在 <code>MyComponent</code> <strong>内部</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6i3gb7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6i3gb7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [counter, setCounter] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyTextField</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyTextField</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setCounter(counter + 1)</span><br><span class="language-xml">      &#125;&#125;&gt;点击了 &#123;counter&#125; 次<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="click.gif" alt="click" style="zoom:50%;" /><p>每次你点击按钮，输入框的 state 都会消失！这是因为每次 <code>MyComponent</code> 渲染时都会创建一个 <strong>不同</strong> 的 <code>MyTextField</code> 函数。你在相同位置渲染的是 <strong>不同</strong> 的组件，所以 React 将其下所有的 state 都重置了。这样会导致 bug 以及性能问题。<mark>为了避免这个问题， <strong>永远要将组件定义在最上层并且不要把它们的定义嵌套起来。</strong></mark></p><p><mark>在相同位置重置 state</mark>：默认情况下，React 会在一个组件保持在同一位置时保留它的 state。通常这就是你想要的，所以把它作为默认特性很合理。但有时候，你可能想要重置一个组件的 state。考虑一下这个应用，它可以让两个玩家在每个回合中记录他们的得分：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-eiusm1lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-eiusm1lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params">&#123; person &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;person&#125; 的分数：&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="score.gif" alt="score" style="zoom:50%;" /><p>目前当你切换玩家时，分数会被保留下来。这两个 <code>Counter</code> 出现在相同的位置，所以 React 会认为它们是 <strong>同一个</strong> <code>Counter</code>，只是传了不同的 <code>person</code> prop。</p><p>但是从概念上讲，这个应用中的两个计数器应该是各自独立的。虽然它们在 UI 中的位置相同，但是一个是 Taylor 的计数器，一个是 Sarah 的计数器。</p><p>有两个方法可以在它们相互切换时重置 state：</p><ol><li><p>将组件渲染在不同的位置：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sfiutelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sfiutelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA &amp;&amp;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span></span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">      &#123;!isPlayerA &amp;&amp;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span></span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params">&#123; person &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;person&#125; 的分数：&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="score2.gif" alt="score2" style="zoom:50%;" /><p>起初 <code>isPlayerA</code> 的值是 <code>true</code>。所以第一个位置包含了 <code>Counter</code> 的 state，而第二个位置是空的。</p><p>当你点击“下一位玩家”按钮时，第一个位置会被清空，而第二个位置现在包含了一个 <code>Counter</code>。</p><img src="image-20231109142132582.png" alt="image-20231109142132582" style="zoom:50%;" /></li><li><p>使用 <code>key</code> 赋予每个组件一个明确的身份：<mark>使用 key 来让 React 区分任何组件</mark>。默认情况下，React 使用父组件内部的顺序（“第一个计数器”、“第二个计数器”）来区分组件。但是 key 可以让你告诉 React 这不仅仅是 <strong>第一个</strong> 或者 <strong>第二个</strong> 计数器，而且还是一个特定的计数器——例如，<strong>Taylor 的</strong> 计数器。这样无论它出现在树的任何位置， React 都会知道它是 <strong>Taylor 的</strong> 计数器！</p><p>在这个例子中，即使两个 <code>&lt;Counter /&gt;</code> 会出现在 JSX 中的同一个位置，它们也不会共享 state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l19xz5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l19xz5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Taylor&quot;</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Sarah&quot;</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params">&#123; person &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [score, setScore] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [hover, setHover] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">let</span> className = <span class="hljs-string">&#x27;counter&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (hover) &#123;<br>    className += <span class="hljs-string">&#x27; hover&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onPointerEnter</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span><br><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;person&#125; 的分数：&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;</span><br><span class="language-xml">        加一</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="score3.gif" alt="score3" style="zoom:50%;" /><p>指定一个 <code>key</code> 能够让 React 将 <code>key</code> 本身而非它们在父组件中的顺序作为位置的一部分。这就是为什么尽管你用 JSX 将组件渲染在相同位置，但在 React 看来它们是两个不同的计数器。因此它们永远都不会共享 state。每当一个计数器出现在屏幕上时，它的 state 会被创建出来。每当它被移除时，它的 state 就会被销毁。在它们之间切换会一次又一次地使它们的 state 重置。</p><p><mark>请记住 key 不是全局唯一的。它们只能指定 <strong>父组件内部</strong> 的顺序。</mark></p></li></ol><p><mark>使用 key 来重置 state 在处理表单时特别有用</mark>：在这个聊天应用中， <code>&lt;Chat&gt;</code> 组件包含文本输入 state：只需给组件添加一个 <code>key</code> 就可以确保了当你选择一个不同的收件人时， <code>Chat</code> 组件——包括其下方树中的任何 state——都将从头开始重新创建。 React 还将重新创建 DOM 元素，而不是复用它们。切换收件人就总会清除文本字段：</p><p>Chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q39a4blqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q39a4blqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Chat</span>(<span class="hljs-params">&#123; contact &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;chat&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">跟</span> &#x27; + <span class="hljs-attr">contact.name</span> + &#x27; <span class="hljs-attr">聊一聊</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送到 &#123;contact.email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>ContatctList.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2lbag4lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2lbag4lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ContactList</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  selectedContact,</span><br><span class="hljs-params">  contacts,</span><br><span class="hljs-params">  onSelect</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;contact-list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;contacts.map(contact =&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;contact.id&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              onSelect(contact);</span><br><span class="language-xml">            &#125;&#125;&gt;</span><br><span class="language-xml">              &#123;contact.name&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yp9yz5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yp9yz5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Chat</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Chat.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ContactList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ContactList.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Messenger</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [to, setTo] = <span class="hljs-title function_">useState</span>(contacts[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ContactList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">contacts</span>=<span class="hljs-string">&#123;contacts&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">selectedContact</span>=<span class="hljs-string">&#123;to&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onSelect</span>=<span class="hljs-string">&#123;contact</span> =&gt;</span> setTo(contact)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Chat</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;to.id&#125;</span> <span class="hljs-attr">contact</span>=<span class="hljs-string">&#123;to&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> contacts = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Taylor&#x27;</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;taylor@mail.com&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;alice@mail.com&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;bob@mail.com&#x27;</span> &#125;<br>];<br></code></pre></td></tr></table></div></figure><img src="chat.gif" alt="chat" style="zoom:50%;" /><p><mark>为被移除的组件保留 state</mark>：在真正的聊天应用中，你可能会想在用户再次选择前一个收件人时恢复输入 state。对于一个不可见的组件，有几种方法可以让它的 state “活下去”：</p><ul><li>与其只渲染现在这一个聊天，你可以把 <strong>所有</strong> 聊天都渲染出来，但用 CSS 把其他聊天隐藏起来。这些聊天就不会从树中被移除了，所以它们的内部 state 会被保留下来。这种解决方法对于简单 UI 非常有效。但如果要隐藏的树形结构很大且包含了大量的 DOM 节点，那么性能就会变得很差。</li><li>你可以进行 <a href="http://localhost:3000/learn/sharing-state-between-components">状态提升</a> 并在父组件中保存每个收件人的草稿消息。这样即使子组件被移除了也无所谓，因为保留重要信息的是父组件。这是最常见的解决方法。</li><li>除了 React 的 state，你也可以使用其他数据源。例如，也许你希望即使用户不小心关闭页面也可以保存一份信息草稿。要实现这一点，你可以让 <code>Chat</code> 组件通过读取 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage"><code>localStorage</code></a> 对其 state 进行初始化，并把草稿保存在那里。</li></ul><h2 id="5-迁移状态逻辑至-Reducer-中"><a href="#5-迁移状态逻辑至-Reducer-中" class="headerlink" title="5.迁移状态逻辑至 Reducer 中"></a>5.迁移状态逻辑至 Reducer 中</h2><p>对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新逻辑整合到一个外部函数中，这个函数叫作 <strong>reducer</strong>。</p><p><mark>使用 reducer 整合状态逻辑</mark>：随着组件复杂度的增加，你将很难一眼看清所有的组件状态更新逻辑。例如，下面的 <code>TaskApp</code> 组件有一个数组类型的状态 <code>tasks</code>，并通过三个不同的事件处理程序来实现任务的添加、删除和修改：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xbpp28lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xbpp28lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./AddTask.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TaskList.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, setTasks] = <span class="hljs-title function_">useState</span>(initialTasks);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>([<br>      ...tasks,<br>      &#123;<br>        <span class="hljs-attr">id</span>: nextId++,<br>        <span class="hljs-attr">text</span>: text,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ]);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>(<br>      tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === task.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> task;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;)<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>(tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== taskId));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格的行程安排<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;参观卡夫卡博物馆&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;看木偶戏&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;打卡列侬墙&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,<br>];<br></code></pre></td></tr></table></div></figure><p>这个组件的每个事件处理程序都通过 <code>setTasks</code> 来更新状态。随着这个组件的不断迭代，其状态逻辑也会越来越多。为了降低这种复杂度，并让所有逻辑都可以存放在一个易于理解的地方，你可以将这些状态逻辑移到组件之外的一个称为 <strong>reducer</strong> 的函数中。</p><p>Reducer 是处理状态的另一种方式。你可以通过三个步骤将 <code>useState</code> 迁移到 <code>useReducer</code>：</p><ol><li><p>&#x3D;&#x3D;将设置状态的逻辑 <strong>修改</strong> 成 dispatch 的一个 action&#x3D;&#x3D;：移除所有的状态设置逻辑。只留下三个事件处理函数：</p><ul><li><code>handleAddTask(text)</code> 在用户点击 “添加” 时被调用。</li><li><code>handleChangeTask(task)</code> 在用户切换任务或点击 “保存” 时被调用。</li><li><code>handleDeleteTask(taskId)</code> 在用户点击 “删除” 时被调用。</li></ul><p>使用 reducers 管理状态与直接设置状态略有不同。它不是通过设置状态来告诉 React “要做什么”，而是通过事件处理程序 dispatch 一个 “action” 来指明 “用户刚刚做了什么”。（而状态更新逻辑则保存在其他地方！）因此，我们不再通过事件处理器直接 “设置 <code>task</code>”，而是 dispatch 一个 “添加&#x2F;修改&#x2F;删除任务” 的 action。这更加符合用户的思维。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0fhe1vlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0fhe1vlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>  <span class="hljs-title function_">dispatch</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;added&#x27;</span>,<br>    <span class="hljs-attr">id</span>: nextId++,<br>    <span class="hljs-attr">text</span>: text,<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>  <span class="hljs-title function_">dispatch</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;changed&#x27;</span>,<br>    <span class="hljs-attr">task</span>: task,<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>  <span class="hljs-title function_">dispatch</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;deleted&#x27;</span>,<br>    <span class="hljs-attr">id</span>: taskId,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>你传递给 <code>dispatch</code> 的对象叫做 “action”：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q4e82ilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q4e82ilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>  <span class="hljs-title function_">dispatch</span>(<br>    <span class="hljs-comment">/* &quot;action&quot; 对象： */</span><br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;deleted&#x27;</span>,<br>      <span class="hljs-attr">id</span>: taskId,<br>    &#125;<br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>它是一个普通的 JavaScript 对象。它的结构是由你决定的，但通常来说，它应该至少包含可以表明 <strong>发生了什么事情</strong> 的信息。</p><p><code>action 对象</code>可以有多种结构：按照惯例，我们通常会添加一个字符串类型的 <code>type</code> 字段来描述发生了什么，并通过其它字段传递额外的信息。<code>type</code> 是特定于组件的，在这个例子中 <code>added</code> 和 <code>addded_task</code> 都可以。选一个能描述清楚发生的事件的名字！</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-eyd1dllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-eyd1dllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">dispatch</span>(&#123;<br>  <span class="hljs-comment">/*  针对特定的组件  */</span> <br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;what_happened&#x27;</span>,<br>  <span class="hljs-comment">/*  其它字段放这里  */</span> <br>&#125;);<br></code></pre></td></tr></table></div></figure></li><li><p>&#x3D;&#x3D;<strong>编写</strong> 一个 reducer 函数&#x3D;&#x3D;：reducer 函数就是你放置状态逻辑的地方。它接受两个参数，分别为当前 state 和 action 对象，并且返回的是更新后的 state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fy45ovlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fy45ovlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">yourReducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>  <span class="hljs-comment">// 给 React 返回更新后的状态</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>React 会将状态设置为你从 reducer 返回的状态。</p><p>在这个例子中，要将状态设置逻辑从事件处理程序移到 reducer 函数中，你需要：</p><ol><li>声明当前状态（<code>tasks</code>）作为第一个参数；</li><li>声明 <code>action</code> 对象作为第二个参数；</li><li>从 <code>reducer</code> 返回 <strong>下一个</strong> 状态（React 会将旧的状态设置为这个最新的状态）。</li></ol><p>下面是所有迁移到 <code>reducer</code> 函数的状态设置逻辑：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9qu33mlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9qu33mlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;added&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> [<br>      ...tasks,<br>      &#123;<br>        <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ];<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;changed&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>        <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>      &#125;<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;deleted&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;未知 action: &#x27;</span> + action.<span class="hljs-property">type</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>由于 <code>reducer</code> 函数接受 <code>state</code>（tasks）作为参数，因此你可以 <strong>在组件之外声明它</strong>。这减少了代码的缩进级别，提升了代码的可读性。</p><p>上面的代码使用了 <code>if/else</code> 语句，但是在 reducers 中使用 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/switch">switch 语句</a> 是一种惯例。两种方式结果是相同的，但 <code>switch</code> 语句读起来一目了然。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ccqykvlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ccqykvlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;added&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> [<br>        ...tasks,<br>        &#123;<br>          <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>         <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      ];<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;changed&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;deleted&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;未知 action: &#x27;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>我们建议将每个 <code>case</code> 块包装到 <code>&#123;</code> 和 <code>&#125;</code> 花括号中，这样在不同 <code>case</code> 中声明的变量就不会互相冲突。此外，<code>case</code> 通常应该以 <code>return</code> 结尾。如果你忘了 <code>return</code>，代码就会 <code>进入</code> 到下一个 <code>case</code>，这就会导致错误！</p><p>尽管 <code>reducer</code> 可以 “减少” 组件内的代码量，但它实际上是以数组上的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"><code>reduce()</code></a> 方法命名的。</p><p><code>reduce()</code> 允许你将数组中的多个值 “累加” 成一个值：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y2tknllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y2tknllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> sum = arr.<span class="hljs-title function_">reduce</span>(<br>  <span class="hljs-function">(<span class="hljs-params">result, number</span>) =&gt;</span> result + number<br><br>); <span class="hljs-comment">// 1 + 2 + 3 + 4 + 5</span><br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">result参数代表累积计算的结果。在第一次调用回调函数时，它的值是传递给reduce()方法的初始值（如果提供了初始值），或者是数组的第一个元素。number参数代表当前正在处理的数组元素。该回调函数的目标是将每个元素与累积的结果相加，从而计算出总和。</p><p>你传递给 <code>reduce</code> 的函数被称为 “reducer”。它接受 <code>目前的结果</code> 和 <code>当前的值</code>，然后返回 <code>下一个结果</code>。React 中的 <code>reducer</code> 和这个是一样的：它们都接受 <code>目前的状态</code> 和 <code>action</code> ，然后返回 <code>下一个状态</code>。这样，action 会随着时间推移累积到状态中。</p></li><li><p>&#x3D;&#x3D;在你的组件中 <strong>使用</strong> reducer：&#x3D;&#x3D;</p></li><li><p>将 <code>tasksReducer</code> 导入到组件中。记得先从 React 中导入 <code>useReducer</code> Hook：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d8twldlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d8twldlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>然后把</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mfpgaelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mfpgaelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [tasks, setTasks] = <span class="hljs-title function_">useState</span>(initialTasks);<br></code></pre></td></tr></table></div></figure><p>替换为：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nev4x5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nev4x5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br></code></pre></td></tr></table></div></figure></li></ol><p>完整代码：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9xye4slqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9xye4slqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./AddTask.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TaskList.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;added&#x27;</span>,<br>      <span class="hljs-attr">id</span>: nextId++,<br>      <span class="hljs-attr">text</span>: text,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;changed&#x27;</span>,<br>      <span class="hljs-attr">task</span>: task,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;deleted&#x27;</span>,<br>      <span class="hljs-attr">id</span>: taskId,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格的行程安排<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;added&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> [<br>        ...tasks,<br>        &#123;<br>          <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>          <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      ];<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;changed&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;deleted&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;未知 action: &#x27;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;参观卡夫卡博物馆&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;看木偶戏&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;打卡列侬墙&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;<br>];<br></code></pre></td></tr></table></div></figure><img src="image-20231109170735742.png" alt="image-20231109170735742" style="zoom:50%;" /><p>也可以把 reducer 移到一个单独的文件中：</p><p>tasksReducer.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-01e7m4lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-01e7m4lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;added&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> [<br>        ...tasks,<br>        &#123;<br>          <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>          <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      ];<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;changed&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;deleted&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;未知 action：&#x27;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bnoa2dlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bnoa2dlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./AddTask.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TaskList.js&#x27;</span>;<br><span class="hljs-keyword">import</span> tasksReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./tasksReducer.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;added&#x27;</span>,<br>      <span class="hljs-attr">id</span>: nextId++,<br>      <span class="hljs-attr">text</span>: text,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;changed&#x27;</span>,<br>      <span class="hljs-attr">task</span>: task,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;deleted&#x27;</span>,<br>      <span class="hljs-attr">id</span>: taskId,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格的行程安排<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;参观卡夫卡博物馆&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;看木偶戏&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;打卡列侬墙&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,<br>];<br></code></pre></td></tr></table></div></figure><p><code>useReducer</code> 和 <code>useState</code> 的区别：</p><ol><li><p>相同：必须给它传递一个初始状态，它会返回一个有状态的值和一个设置该状态的函数。</p></li><li><p>不同：<code>useReducer</code> 钩子接受 2 个参数：</p><ol><li>一个 reducer 函数</li><li>一个初始的 state</li></ol><p>它返回如下内容：</p><ol><li>一个有状态的值</li><li>一个 dispatch 函数（用来 “派发” 用户操作给 reducer）</li></ol></li></ol><p>对比：</p><ul><li><strong>代码体积：</strong> 通常，在使用 <code>useState</code> 时，一开始只需要编写少量代码。而 <code>useReducer</code> 必须提前编写 reducer 函数和需要调度的 actions。但是，当多个事件处理程序以相似的方式修改 state 时，<code>useReducer</code> 可以减少代码量。</li><li><strong>可读性：</strong> 当状态更新逻辑足够简单时，<code>useState</code> 的可读性还行。但是，一旦逻辑变得复杂起来，它们会使组件变得臃肿且难以阅读。在这种情况下，<code>useReducer</code> 允许你将状态更新逻辑与事件处理程序分离开来。</li><li><strong>可调试性：</strong> 当使用 <code>useState</code> 出现问题时, 你很难发现具体原因以及为什么。 而使用 <code>useReducer</code> 时， 你可以在 reducer 函数中通过打印日志的方式来观察每个状态的更新，以及为什么要更新（来自哪个 <code>action</code>）。 如果所有 <code>action</code> 都没问题，你就知道问题出在了 reducer 本身的逻辑中。 然而，与使用 <code>useState</code> 相比，你必须单步执行更多的代码。</li><li><strong>可测试性：</strong> reducer 是一个不依赖于组件的纯函数。这就意味着你可以单独对它进行测试。一般来说，我们最好是在真实环境中测试组件，但对于复杂的状态更新逻辑，针对特定的初始状态和 <code>action</code>，断言 reducer 返回的特定状态会很有帮助。</li></ul><p>如果你在修改某些组件状态时经常出现问题或者想给组件添加更多逻辑时，我们建议你还是使用 reducer。当然，你也不必整个项目都用 reducer，这是可以自由搭配的。你甚至可以在一个组件中同时使用 <code>useState</code> 和 <code>useReducer</code>。</p><p>编写 <code>reducers</code> 时最好牢记以下两点：</p><ul><li><strong>reducers 必须是纯粹的。</strong> 这一点和 <a href="http://localhost:3000/learn/queueing-a-series-of-state-updates">状态更新函数</a> 是相似的，<code>reducers</code> 在是在渲染时运行的！（actions 会排队直到下一次渲染)。 这就意味着 <code>reducers</code> <a href="http://localhost:3000/learn/keeping-components-pure">必须纯净</a>，即当输入相同时，输出也是相同的。它们不应该包含异步请求、定时器或者任何副作用（对组件外部有影响的操作）。它们应该以不可变值的方式去更新 <a href="http://localhost:3000/learn/updating-objects-in-state">对象</a> 和 <a href="http://localhost:3000/learn/updating-arrays-in-state">数组</a>。</li><li><strong>每个 action 都描述了一个单一的用户交互，即使它会引发数据的多个变化。</strong> 举个例子，如果用户在一个由 <code>reducer</code> 管理的表单（包含五个表单项）中点击了 <code>重置按钮</code>，那么 dispatch 一个 <code>reset_form</code> 的 action 比 dispatch 五个单独的 <code>set_field</code> 的 action 更加合理。如果你在一个 <code>reducer</code> 中打印了所有的 <code>action</code> 日志，那么这个日志应该是很清晰的，它能让你以某种步骤复现已发生的交互或响应。这对代码调试很有帮助！</li></ul><p><mark>使用 Immer 简化 reducers</mark>：与在平常的 state 中 <a href="http://localhost:3000/learn/updating-objects-in-state#write-concise-update-logic-with-immer">修改对象</a> 和 <a href="http://localhost:3000/learn/updating-arrays-in-state#write-concise-update-logic-with-immer">数组</a> 一样，你可以使用 <code>Immer</code> 这个库来简化 <code>reducer</code>。在这里，<a href="https://github.com/immerjs/use-immer#useimmerreducer"><code>useImmerReducer</code></a> 让你可以通过 <code>push</code> 或 <code>arr[i] =</code> 来修改 state ：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nqxagolqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nqxagolqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useImmerReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;use-immer&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./AddTask.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TaskList.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">draft, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;added&#x27;</span>: &#123;<br>      draft.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>      &#125;);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;changed&#x27;</span>: &#123;<br>      <span class="hljs-keyword">const</span> index = draft.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>);<br>      draft[index] = action.<span class="hljs-property">task</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;deleted&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> draft.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;未知 action：&#x27;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useImmerReducer</span>(tasksReducer, initialTasks);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;added&#x27;</span>,<br>      <span class="hljs-attr">id</span>: nextId++,<br>      <span class="hljs-attr">text</span>: text,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;changed&#x27;</span>,<br>      <span class="hljs-attr">task</span>: task,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;deleted&#x27;</span>,<br>      <span class="hljs-attr">id</span>: taskId,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格的行程安排<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;参观卡夫卡博物馆&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;看木偶戏&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;打卡列侬墙&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,<br>];<br></code></pre></td></tr></table></div></figure><p>Reducers 应该是纯净的，所以它们不应该去修改 state。而 Immer 为你提供了一种特殊的 <code>draft</code> 对象，你可以通过它安全的修改 state。在底层，Immer 会基于当前 state 创建一个副本。这就是为什么通过 <code>useImmerReducer</code> 来管理 reducers 时，可以修改第一个参数，且不需要返回一个新的 state 的原因。</p><h2 id="6-使用-Context-深层传递参数"><a href="#6-使用-Context-深层传递参数" class="headerlink" title="6.使用 Context 深层传递参数"></a>6.使用 Context 深层传递参数</h2><p>通常来说，你会通过 props 将信息从父组件传递到子组件。但是，如果你必须通过许多中间组件向下传递 props，或是在你应用中的许多组件需要相同的信息，传递 props 会变的十分冗长和不便。<mark><strong>Context</strong> 允许父组件向其下层无论多深的任何组件提供信息，而无需通过 props 显式传递。</mark></p><p><mark>传递 props 带来的问题</mark>：<a href="http://localhost:3000/learn/passing-props-to-a-component">传递 props</a> 是将数据通过 UI 树显式传递到使用它的组件的好方法。</p><p>但是当你需要在组件树中深层传递参数以及需要在组件间复用相同的参数时，传递 props 就会变得很麻烦。最近的根节点父组件可能离需要数据的组件很远，<a href="http://localhost:3000/learn/sharing-state-between-components">状态提升</a> 到太高的层级会导致 “逐层传递 props” 的情况。</p><img src="image-20231110160115640.png" alt="image-20231110160115640" style="zoom:50%;" /><p>React 的 context 功能可以在组件树中不需要 props 将数据“直达”到所需的组件中。</p><p> <mark>Context：传递 props 的另一种方法</mark>：Context 让父组件可以为它下面的整个组件树提供数据。</p><p>思考一下这个 <code>Heading</code> 组件接收一个 <code>level</code> 参数来决定它标题尺寸的场景：</p><p>Heading.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-o31o90lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-o31o90lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Heading</span>(<span class="hljs-params">&#123; level, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (level) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span>;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;未知的 level：&#x27;</span> + level);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Section.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g6wsqulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g6wsqulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dicrnulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dicrnulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Heading</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Heading.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Section</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Section.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;1&#125;</span>&gt;</span>主标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;5&#125;</span>&gt;</span>子子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;6&#125;</span>&gt;</span>子子子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>假设你想让相同 <code>Section</code> 中的多个 Heading 具有相同的尺寸：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6jabkmlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6jabkmlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Section</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>照片<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>视频<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Section</span>&gt;<br></code></pre></td></tr></table></div></figure><p>将 <code>level</code> 参数传递给 <code>&lt;Section&gt;</code> 组件而不是传给 <code>&lt;Heading&gt;</code> 组件看起来更好一些。这样的话你可以强制使同一个 section 中的所有标题都有相同的尺寸：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3adg3klqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3adg3klqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Section</span> level=&#123;<span class="hljs-number">3</span>&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>照片<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>视频<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Section</span>&gt;<br></code></pre></td></tr></table></div></figure><p>但是 <code>&lt;Heading&gt;</code> 组件是如何知道离它最近的 <code>&lt;Section&gt;</code> 的 level 的呢？**<mark>这需要子组件可以通过某种方式“访问”到组件树中某处在其上层的数据。</mark>**</p><p>你不能只通过 props 来实现它。这就是 context 大显身手的地方。</p><p><mark>Context 可以让父节点，甚至是很远的父节点都可以为其内部的整个组件树提供数据。</mark></p><img src="image-20231110160909884.png" alt="image-20231110160909884" style="zoom:50%;" /><p>你可以通过以下三个步骤来实现它：</p><ol><li><p><strong>创建</strong> 一个 context。（你可以将其命名为 <code>LevelContext</code>, 因为它表示的是标题级别。)</p><p>LevelContext.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6m2wfclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6m2wfclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LevelContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></div></figure><p><code>createContext</code> 只需<strong>默认值</strong>一个参数。在这里, <code>1</code> 表示最大的标题级别，但是你可以传递任何类型的值（甚至可以传入一个对象）。</p></li><li><p>在需要数据的组件内 <strong>使用</strong> 刚刚创建的 context。（<code>Heading</code> 将会使用 <code>LevelContext</code>。）</p><p>从 React 中引入 <code>useContext</code> Hook 以及你刚刚创建的 context:</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1va0s8lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1va0s8lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./LevelContext.js&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>目前，<code>Heading</code> 组件从 props 中读取 <code>level</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p9b2h2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p9b2h2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Heading</span>(<span class="hljs-params">&#123; level, children &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>删掉 <code>level</code> 参数并从你刚刚引入的 <code>LevelContext</code> 中读取值：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gjph4dlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gjph4dlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Heading</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>useContext</code> 是一个 Hook。和 <code>useState</code> 以及 <code>useReducer</code>一样，你只能在 React 组件中（不是循环或者条件里）立即调用 Hook。**<code>useContext</code> 告诉 React <code>Heading</code> 组件想要读取 <code>LevelContext</code>。**</p><p>现在 <code>Heading</code> 组件没有 <code>level</code> 参数，你不需要再像这样在你的 JSX 中将 level 参数传递给 <code>Heading</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f7iz9olqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f7iz9olqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Section</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Section</span>&gt;<br></code></pre></td></tr></table></div></figure><p>修改一下 JSX，让 <code>Section</code> 组件代替 <code>Heading</code> 组件接收 level 参数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-j4l91nlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-j4l91nlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Section</span> level=&#123;<span class="hljs-number">4</span>&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Section</span>&gt;<br></code></pre></td></tr></table></div></figure></li><li><p>在指定数据的组件中 <strong>提供</strong> 这个 context。 （<code>Section</code> 将会提供 <code>LevelContext</code>。）</p><p><strong>把它们用 context provider 包裹起来</strong>  以提供 <code>LevelContext</code> 给它们：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n8jmnilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n8jmnilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./LevelContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; level, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">LevelContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;level&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;   <span class="hljs-tag">&lt;/<span class="hljs-name">LevelContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这告诉 React：“如果在 <code>&lt;Section&gt;</code> 组件中的任何子组件请求 <code>LevelContext</code>，给他们这个 <code>level</code>。”组件会使用 UI 树中在它上层最近的那个 <code>&lt;LevelContext.Provider&gt;</code> 传递过来的值。</p><p>不需要向每个 <code>Heading</code> 组件传递 <code>level</code> 参数了！取而代之的是，它通过访问上层最近的 <code>Section</code> 来“断定”它的标题级别：</p><ol><li>你将一个 <code>level</code> 参数传递给 <code>&lt;Section&gt;</code>。</li><li><code>Section</code> 把它的子元素包在 <code>&lt;LevelContext.Provider value=&#123;level&#125;&gt;</code> 里面。</li><li><code>Heading</code> 使用 <code>useContext(LevelContext)</code> 访问上层最近的 <code>LevelContext</code> 提供的值。</li></ol></li></ol><p><mark>在相同的组件中使用并提供 context </mark>：目前，你仍需要手动指定每个 section 的 <code>level</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-koztxglqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-koztxglqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;Section level=&#123;1&#125;&gt;<br>      ...<br>      &lt;Section level=&#123;2&#125;&gt;<br>        ...<br>        &lt;Section level=&#123;3&#125;&gt;<br>          ...<br></code></pre></td></tr></table></div></figure><p>由于 context 让你可以从上层的组件读取信息，每个 <code>Section</code> 都会从上层的 <code>Section</code> 读取 <code>level</code>，并自动向下层传递 <code>level + 1</code>。 你可以像下面这样做：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-oc9nl5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-oc9nl5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./LevelContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br><br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">LevelContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;level</span> + <span class="hljs-attr">1</span>&#125;&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">LevelContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这样修改之后，你不用将 <code>level</code> 参数传给 <code>&lt;Section&gt;</code> <strong>或者是</strong> <code>&lt;Heading&gt;</code> 了：</p><p>LevelContext.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5bdtrulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5bdtrulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LevelContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l3nz8zlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l3nz8zlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Heading</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Heading.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Section</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Section.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>主标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>Heading</code> 和 <code>Section</code> 都通过读取 <code>LevelContext</code> 来判断它们的深度。而且 <code>Section</code> 把它的子组件都包在 <code>LevelContext</code> 中来指定其中的任何内容都处于一个“更深”的级别。</p><p><mark>Context 会穿过中间层级的组件</mark>： 你可以在提供 context 的组件和使用它的组件之间的层级插入任意数量的组件。这包括像 <code>&lt;div&gt;</code> 这样的内置组件和你自己创建的组件。</p><p>在这个示例中，相同的 <code>Post</code> 组件（带有虚线边框）在两个不同的嵌套层级上渲染。注意，它内部的 <code>&lt;Heading&gt;</code> 会自动从最近的 <code>&lt;Section&gt;</code> 获取它的级别：</p><p>Section.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-33xoqzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-33xoqzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./LevelContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; children, isFancy &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#x27;<span class="hljs-attr">section</span> &#x27; +</span></span><br><span class="hljs-tag"><span class="language-xml">      (<span class="hljs-attr">isFancy</span> ? &#x27;<span class="hljs-attr">fancy</span>&#x27; <span class="hljs-attr">:</span> &#x27;&#x27;)</span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">LevelContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;level</span> + <span class="hljs-attr">1</span>&#125;&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">LevelContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8uzimclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8uzimclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Heading</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Heading.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Section</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Section.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ProfilePage</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>My Profile<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Post</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;旅行者，你好！&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">body</span>=<span class="hljs-string">&quot;来看看我的冒险。&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AllPosts</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">AllPosts</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>帖子<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">RecentPosts</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">RecentPosts</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>最近的帖子<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Post</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;里斯本的味道&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">body</span>=<span class="hljs-string">&quot;...那些蛋挞！&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Post</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;探戈节奏中的布宜诺斯艾利斯&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">body</span>=<span class="hljs-string">&quot;我爱它！&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Post</span>(<span class="hljs-params">&#123; title, body &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span> <span class="hljs-attr">isFancy</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        &#123;title&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;body&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231110171520033.png" alt="image-20231110171520033" style="zoom:50%;" /><p><strong><mark>Context 让你可以编写“适应周围环境”的组件，并且根据 在哪 （或者说 在哪个 context 中）来渲染它们不同的样子。</mark></strong></p><p>Context 的工作方式可能会让你想起 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/inheritance">CSS 属性继承</a>。在 CSS 中，你可以为一个 <code>&lt;div&gt;</code> 手动指定 <code>color: blue</code>，并且其中的任何 DOM 节点，无论多深，都会继承那个颜色，除非中间的其他 DOM 节点用 <code>color: green</code> 来覆盖它。类似地，在 React 中，覆盖来自上层的某些 context 的唯一方法是将子组件包裹到一个提供不同值的 context provider 中。</p><p>在 CSS 中，诸如 <code>color</code> 和 <code>background-color</code> 之类的不同属性不会覆盖彼此。你可以设置所有 <code>&lt;div&gt;</code> 的 <code>color</code> 为红色，而不会影响 <code>background-color</code>。类似地，<strong>不同的 React context 不会覆盖彼此</strong>。你通过 <code>createContext()</code> 创建的每个 context 都和其他 context 完全分离，只有使用和提供 <strong>那个特定的</strong> context 的组件才会联系在一起。一个组件可以轻松地使用或者提供许多不同的 context。</p><p><strong>如果你只想把一些 props 传递到多个层级中，这并不意味着你需要把这些信息放到 context 里。</strong></p><p>在使用 context 之前，你可以考虑以下几种替代方案：</p><ol><li>**<mark>从 <a href="https://zh-hans.react.dev/learn/passing-props-to-a-component">传递 props</a> 开始</mark>**： 如果你的组件看起来不起眼，那么通过十几个组件向下传递一堆 props 并不罕见。这有点像是在埋头苦干，但是这样做可以让哪些组件用了哪些数据变得十分清晰！维护你代码的人会很高兴你用 props 让数据流变得更加清晰。</li><li>**<mark>抽象组件并 <a href="https://zh-hans.react.dev/learn/passing-props-to-a-component#passing-jsx-as-children">将 JSX 作为 <code>children</code> 传递</a> 给它们</mark>**： 如果你通过很多层不使用该数据的中间组件（并且只会向下传递）来传递数据，这通常意味着你在此过程中忘记了抽象组件。举个例子，你可能想传递一些像 <code>posts</code> 的数据 props 到不会直接使用这个参数的组件，类似 <code>&lt;Layout posts=&#123;posts&#125; /&gt;</code>。取而代之的是，让 <code>Layout</code> 把 <code>children</code> 当做一个参数，然后渲染 <code>&lt;Layout&gt;&lt;Posts posts=&#123;posts&#125; /&gt;&lt;/Layout&gt;</code>。这样就减少了定义数据的组件和使用数据的组件之间的层级。</li></ol><p>如果这两种方法都不适合你，再考虑使用 context。</p><p><mark>Context 的使用场景 </mark>：</p><ul><li><strong>主题：</strong> 如果你的应用允许用户更改其外观（例如暗夜模式），你可以在应用顶层放一个 context provider，并在需要调整其外观的组件中使用该 context。</li><li><strong>当前账户：</strong> 许多组件可能需要知道当前登录的用户信息。将它放到 context 中可以方便地在树中的任何位置读取它。某些应用还允许你同时操作多个账户（例如，以不同用户的身份发表评论）。在这些情况下，将 UI 的一部分包裹到具有不同账户数据的 provider 中会很方便。</li><li><strong>路由：</strong> 大多数路由解决方案在其内部使用 context 来保存当前路由。这就是每个链接“知道”它是否处于活动状态的方式。如果你创建自己的路由库，你可能也会这么做。</li><li><strong>状态管理：</strong> 随着你的应用的增长，最终在靠近应用顶部的位置可能会有很多 state。许多遥远的下层组件可能想要修改它们。通常 <a href="https://zh-hans.react.dev/learn/scaling-up-with-reducer-and-context">将 reducer 与 context 搭配使用</a>来管理复杂的状态并将其传递给深层的组件来避免过多的麻烦。</li></ul><p>Context 不局限于静态值。如果你在下一次渲染时传递不同的值，React 将会更新读取它的所有下层组件！这就是 context 经常和 state 结合使用的原因。</p><p>一般而言，如果树中不同部分的远距离组件需要某些信息，context 将会对你大有帮助。</p><h2 id="7-使用-Reducer-和-Context-拓展你的应用"><a href="#7-使用-Reducer-和-Context-拓展你的应用" class="headerlink" title="7.使用 Reducer 和 Context 拓展你的应用"></a>7.使用 Reducer 和 Context 拓展你的应用</h2><p>Reducer 可以整合组件的状态更新逻辑。Context 可以将信息深入传递给其他组件。你可以组合使用它们来共同管理一个复杂页面的状态。</p><p>Reducer 有助于保持事件处理程序的简短明了。但随着应用规模越来越庞大，你就可能会遇到别的困难。<strong>目前，<code>tasks</code> 状态和 <code>dispatch</code> 函数仅在顶级 <code>TaskApp</code> 组件中可用</strong>。要让其他组件读取任务列表或更改它，你必须显式 <a href="https://zh-hans.react.dev/learn/passing-props-to-a-component">传递</a> 当前状态和事件处理程序，将其作为 props。</p><p>例如，<code>TaskApp</code> 将 一系列 task 和事件处理程序传递给 <code>TaskList</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-68xw09lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-68xw09lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">TaskList</span><br>  tasks=&#123;tasks&#125;<br>  onChangeTask=&#123;handleChangeTask&#125;<br>  onDeleteTask=&#123;handleDeleteTask&#125;<br>/&gt;<br></code></pre></td></tr></table></div></figure><p><code>TaskList</code> 将事件处理程序传递给 <code>Task</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3xfrcmlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3xfrcmlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Task</span><br>  task=&#123;task&#125;<br>  onChange=&#123;onChangeTask&#125;<br>  onDelete=&#123;onDeleteTask&#125;<br>/&gt;<br></code></pre></td></tr></table></div></figure><p>在像这样的小示例里这样做没什么问题，但是如果你有成千上百个组件，传递所有状态和函数可能会非常麻烦！</p><p>这就是为什么，比起通过 props 传递它们，你可能想把 <code>tasks</code> 状态和 <code>dispatch</code> 函数都 <a href="https://zh-hans.react.dev/learn/passing-data-deeply-with-context">放入 context</a>。<strong>这样，所有的在 <code>TaskApp</code> 组件树之下的组件都不必一直往下传 props 而可以直接读取 tasks 和 dispatch 函数</strong>。</p><p>结合使用 reducer 和 context：</p><ol><li><p><strong>创建</strong> context：<code>useReducer</code> 返回当前的 <code>tasks</code> 和 <code>dispatch</code> 函数来让你更新它们：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s1k3oslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s1k3oslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br></code></pre></td></tr></table></div></figure><p>为了将它们从组件树往下传，你将 <a href="https://zh-hans.react.dev/learn/passing-data-deeply-with-context#step-2-use-the-context">创建</a> 两个不同的 context：</p><ul><li><code>TasksContext</code> 提供当前的 tasks 列表。</li><li><code>TasksDispatchContext</code> 提供了一个函数可以让组件分发动作。</li></ul><p>将它们从单独的文件导出，以便以后可以从其他文件导入它们：</p><p>TasksContext.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0va1hplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0va1hplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">TasksContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">TasksDispatchContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></div></figure><p>把 <code>null</code> 作为默认值传递给两个 context。实际值是由 <code>TaskApp</code> 组件提供的。</p></li><li><p>将 state 和 dispatch <strong>放入</strong> context：现在，你可以将所有的 context 导入 <code>TaskApp</code> 组件。获取 <code>useReducer()</code> 返回的 <code>tasks</code> 和 <code>dispatch</code> 并将它们 <a href="https://zh-hans.react.dev/learn/passing-data-deeply-with-context#step-3-provide-the-context">提供</a> 给整个组件树：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-626opllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-626opllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TasksContext</span>, <span class="hljs-title class_">TasksDispatchContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TasksContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> ( <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TasksContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;tasks&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TasksDispatchContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;dispatch&#125;</span>&gt;</span></span><br><span class="language-xml">        ...</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">TasksDispatchContext.Provider</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">TasksContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在，你可以同时通过 props 和 context 传递信息：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xlw5hklqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xlw5hklqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./AddTask.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TaskList.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TasksContext</span>, <span class="hljs-title class_">TasksDispatchContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TasksContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(<br>    tasksReducer,<br>    initialTasks<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;added&#x27;</span>,<br>      <span class="hljs-attr">id</span>: nextId++,<br>      <span class="hljs-attr">text</span>: text,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;changed&#x27;</span>,<br>      <span class="hljs-attr">task</span>: task<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;deleted&#x27;</span>,<br>      <span class="hljs-attr">id</span>: taskId<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TasksContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;tasks&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TasksDispatchContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;dispatch&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Day off in Kyoto<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">TasksDispatchContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TasksContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;added&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> [...tasks, &#123;<br>        <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>      &#125;];<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;changed&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;deleted&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Unknown action: &#x27;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Philosopher’s Path&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Visit the temple&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Drink matcha&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br>];<br></code></pre></td></tr></table></div></figure></li><li><p>在组件树的任何地方 <strong>使用</strong> context：</p></li><li><p>现在你不需要将 tasks 和事件处理程序在组件树中传递：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vpxufnlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vpxufnlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">TasksContext</span>.<span class="hljs-property">Provider</span> value=&#123;tasks&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TasksDispatchContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;dispatch&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Day off in Kyoto<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">TasksDispatchContext.Provider</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">TasksContext</span>.<span class="hljs-property">Provider</span>&gt;<br></code></pre></td></tr></table></div></figure><p>相反，任何需要 tasks 的组件都可以从 <code>TaskContext</code> 中读取它：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mbk0w7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mbk0w7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskList</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">const</span> tasks = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TasksContext</span>);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>任何组件都可以从 context 中读取 <code>dispatch</code> 函数并调用它，从而更新任务列表：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-m365atlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-m365atlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">AddTask</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TasksDispatchContext</span>);<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// ...</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      setText(&#x27;&#x27;);</span><br><span class="language-xml">      dispatch(&#123;</span><br><span class="language-xml">        type: &#x27;added&#x27;,</span><br><span class="language-xml">        id: nextId++,</span><br><span class="language-xml">        text: text,</span><br><span class="language-xml">      &#125;);</span><br><span class="language-xml">    &#125;&#125;&gt;Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p><mark><strong><code>TaskApp</code> 组件不会向下传递任何事件处理程序，<code>TaskList</code> 也不会</strong>。每个组件都会读取它需要的 context</mark>：</p><p>TaskList.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-z8lw5llqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-z8lw5llqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TasksContext</span>, <span class="hljs-title class_">TasksDispatchContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TasksContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> tasks = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TasksContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;tasks.map(task =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;task.id&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Task</span> <span class="hljs-attr">task</span>=<span class="hljs-string">&#123;task&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Task</span>(<span class="hljs-params">&#123; task &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isEditing, setIsEditing] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TasksDispatchContext</span>);<br>  <span class="hljs-keyword">let</span> taskContent;<br>  <span class="hljs-keyword">if</span> (isEditing) &#123;<br>    taskContent = (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;task.text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">            dispatch(&#123;</span><br><span class="language-xml">              type: &#x27;changed&#x27;,</span><br><span class="language-xml">              task: &#123;</span><br><span class="language-xml">                ...task,</span><br><span class="language-xml">                text: e.target.value</span><br><span class="language-xml">              &#125;</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsEditing(false)&#125;&gt;</span><br><span class="language-xml">          Save</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    taskContent = (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        &#123;task.text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsEditing(true)&#125;&gt;</span><br><span class="language-xml">          Edit</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;task.done&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">          dispatch(&#123;</span><br><span class="language-xml">            type: &#x27;changed&#x27;,</span><br><span class="language-xml">            task: &#123;</span><br><span class="language-xml">              ...task,</span><br><span class="language-xml">              done: e.target.checked</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          &#125;);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      &#123;taskContent&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        dispatch(&#123;</span><br><span class="language-xml">          type: &#x27;deleted&#x27;,</span><br><span class="language-xml">          id: task.id</span><br><span class="language-xml">        &#125;);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        Delete</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>state 仍然 “存在于” 顶层 <code>Task</code> 组件中，由 <code>useReducer</code> 进行管理</strong>。不过，组件树里的组件只要导入这些 context 之后就可以获取 <code>tasks</code> 和 <code>dispatch</code>。</p></li></ol><p><mark>将相关逻辑迁移到一个文件当中 </mark>：这不是必须的，但你可以通过将 reducer 和 context 移动到单个文件中来进一步整理组件。目前，“TasksContext.js” 仅包含两个 context 声明：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q5x67flqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q5x67flqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">TasksContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">TasksDispatchContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></div></figure><p>来给这个文件添加更多代码！将 reducer 移动到此文件中，然后声明一个新的 <code>TasksProvider</code> 组件。此组件将所有部分连接在一起：</p><ol><li>它将管理 reducer 的状态。</li><li>它将提供现有的 context 给组件树。</li><li>它将 <a href="https://zh-hans.react.dev/learn/passing-props-to-a-component#passing-jsx-as-children">把 <code>children</code> 作为 prop</a>，所以你可以传递 JSX。</li></ol><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-px1ig5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-px1ig5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TasksProvider</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TasksContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;tasks&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TasksDispatchContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;dispatch&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">TasksDispatchContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TasksContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>这将使 <code>TaskApp</code> 组件更加直观：</strong></p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b7yixslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b7yixslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./AddTask.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TaskList.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TasksProvider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TasksContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TasksProvider</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Day off in Kyoto<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TasksProvider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>你也可以从 <code>TasksContext.js</code> 中导出使用 context 的函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5b5psblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5b5psblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useTasks</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TasksContext</span>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useTasksDispatch</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TasksDispatchContext</span>);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>组件可以通过以下函数读取 context：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n9nwzzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n9nwzzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> tasks = <span class="hljs-title function_">useTasks</span>();<br><br><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useTasksDispatch</span>();<br></code></pre></td></tr></table></div></figure><p>这不会改变任何行为，但它会允许你之后进一步分割这些 context 或向这些函数添加一些逻辑。<strong>现在所有的 context 和 reducer 连接部分都在 <code>TasksContext.js</code> 中。这保持了组件的干净和整洁，让我们专注于它们显示的内容，而不是它们从哪里获得数据：</strong></p><p>TaskList.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1s1diklqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1s1diklqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useTasks, useTasksDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TasksContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> tasks = <span class="hljs-title function_">useTasks</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;tasks.map(task =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;task.id&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Task</span> <span class="hljs-attr">task</span>=<span class="hljs-string">&#123;task&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Task</span>(<span class="hljs-params">&#123; task &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isEditing, setIsEditing] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useTasksDispatch</span>();<br>  <span class="hljs-keyword">let</span> taskContent;<br>  <span class="hljs-keyword">if</span> (isEditing) &#123;<br>    taskContent = (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;task.text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">            dispatch(&#123;</span><br><span class="language-xml">              type: &#x27;changed&#x27;,</span><br><span class="language-xml">              task: &#123;</span><br><span class="language-xml">                ...task,</span><br><span class="language-xml">                text: e.target.value</span><br><span class="language-xml">              &#125;</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsEditing(false)&#125;&gt;</span><br><span class="language-xml">          Save</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    taskContent = (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        &#123;task.text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsEditing(true)&#125;&gt;</span><br><span class="language-xml">          Edit</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;task.done&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">          dispatch(&#123;</span><br><span class="language-xml">            type: &#x27;changed&#x27;,</span><br><span class="language-xml">            task: &#123;</span><br><span class="language-xml">              ...task,</span><br><span class="language-xml">              done: e.target.checked</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          &#125;);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      &#123;taskContent&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        dispatch(&#123;</span><br><span class="language-xml">          type: &#x27;deleted&#x27;,</span><br><span class="language-xml">          id: task.id</span><br><span class="language-xml">        &#125;);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        Delete</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>可以将 <code>TasksProvider</code> 视为页面的一部分，它知道如何处理 tasks。<code>useTasks</code> 用来读取它们，<code>useTasksDispatch</code> 用来从组件树下的任何组件更新它们。</p><p>AddTask.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4rmcrplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4rmcrplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useTasksDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TasksContext.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">AddTask</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useTasksDispatch</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Add task&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setText(&#x27;&#x27;);</span><br><span class="language-xml">        dispatch(&#123;</span><br><span class="language-xml">          type: &#x27;added&#x27;,</span><br><span class="language-xml">          id: nextId++,</span><br><span class="language-xml">          text: text,</span><br><span class="language-xml">        &#125;); </span><br><span class="language-xml">      &#125;&#125;&gt;Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></div></figure><p>TasksContext.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bebovplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bebovplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext, useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TasksContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TasksDispatchContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TasksProvider</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(<br>    tasksReducer,<br>    initialTasks<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TasksContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;tasks&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TasksDispatchContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;dispatch&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">TasksDispatchContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TasksContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useTasks</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TasksContext</span>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useTasksDispatch</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TasksDispatchContext</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;added&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> [...tasks, &#123;<br>        <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>      &#125;];<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;changed&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;deleted&#x27;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Unknown action: &#x27;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Philosopher’s Path&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Visit the temple&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Drink matcha&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br>];<br></code></pre></td></tr></table></div></figure><img src="image-20231113101014842.png" alt="image-20231113101014842" style="zoom:50%;" /><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">像 useTasks 和 useTasksDispatch 这样的函数被称为 自定义 Hook。 如果你的函数名以 use 开头，它就被认为是一个自定义 Hook。这让你可以使用其他 Hook，比如 useContext。</p><p>随着应用的增长，你可能会有许多这样的 context 和 reducer 的组合。这是一种强大的拓展应用并 <a href="https://zh-hans.react.dev/learn/sharing-state-between-components">提升状态</a> 的方式，让你在组件树深处访问数据时无需进行太多工作。</p><h1 id="六-应急方案"><a href="#六-应急方案" class="headerlink" title="六.应急方案"></a>六.应急方案</h1><p>有些组件可能需要控制和同步 React 之外的系统。例如，你可能需要使用浏览器 API 聚焦输入框，或者在没有 React 的情况下实现视频播放器，或者连接并监听远程服务器的消息。</p><h2 id="1-使用-ref-引用值"><a href="#1-使用-ref-引用值" class="headerlink" title="1.使用 ref 引用值"></a>1.使用 ref 引用值</h2><p>当你希望组件“记住”某些信息，但又不想让这些信息 <a href="https://zh-hans.react.dev/learn/render-and-commit">触发新的渲染</a> 时，你可以使用 <strong>ref</strong> 。</p><p>可以通过从 React 导入 <code>useRef</code> Hook 来为你的组件添加一个 ref：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4jvjellqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4jvjellqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>在你的组件内，调用 <code>useRef</code> Hook 并传入你想要引用的初始值作为唯一参数。例如，这里的 ref 引用的值是“0”：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cma29jlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cma29jlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></div></figure><p><code>useRef</code> 返回一个这样的对象:</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d7pis9lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d7pis9lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <br>  <span class="hljs-attr">current</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 你向 useRef 传入的值</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>你可以用 <code>ref.current</code> 属性访问该 ref 的当前值。这个值是有意被设置为可变的，意味着你既可以读取它也可以写入它。就像一个 React 追踪不到的、用来存储组件信息的秘密“口袋”。（这就是让它成为 React 单向数据流的“应急方案”的原因）</p><p>每次点击按钮时会使 <code>ref.current</code> 递增：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-um6qo6lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-um6qo6lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    ref.<span class="hljs-property">current</span> = ref.<span class="hljs-property">current</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了 &#x27;</span> + ref.<span class="hljs-property">current</span> + <span class="hljs-string">&#x27; 次！&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      点击我！</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>像 <a href="https://zh-hans.react.dev/learn/state-a-components-memory">state</a> 一样，你可以让它指向任何东西：字符串、对象，甚至是函数。与 state 不同的是，ref 是一个普通的 JavaScript 对象，具有可以被读取和修改的 <code>current</code> 属性。</p><p>请注意，<strong>组件不会在每次递增时重新渲染。</strong> <mark>与 state 一样，React 会在每次重新渲染之间保留 ref。但是，设置 state 会重新渲染组件，更改 ref 不会重新渲染组件</mark>！</p><hr><p>制作一个秒表，用户可以通过按按钮来使其启动或停止。为了显示从用户按下“开始”以来经过的时间长度，你需要追踪按下“开始”按钮的时间和当前时间。<strong>此信息用于渲染，所以你会把它保存在 state 中：</strong></p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kvjc5llqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kvjc5llqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [startTime, setStartTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">const</span> [now, setNow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></div></figure><p>当用户按下“开始”时，你将用 <a href="https://developer.mozilla.org/docs/Web/API/setInterval"><code>setInterval</code></a> 每 10 毫秒更新一次时间：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-u8vxdllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-u8vxdllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Stopwatch</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [startTime, setStartTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [now, setNow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleStart</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/*  开始计时。  */</span> <br>    <span class="hljs-title function_">setStartTime</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>    <span class="hljs-title function_">setNow</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br><br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">/*  每 10ms 更新一次当前时间。  */</span> <br>      <span class="hljs-title function_">setNow</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>    &#125;, <span class="hljs-number">10</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> secondsPassed = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (startTime != <span class="hljs-literal">null</span> &amp;&amp; now != <span class="hljs-literal">null</span>) &#123;<br>    secondsPassed = (now - startTime) / <span class="hljs-number">1000</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>时间过去了： &#123;secondsPassed.toFixed(3)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleStart&#125;</span>&gt;</span></span><br><span class="language-xml">        开始</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="clock-1699857496128-1.gif" alt="clock" style="zoom:50%;" /><p>当按下“停止”按钮时，你需要取消现有的 interval，以便让它停止更新 <code>now</code> state 变量。你可以通过调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/clearInterval"><code>clearInterval</code></a> 来完成此操作。但你需要为其提供 interval ID，此 ID 是之前用户按下 Start、调用 <code>setInterval</code> 时返回的。你需要将 interval ID 保留在某处。 <strong>由于 interval ID 不用于渲染，你可以将其保存在 ref 中：</strong></p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-42hveulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-42hveulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Stopwatch</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [startTime, setStartTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [now, setNow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> intervalRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleStart</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setStartTime</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>    <span class="hljs-title function_">setNow</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br><br>    <span class="hljs-built_in">clearInterval</span>(intervalRef.<span class="hljs-property">current</span>);<br>    intervalRef.<span class="hljs-property">current</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setNow</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>    &#125;, <span class="hljs-number">10</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleStop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearInterval</span>(intervalRef.<span class="hljs-property">current</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> secondsPassed = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (startTime != <span class="hljs-literal">null</span> &amp;&amp; now != <span class="hljs-literal">null</span>) &#123;<br>    secondsPassed = (now - startTime) / <span class="hljs-number">1000</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>时间过去了： &#123;secondsPassed.toFixed(3)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleStart&#125;</span>&gt;</span></span><br><span class="language-xml">        开始</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleStop&#125;</span>&gt;</span></span><br><span class="language-xml">        停止</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="clock2.gif" alt="clock2" style="zoom:50%;" /><p><mark>当一条信息用于渲染时，将它保存在 state 中。当一条信息仅被事件处理器需要，并且更改它不需要重新渲染时，使用 ref 可能会更高效。</mark></p><p>ref和state的区别：</p><table><thead><tr><th>ref</th><th>state</th></tr></thead><tbody><tr><td><code>useRef(initialValue)</code>返回 <code>&#123; current: initialValue &#125;</code></td><td><code>useState(initialValue)</code> 返回 state 变量的当前值和一个 state 设置函数 ( <code>[value, setValue]</code>)</td></tr><tr><td>更改时不会触发重新渲染</td><td>更改时触发重新渲染。</td></tr><tr><td>可变 —— 你可以在渲染过程之外修改和更新 <code>current</code> 的值。</td><td>“不可变” —— 你必须使用 state 设置函数来修改 state 变量，从而排队重新渲染。</td></tr><tr><td>你不应在渲染期间读取（或写入） <code>current</code> 值。</td><td>你可以随时读取 state。但是，每次渲染都有自己不变的 state <a href="https://zh-hans.react.dev/learn/state-as-a-snapshot">快照</a>。</td></tr></tbody></table><p>使用 state 实现的计数器按钮：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9yibyblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9yibyblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      你点击了 &#123;count&#125; 次</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="click1.gif" alt="click1" style="zoom:50%;" /><p>因为 <code>count</code> 的值将会被显示，所以为其使用 state 是合理的。当使用 setCount() 设置计数器的值时，React 会重新渲染组件，并且屏幕会更新以展示新的计数。</p><p>如果你试图用 ref 来实现它，React 永远不会重新渲染组件，所以你永远不会看到计数变化！看看点击这个按钮如何 <strong>不更新它的文本</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tg8rwalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tg8rwalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> countRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/*  这样并未重新渲染组件！  */</span> <br>    countRef.<span class="hljs-property">current</span> = countRef.<span class="hljs-property">current</span> + <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      你点击了 &#123;countRef.current&#125; 次</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="click2.gif" alt="click2" style="zoom:50%;" /><p>这就是为什么在渲染期间读取 <code>ref.current</code> 会导致代码不可靠的原因。如果需要，请改用 state。</p><p>何时使用ref：当你的组件需要“跳出” React 并与外部 API 通信时，你会用到 ref —— 通常是不会影响组件外观的浏览器 API。以下是这些罕见情况中的几个：</p><ul><li>存储 <a href="https://developer.mozilla.org/docs/Web/API/setTimeout">timeout ID</a></li><li>存储和操作 <a href="https://developer.mozilla.org/docs/Web/API/Element">DOM 元素</a></li><li>存储不需要被用来计算 JSX 的其他对象。</li></ul><p>如果你的组件需要存储一些值，但不影响渲染逻辑，请选择 ref。</p><p>遵循这些原则将使你的组件更具可预测性：</p><ul><li><strong>将 ref 视为应急方案。</strong> 当你使用外部系统或浏览器 API 时，ref 很有用。如果你很大一部分应用程序逻辑和数据流都依赖于 ref，你可能需要重新考虑你的方法。</li><li><strong>不要在渲染过程中读取或写入 <code>ref.current</code>。</strong> 如果渲染过程中需要某些信息，请使用 <a href="https://zh-hans.react.dev/learn/state-a-components-memory">state</a> 代替。由于 React 不知道 <code>ref.current</code> 何时发生变化，即使在渲染时读取它也会使组件的行为难以预测。（唯一的例外是像 <code>if (!ref.current) ref.current = new Thing()</code> 这样的代码，它只在第一次渲染期间设置一次 ref。）</li></ul><p>React state 的限制不适用于 ref。例如，state 就像 <a href="https://zh-hans.react.dev/learn/state-as-a-snapshot">每次渲染的快照</a>，并且 <a href="https://zh-hans.react.dev/learn/queueing-a-series-of-state-updates">不会同步更新</a>。但是当你改变 ref 的 current 值时，它会立即改变：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8dxp2zlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8dxp2zlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">ref.<span class="hljs-property">current</span> = <span class="hljs-number">5</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ref.<span class="hljs-property">current</span>); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></div></figure><p>这是因为 <strong>ref 本身是一个普通的 JavaScript 对象，</strong> 所以它的行为就像对象那样。</p><p>当你使用 ref 时，也无需担心 <a href="https://zh-hans.react.dev/learn/updating-objects-in-state">避免变更</a>。只要你改变的对象不用于渲染，React 就不会关心你对 ref 或其内容做了什么。</p><p>ref 最常见的用法是访问 DOM 元素。例如，如果你想以编程方式聚焦一个输入框，这种用法就会派上用场。当你将 ref 传递给 JSX 中的 <code>ref</code> 属性时，比如 <code>&lt;div ref=&#123;myRef&#125;&gt;</code>，React 会将相应的 DOM 元素放入 <code>myRef.current</code> 中。当元素从 DOM 中删除时，React 会将 <code>myRef.current</code> 更新为 <code>null</code>。</p><hr><p>修复坏掉的聊天输入框：输入消息并单击“发送”。你会注意到，在看到“已发送！”提示框之前有 3 秒的延迟。在此延迟期间，你可以看到一个“撤消”按钮。点击它。这个“撤消”按钮应该阻止“发送！”消息弹出。它通过调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/clearTimeout"><code>clearTimeout</code></a> 来做到这点，这一步骤需要使用在 <code>handleSend</code> 时保存的 timeout ID。但是，即使在单击“撤消”后，“已发送！”消息仍然出现。找出它不起作用的原因，然后修复它。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0p96whlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0p96whlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> timeoutID = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">true</span>);<br>    timeoutID = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;已发送！&#x27;</span>);<br>        <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">false</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleUndo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">clearTimeout</span>(timeoutID);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>每当你的组件重新渲染时（例如当你设置 state 时），所有局部变量都会从头开始初始化。这就是为什么你不能将 timeout ID 保存在像 <code>timeoutID</code> 这样的局部变量中，然后期望未来另一个事件处理器“看到”它。相反，将它存储在一个 ref 中，React 将在渲染之间保留它。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1wi96flqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1wi96flqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Chat</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [isSending, setIsSending] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> timeoutRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">true</span>);<br>    timeoutRef.<span class="hljs-property">current</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;已发送!&#x27;</span>);<br>      <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">false</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleUndo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIsSending</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">clearTimeout</span>(timeoutRef.<span class="hljs-property">current</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isSending&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSend&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;isSending ? &#x27;发送中……&#x27; : &#x27;发送&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isSending &amp;&amp;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleUndo&#125;</span>&gt;</span></span><br><span class="language-xml">          撤销</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231113150628769.png" alt="image-20231113150628769" style="zoom:50%;" /><hr><p>修复无法重新渲染的组件：这个按钮本该在显示“开”和“关”之间切换。但是，它始终显示“关”。这段代码有什么问题？修复它。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gjg1oelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gjg1oelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toggle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      isOnRef.current = !isOnRef.current;</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      &#123;isOnRef.current ? &#x27;开&#x27; : &#x27;关&#x27;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>修复：ref 的 current 值被用于计算渲染输出：<code>&#123;isOnRef.current ? &#39;开&#39;：&#39;关&#39;&#125;</code>。这表明此信息本来不应该在 ref 中，而应该放在 state 里。要修复它，请删除 ref ，使用 state 代替：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-60l3gdlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-60l3gdlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Toggle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOn, setIsOn] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      setIsOn(!isOn);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      &#123;isOn ? &#x27;开&#x27; : &#x27;关&#x27;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="on.gif" alt="on" style="zoom:50%;" /><hr><p>修复防抖：所有按钮点击处理器都是 <a href="https://redd.one/blog/debounce-vs-throttle">“防抖的”</a>。 要了解这意味着什么，请按下其中一个按钮。注意消息在一秒后显示。如果你在等待消息时按下按钮，计时器将重置。因此如果你多次快速单击同一个按钮，则直到你停止单击 <strong>之后</strong> 1 秒钟，该消息才会显示。防抖可以让你将一些动作推迟到用户“停止动作”之后。</p><p>这个例子可以正常运行，但并不完全符合预期。按钮不是独立的。要查看问题，请单击其中一个按钮，然后立即单击另一个按钮。你本来期望在延迟之后，你会看到两个按钮的消息。但只有最后一个按钮的消息出现了。第一个按钮的消息丢失了。</p><p>为什么按钮会相互干扰呢？查找并修复问题。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8alxkclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8alxkclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> timeoutID;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">DebouncedButton</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      clearTimeout(timeoutID);</span><br><span class="language-xml">      timeoutID = setTimeout(() =&gt; &#123;</span><br><span class="language-xml">        onClick();</span><br><span class="language-xml">      &#125;, 1000);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>修复：像 <code>timeoutID</code> 这样的变量是被所有组件共享的。这就是为什么单击第二个按钮会重置第一个按钮未完成的 timeout 的原因。要解决此问题，你可以把 timeout 保存在 ref 中。每个按钮都有自己的 ref，因此它们不会相互冲突。请注意快速单击两个按钮如何显示两个消息。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9gfga2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9gfga2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">DebouncedButton</span>(<span class="hljs-params">&#123; onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> timeoutRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">      clearTimeout(timeoutRef.current);</span><br><span class="language-xml">      timeoutRef.current = setTimeout(() =&gt; &#123;</span><br><span class="language-xml">        onClick();</span><br><span class="language-xml">      &#125;, 1000);</span><br><span class="language-xml">    &#125;&#125;&gt;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Dashboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">DebouncedButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;宇宙飞船已发射！&#x27;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        发射宇宙飞船</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">DebouncedButton</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">DebouncedButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;汤煮好了！&#x27;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        煮点儿汤</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">DebouncedButton</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">DebouncedButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;摇篮曲唱完了！&#x27;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        唱首摇篮曲</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">DebouncedButton</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="debounce.gif" alt="debounce" style="zoom:50%;" /><hr><p>读取最新的 state：当你按下“发送”后，在显示消息之前会有一小段延迟。输入“你好”，按下发送，然后再次快速编辑输入。尽管你进行了编辑，提示框仍会显示“你好”（这是按钮被点击 <a href="https://zh-hans.react.dev/learn/state-as-a-snapshot#state-over-time">那一刻</a> state 的值）。</p><p>通常，这种行为是你在应用程序中想要的。但是，有时可能需要一些异步代码来读取某些 state 的 <strong>最新</strong> 版本。你能想出一种方法，让提示框显示 <strong>当前</strong> 输入文本而不是点击时的内容吗？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n74t23lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n74t23lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Chat</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;正在发送：&#x27;</span> + text);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSend&#125;</span>&gt;</span></span><br><span class="language-xml">        发送</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>修复：state 运作起来 <a href="https://zh-hans.react.dev/learn/state-as-a-snapshot">就像快照</a>，因此你无法从 timeout 等异步操作中读取最新的 state。但是，你可以在 ref 中保存最新的输入文本。ref 是可变的，因此你可以随时读取 <code>current</code> 属性。由于当前文本也用于渲染，在这个例子中，你需要 <strong>同时</strong> 使用一个 state 变量（用于渲染）<strong>和</strong> 一个 ref（在 timeout 时读取它）。你需要手动更新当前的 ref 值。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0syvqwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0syvqwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Chat</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> textRef = <span class="hljs-title function_">useRef</span>(text);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setText</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>    textRef.<span class="hljs-property">current</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;正在发送：&#x27;</span> + textRef.<span class="hljs-property">current</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSend&#125;</span>&gt;</span></span><br><span class="language-xml">        发送</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="send.gif" alt="send" style="zoom:50%;" /><h2 id="2-使用-ref-操作-DOM"><a href="#2-使用-ref-操作-DOM" class="headerlink" title="2.使用 ref 操作 DOM"></a>2.使用 ref 操作 DOM</h2><p>由于 React 会自动处理更新 <a href="https://developer.mozilla.org/docs/Web/API/Document_Object_Model/Introduction">DOM</a> 以匹配你的渲染输出，因此你在组件中通常不需要操作 DOM。但是，有时你可能需要访问由 React 管理的 DOM 元素 —— 例如，让一个节点获得焦点、滚动到它或测量它的尺寸和位置。在 React 中没有内置的方法来做这些事情，所以你需要一个指向 DOM 节点的 <strong>ref</strong> 来实现。</p><p>要访问由 React 管理的 DOM 节点，首先，引入 <code>useRef</code> Hook：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ioepwplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ioepwplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>然后，在你的组件中使用它声明一个 ref：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qtmibxlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qtmibxlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> myRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></div></figure><p>最后，将 ref 作为 ref 属性传递给您想要获取 DOM 节点的 JSX 标签：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-spqgmrlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-spqgmrlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div ref=&#123;myRef&#125;&gt;<br></code></pre></td></tr></table></div></figure><p><code>useRef</code> Hook 返回一个对象，该对象有一个名为 <code>current</code> 的属性。最初，<code>myRef.current</code> 是 <code>null</code>。当 React 为这个 <code>&lt;div&gt;</code> 创建一个 DOM 节点时，React 会把对该节点的引用放入 <code>myRef.current</code>。然后，你可以从 <a href="https://zh-hans.react.dev/learn/responding-to-events">事件处理器</a> 访问此 DOM 节点，并使用在其上定义的内置<a href="https://developer.mozilla.org/docs/Web/API/Element">浏览器 API</a>。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1jo59plqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1jo59plqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/*  你可以使用任意浏览器 API，例如：  */</span> <br>myRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">scrollIntoView</span>();<br></code></pre></td></tr></table></div></figure><p>虽然 DOM 操作是 ref 最常见的用例，但 <code>useRef</code> Hook 可用于存储 React 之外的其他内容，例如计时器 ID 。与 state 类似，ref 能在渲染之间保留。你甚至可以将 ref 视为设置它们时不会触发重新渲染的 state 变量！</p><hr><p>滚动图像轮播：此图像轮播有一个“下一个”按钮，可以切换激活的图像。单击时使图库水平滚动到激活的图像。你需要在激活的图像的 DOM 节点上调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView"><code>scrollIntoView()</code></a>：可以声明一个 <code>selectedRef</code>，然后根据条件将它传递给当前图像：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sg3vrzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sg3vrzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;index</span> === <span class="hljs-string">i</span> ? <span class="hljs-attr">selectedRef</span> <span class="hljs-attr">:</span> <span class="hljs-attr">null</span>&#125;&gt;</span><br></code></pre></td></tr></table></div></figure><p>当<code>index === i</code>时，表示图像是被选中的图像，相应的 <code>&lt;li&gt;</code> 将接收到 <code>selectedRef</code>。React 将确保 <code>selectedRef.current</code> 始终指向正确的 DOM 节点。</p><p>请注意，为了强制 React 在滚动前更新 DOM，<code>flushSync</code> 调用是必需的。否则，<code>selectedRef.current</code>将始终指向之前选择的项目。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b3qttvlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b3qttvlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; flushSync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">CatFriends</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> selectedRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          flushSync(() =&gt; &#123;</span><br><span class="language-xml">            if (index &lt; catList.length - 1) &#123;</span><br><span class="language-xml">              setIndex(index + 1);</span><br><span class="language-xml">            &#125; else &#123;</span><br><span class="language-xml">              setIndex(0);</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          &#125;);</span><br><span class="language-xml">          selectedRef.current.scrollIntoView(&#123;</span><br><span class="language-xml">            behavior: &#x27;smooth&#x27;,</span><br><span class="language-xml">            block: &#x27;nearest&#x27;,</span><br><span class="language-xml">            inline: &#x27;center&#x27;</span><br><span class="language-xml">          &#125;);            </span><br><span class="language-xml">        &#125;&#125;&gt;</span><br><span class="language-xml">          下一步</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;catList.map((cat, i) =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;cat.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;index</span> === <span class="hljs-string">i</span> ?</span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">selectedRef</span> <span class="hljs-attr">:</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">null</span></span></span><br><span class="hljs-tag"><span class="language-xml">              &#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            &gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  <span class="hljs-attr">index</span> === <span class="hljs-string">i</span> ?</span></span><br><span class="hljs-tag"><span class="language-xml">                    &#x27;<span class="hljs-attr">active</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:</span> &#x27;&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">                &#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;cat.imageUrl&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">猫猫</span> #&#x27; + <span class="hljs-attr">cat.id</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> catList = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  catList.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">id</span>: i,<br>    <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;https://placekitten.com/250/200?image=&#x27;</span> + i<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="scroll.gif" alt="scroll" style="zoom:50%;" /><p>如何使用 ref 回调管理 ref 列表：有时ref 的数量是预先确定的。但有时候，你可能需要为列表中的每一项都绑定 ref ，而你又不知道会有多少项。像下面这样做<strong>是行不通的</strong>：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ndyx5plqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ndyx5plqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  &#123;items.map((item) =&gt; &#123;<br>    /* 行不通！   */ <br>    const ref = useRef(null);<br>    return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span>;<br>  &#125;)&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>这是因为 <strong>Hook 只能在组件的顶层被调用</strong>。不能在循环语句、条件语句或 <code>map()</code> 函数中调用 <code>useRef</code> 。</p><p>可能的解决方案：</p><ol><li>用一个 ref 引用其父元素，然后用 DOM 操作方法如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll"><code>querySelectorAll</code></a> 来寻找它的子节点。然而，这种方法很脆弱，如果 DOM 结构发生变化，可能会失效或报错。</li><li><strong>将函数传递给 <code>ref</code> 属性</strong>。这称为 <mark><a href="https://zh-hans.react.dev/reference/react-dom/components/common#ref-callback"><code>ref</code> 回调</a></mark>。当需要设置 ref 时，React 将传入 DOM 节点来调用你的 ref 回调，并在需要清除它时传入 <code>null</code> 。这使你可以维护自己的数组或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a>，并通过其索引或某种类型的 ID 访问任何 ref。</li></ol><p>此示例展示了如何使用此方法滚动到长列表中的任意节点：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rt1dvqlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rt1dvqlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">CatFriends</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> itemsRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">scrollToId</span>(<span class="hljs-params">itemId</span>) &#123;<br>    <span class="hljs-keyword">const</span> map = <span class="hljs-title function_">getMap</span>();<br>    <span class="hljs-keyword">const</span> node = map.<span class="hljs-title function_">get</span>(itemId);<br>    node.<span class="hljs-title function_">scrollIntoView</span>(&#123;<br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span>,<br>      <span class="hljs-attr">block</span>: <span class="hljs-string">&#x27;nearest&#x27;</span>,<br>      <span class="hljs-attr">inline</span>: <span class="hljs-string">&#x27;center&#x27;</span><br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getMap</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!itemsRef.<span class="hljs-property">current</span>) &#123;<br>      <span class="hljs-comment">/*  首次运行时初始化 Map。  */</span> <br>      itemsRef.<span class="hljs-property">current</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> itemsRef.<span class="hljs-property">current</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> scrollToId(0)&#125;&gt;</span><br><span class="language-xml">          Tom</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> scrollToId(5)&#125;&gt;</span><br><span class="language-xml">          Maru</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> scrollToId(9)&#125;&gt;</span><br><span class="language-xml">          Jellylorum</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;catList.map(cat =&gt; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;cat.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;(node)</span> =&gt;</span> &#123;</span><br><span class="language-xml">                const map = getMap();</span><br><span class="language-xml">                if (node) &#123;</span><br><span class="language-xml">                  map.set(cat.id, node);</span><br><span class="language-xml">                &#125; else &#123;</span><br><span class="language-xml">                  map.delete(cat.id);</span><br><span class="language-xml">                &#125;</span><br><span class="language-xml">              &#125;&#125;</span><br><span class="language-xml">            &gt;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;cat.imageUrl&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">Cat</span> #&#x27; + <span class="hljs-attr">cat.id</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> catList = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  catList.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">id</span>: i,<br>    <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;https://placekitten.com/250/200?image=&#x27;</span> + i<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="scroll2.gif" alt="scroll2" style="zoom:50%;" /><p>当你将 ref 放在像 <code>&lt;input /&gt;</code> 这样输出浏览器元素的内置组件上时，React 会将该 ref 的 <code>current</code> 属性设置为相应的 DOM 节点（例如浏览器中实际的 <code>&lt;input /&gt;</code> ）。</p><p>但是，如果你尝试将 ref 放在 <strong>你自己的</strong> 组件上，例如 <code>&lt;MyInput /&gt;</code>，默认情况下你会得到 <code>null</code>。请注意单击按钮 <strong>并不会</strong> 聚焦输入框：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-25n9kzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-25n9kzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyInput</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyForm</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        聚焦输入框</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>报错<code>Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?</code></p><p>发生这种情况是因为默认情况下，React 不允许组件访问其他组件的 DOM 节点。甚至自己的子组件也不行！这是故意的。Refs 是一个应急方案，应该谨慎使用。手动操作 <strong>另一个</strong> 组件的 DOM 节点会使你的代码更加脆弱。</p><p>相反，<strong>想要</strong> 暴露其 DOM 节点的组件必须<strong>选择</strong>该行为。<mark>一个组件可以指定将它的 ref “转发”给一个子组件</mark>。下面是 <code>MyInput</code> 如何使用 <code>forwardRef</code> API：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7ic1cslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7ic1cslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>它是这样工作的:</p><ol><li><code>&lt;MyInput ref=&#123;inputRef&#125; /&gt;</code> 告诉 React 将对应的 DOM 节点放入 <code>inputRef.current</code> 中。但是，这取决于 <code>MyInput</code> 组件是否允许这种行为， 默认情况下是不允许的。</li><li><code>MyInput</code> 组件是使用 <code>forwardRef</code> 声明的。 <strong>这让从上面接收的 <code>inputRef</code> 作为第二个参数 <code>ref</code> 传入组件</strong>，第一个参数是 <code>props</code> 。</li><li><code>MyInput</code> 组件将自己接收到的 <code>ref</code> 传递给它内部的 <code>&lt;input&gt;</code>。</li></ol><p>现在，单击按钮聚焦输入框起作用了：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3wuyxclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3wuyxclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; forwardRef, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span></span>;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        聚焦输入框</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="focusinput.gif" alt="focusinput" style="zoom:50%;" /><p><mark>使分开的组件中的搜索域获得焦点 </mark>：做到单击“搜索”按钮将焦点放在搜索域上。请注意，每个组件都在单独的文件中定义，并且不能将其移出。</p><p>解答：需要向 <code>SearchButton</code> 添加一个<code>onClick</code> 属性，<code>SearchButton</code> 会将其向下传递给浏览器原生 <code>&lt;button&gt;</code>。你还要向下传递一个 ref 给 <code>&lt;SearchInput&gt;</code>，<code>&lt;SearchInput&gt;</code> 将转发 ref 给真正的 <code>&lt;input&gt;</code> 并对它进行赋值。最后，在单击事件处理器中，你将能对存储在该 ref 中的 DOM 节点调用 <code>focus</code>。</p><p>SearchInput.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b9yfwalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b9yfwalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; forwardRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">forwardRef</span>(<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">SearchInput</span>(<span class="hljs-params">props, ref</span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;找什么呢？&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br>    );<br>  &#125;<br>);<br></code></pre></td></tr></table></div></figure><p>SearchButton.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p7k4zzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p7k4zzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">SearchButton</span>(<span class="hljs-params">&#123; onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      搜索</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-arz9uwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-arz9uwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SearchButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./SearchButton.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SearchInput</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./SearchInput.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SearchButton</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          inputRef.current.focus();</span><br><span class="language-xml">        &#125;&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SearchInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">在设计系统中，将低级组件（如按钮、输入框等）的 ref 转发到它们的 DOM 节点是一种常见模式。另一方面，像表单、列表或页面段落这样的高级组件通常不会暴露它们的 DOM 节点，以避免对 DOM 结构的意外依赖。</p><p>React 何时添加 refs：在 React 中，每次更新都分为 <a href="https://zh-hans.react.dev/learn/render-and-commit#step-3-react-commits-changes-to-the-dom">两个阶段</a>：</p><ul><li>在 <strong>渲染</strong> 阶段， React 调用你的组件来确定屏幕上应该显示什么。</li><li>在 <strong>提交</strong> 阶段， React 把变更应用于 DOM。</li></ul><p>通常，你 <a href="https://zh-hans.react.dev/learn/referencing-values-with-refs#best-practices-for-refs">不希望</a> 在渲染期间访问 refs。这也适用于保存 DOM 节点的 refs。在第一次渲染期间，DOM 节点尚未创建，因此 <code>ref.current</code> 将为 <code>null</code>。在渲染更新的过程中，DOM 节点还没有更新。所以读取它们还为时过早。</p><p>React 在提交阶段设置 <code>ref.current</code>。在更新 DOM 之前，React 将受影响的 <code>ref.current</code> 值设置为 <code>null</code>。更新 DOM 后，React 立即将它们设置到相应的 DOM 节点。</p><p><strong>通常，你将从事件处理器访问 refs。</strong> 如果你想使用 ref 执行某些操作，但没有特定的事件可以执行此操作，你可能需要一个 effect。</p><p><mark>用 flushSync 同步更新 state</mark>：添加一个新的待办事项，并将屏幕向下滚动到列表的最后一个子项。请注意，出于某种原因，它总是滚动到最后一个添加 <strong>之前</strong> 的待办事项：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0n5c8dlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0n5c8dlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> listRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [todos, setTodos] = <span class="hljs-title function_">useState</span>(<br>    initialTodos<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAdd</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> newTodo = &#123; <span class="hljs-attr">id</span>: nextId++, <span class="hljs-attr">text</span>: text &#125;;<br>    <span class="hljs-title function_">setText</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-title function_">setTodos</span>([ ...todos, newTodo]);<br>    listRef.<span class="hljs-property">current</span>.<span class="hljs-property">lastChild</span>.<span class="hljs-title function_">scrollIntoView</span>(&#123;<br>      <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span>,<br>      <span class="hljs-attr">block</span>: <span class="hljs-string">&#x27;nearest&#x27;</span><br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleAdd&#125;</span>&gt;</span></span><br><span class="language-xml">        添加</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;listRef&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;todos.map(todo =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;todo.id&#125;</span>&gt;</span>&#123;todo.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> initialTodos = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>  initialTodos.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">id</span>: nextId++,<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;待办 #&#x27;</span> + (i + <span class="hljs-number">1</span>)<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>问题出在这两行：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9cfpsblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9cfpsblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setTodos</span>([ ...todos, newTodo]);<br><br>listRef.<span class="hljs-property">current</span>.<span class="hljs-property">lastChild</span>.<span class="hljs-title function_">scrollIntoView</span>();<br></code></pre></td></tr></table></div></figure><p><mark>在 React 中，<a href="https://zh-hans.react.dev/learn/queueing-a-series-of-state-updates">state 更新是排队进行的</a></mark>。通常，这就是你想要的。但是，在这个示例中会导致问题，因为 <code>setTodos</code> 不会立即更新 DOM。因此，当你将列表滚动到最后一个元素时，尚未添加待办事项。这就是为什么滚动总是“落后”一项的原因。</p><p>要解决此问题，你可以<mark>强制 React 同步更新（“刷新”）DOM</mark>。 为此，从 <code>react-dom</code> 导入 <code>flushSync</code> 并<strong>将 state 更新包裹</strong> 到 <code>flushSync</code> 调用中。这将指示 React 当封装在 <code>flushSync</code> 中的代码执行后，立即同步更新 DOM。因此，当你尝试滚动到最后一个待办事项时，它已经在 DOM 中了：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g1i9eelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g1i9eelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; flushSync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAdd</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> newTodo = &#123; <span class="hljs-attr">id</span>: nextId++, <span class="hljs-attr">text</span>: text &#125;;<br>    <span class="hljs-title function_">flushSync</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setText</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-title function_">setTodos</span>([ ...todos, newTodo]);      <br>    &#125;);<br>    listRef.<span class="hljs-property">current</span>.<span class="hljs-property">lastChild</span>.<span class="hljs-title function_">scrollIntoView</span>(&#123;<br>        <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span>,<br>        <span class="hljs-attr">block</span>: <span class="hljs-string">&#x27;nearest&#x27;</span><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>使用 refs 操作 DOM 的最佳实践：Refs 是一个应急方案。你应该只在你必须“跳出 React”时使用它们。这方面的常见示例包括管理焦点、滚动位置或调用 React 未暴露的浏览器 API。</p><p>如果你坚持聚焦和滚动等非破坏性操作，应该不会遇到任何问题。但是，如果你尝试手动<strong>修改</strong> DOM，则可能会与 React 所做的更改发生冲突。</p><p>为了说明这个问题，这个例子包括一条欢迎消息和两个按钮。第一个按钮使用 <a href="https://zh-hans.react.dev/learn/conditional-rendering">条件渲染</a> 和 <a href="https://zh-hans.react.dev/learn/state-a-components-memory">state</a> 切换它的显示和隐藏，就像你通常在 React 中所做的那样。第二个按钮使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/remove"><code>remove()</code> DOM API</a> 将其从 React 控制之外的 DOM 中强行移除.</p><p>尝试按几次“通过 setState 切换”。该消息会消失并再次出现。然后按 “从 DOM 中删除”。这将强行删除它。最后，按 “通过 setState 切换”：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8zmj9jlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8zmj9jlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [show, setShow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setShow(!show);</span><br><span class="language-xml">        &#125;&#125;&gt;</span><br><span class="language-xml">        通过 setState 切换</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          ref.current.remove();</span><br><span class="language-xml">        &#125;&#125;&gt;</span><br><span class="language-xml">        从 DOM 中删除</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="ref.gif" alt="ref" style="zoom:50%;" /><p>在你手动删除 DOM 元素后，尝试使用 <code>setState</code> 再次显示它会导致崩溃。这是因为你更改了 DOM，而 React 不知道如何继续正确管理它。</p><p><mark>避免更改由 React 管理的 DOM 节点</mark>。 对 React 管理的元素进行修改、添加子元素、从中删除子元素会导致不一致的视觉结果，或与上述类似的崩溃。</p><p>但是，这并不意味着你完全不能这样做。它需要谨慎。 <strong>你可以安全地修改 React 没有理由更新的部分 DOM。</strong> 例如，如果某些 <code>&lt;div&gt;</code> 在 JSX 中始终为空，React 将没有理由去变动其子列表。 因此，在那里手动增删元素是安全的。</p><hr><p>播放和暂停视频：按钮切换 state 变量以在播放和暂停状态之间切换。 然而，为了实际播放或暂停视频，切换状态是不够的。你还需要在 <code>&lt;video&gt;</code> 的 DOM 元素上调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/play"><code>play()</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/pause"><code>pause()</code></a>。 向它添加一个 ref，并使按钮起作用。对于额外的挑战，即使用户右键单击视频并使用内置浏览器媒体控件播放，也要使“播放”按钮与视频是否正在播放同步。 您可能需要在视频中监听 <code>onPlay</code> 和 <code>onPause</code> 才能做到这一点。</p><p>解答：为了处理内置浏览器控件，您可以将 <code>onPlay</code> 和 <code>onPause</code> 处理程序添加到 <code>&lt;video&gt;</code> 元素，并调用它们的 <code>setIsPlaying</code>。 这样，如果用户使用浏览器控件播放视频，状态将相应调整。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zceiumlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zceiumlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> nextIsPlaying = !isPlaying;<br>    <span class="hljs-title function_">setIsPlaying</span>(nextIsPlaying);<br><br>    <span class="hljs-keyword">if</span> (nextIsPlaying) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;isPlaying ? &#x27;暂停&#x27; : &#x27;播放&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">video</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;250&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onPlay</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(true)&#125;</span><br><span class="language-xml">        onPause=&#123;() =&gt; setIsPlaying(false)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">source</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="play.gif" alt="play" style="zoom:50%;" /><hr><p>使搜索域获得焦点：做到单击“搜索”按钮时，使搜索域获得焦点。</p><p>解答：向输入框添加一个 ref，并在 DOM 节点上调用 <code>focus()</code> 以使其获得焦点。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vm10illqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vm10illqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          inputRef.current.focus();</span><br><span class="language-xml">        &#125;&#125;&gt;</span><br><span class="language-xml">          搜索</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;找什么呢？&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="focus.gif" alt="focus" style="zoom:50%;" /><h2 id="3-使用-Effect-同步"><a href="#3-使用-Effect-同步" class="headerlink" title="3.使用 Effect 同步"></a>3.使用 Effect 同步</h2><p>有些组件需要与外部系统同步。例如，你可能希望根据 React state 控制非 React 组件、设置服务器连接或在组件出现在屏幕上时发送分析日志。Effects 会在渲染后运行一些代码，以便可以将组件与 React 之外的某些系统同步。</p><p>React 组件中的两种逻辑类型：</p><ul><li><strong>渲染逻辑代码</strong>（在 <a href="https://zh-hans.react.dev/learn/describing-the-ui">描述 UI</a> 中有介绍）位于组件的顶层。你将在这里接收 props 和 state，并对它们进行转换，最终返回你想在屏幕上看到的 JSX。<a href="https://zh-hans.react.dev/learn/keeping-components-pure">渲染的代码必须是纯粹的</a>——就像数学公式一样，它只应该“计算”结果，而不做其他任何事情。</li><li><strong>事件处理程序</strong>（在 <a href="https://zh-hans.react.dev/learn/adding-interactivity">添加交互性</a> 中介绍）是嵌套在组件内部的函数，而不仅仅是计算函数。事件处理程序可能会更新输入字段、提交 HTTP POST 请求以购买产品，或者将用户导航到另一个屏幕。事件处理程序包含由特定用户操作（例如按钮点击或键入）引起的“副作用”（它们改变了程序的状态）。</li></ul><p>有时这还不够。考虑一个 <code>ChatRoom</code> 组件，它在屏幕上可见时必须连接到聊天服务器。连接到服务器不是一个纯计算（它包含副作用），因此它不能在渲染过程中发生。然而，并没有一个特定的事件（比如点击）导致 <code>ChatRoom</code> 被显示。</p><p><mark>Effect 允许你指定由渲染本身，而不是特定事件引起的副作用</mark>。在聊天中发送消息是一个“事件”，因为它直接由用户点击特定按钮引起。然而，建立服务器连接是 Effect，因为它应该发生无论哪种交互导致组件出现。Effect 在屏幕更新后的 <a href="https://zh-hans.react.dev/learn/render-and-commit">提交阶段</a> 运行。这是一个很好的时机，可以将 React 组件与某个外部系统（如网络或第三方库）同步。</p><p><code>Effect</code> 在 React 中是专有定义——由渲染引起的副作用，或称为副作用。</p><p>编写 Effect 需要遵循以下三个规则：</p><ol><li><strong>声明 Effect</strong>。默认情况下，Effect 会在每次渲染后都会执行。</li><li><strong>指定 Effect 依赖</strong>。大多数 Effect 应该按需执行，而不是在每次渲染后都执行。例如，淡入动画应该只在组件出现时触发。连接和断开服务器的操作只应在组件出现和消失时，或者切换聊天室时执行。</li><li><strong>必要时添加清理（cleanup）函数</strong>。有时 Effect 需要指定如何停止、撤销，或者清除它的效果。例如，“连接”操作需要“断连”，“订阅”需要“退订”，“获取”既需要“取消”也需要“忽略”。</li></ol><p>第一步：声明 Effect ：首先在 React 中引入 <a href="https://zh-hans.react.dev/reference/react/useEffect"><code>useEffect</code> Hook</a>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-enidrmlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-enidrmlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>然后，在组件顶部调用它，并传入在每次渲染时都需要执行的代码：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sq5mpjlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sq5mpjlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/*  每次渲染后都会执行此处的代码  */</span> <br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>每当你的组件渲染时，React 将更新屏幕，然后运行 <code>useEffect</code> 中的代码。换句话说，**<code>useEffect</code> 会把这段代码放到屏幕更新渲染之后执行**。</p><p>让我们看看如何使用 Effect 与外部系统同步。考虑一个 <code>&lt;VideoPlayer&gt;</code> React 组件。通过传递布尔类型的 <code>isPlaying</code> prop 以控制是播放还是暂停：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ndhw8plqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ndhw8plqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">VideoPlayer</span> isPlaying=&#123;isPlaying&#125; /&gt;;<br></code></pre></td></tr></table></div></figure><p>自定义的 <code>VideoPlayer</code> 组件渲染了内置的 <code>video</code> 标签：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4sscfalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4sscfalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-comment">/*  TODO：使用 isPlaying 做一些事情  */</span> <br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>但是，浏览器的 <code>&lt;video&gt;</code> 标签没有 <code>isPlaying</code> 属性。控制它的唯一方式是在 DOM 元素上调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/play"><code>play()</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/pause"><code>pause()</code></a> 方法。因此，<strong>你需要将 <code>isPlaying</code> prop 的值与 <code>play()</code> 和 <code>pause()</code> 等函数的调用进行同步，该属性用于告知当前视频是否应该播放</strong>。</p><p>首先要获取 <code>&lt;video&gt;</code>  DOM 节点的 <a href="https://zh-hans.react.dev/learn/manipulating-the-dom-with-refs">对象引用</a>。</p><p>你可能会尝试在渲染期间调用 <code>play()</code> 或 <code>pause()</code>，但这种做法是错的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-m1qau5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-m1qau5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>    ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();  <span class="hljs-comment">/*  渲染期间不能调用 `play()`。   */</span> <br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>(); <span class="hljs-comment">/*  同样，调用 `pause()` 也不行。  */</span> <br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="language-xml">        &#123;isPlaying ? &#x27;暂停&#x27; : &#x27;播放&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoPlayer</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isPlaying</span>=<span class="hljs-string">&#123;isPlaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>报错：</p><figure class="highlight pgsql"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g5sez6lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g5sez6lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Runtime Error<br>App.js: Cannot <span class="hljs-keyword">read</span> properties <span class="hljs-keyword">of</span> <span class="hljs-keyword">null</span> (reading <span class="hljs-string">&#x27;pause&#x27;</span>) (<span class="hljs-number">9</span>:<span class="hljs-number">16</span>)<br><br>   <span class="hljs-number">6</span> |   <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>   <span class="hljs-number">7</span> |     <span class="hljs-keyword">ref</span>.<span class="hljs-keyword">current</span>.play();  // æ¸²ææé´ä¸è½è°ç¨ `play()`ã <br>   <span class="hljs-number">8</span> |   &#125; <span class="hljs-keyword">else</span> &#123;<br>&gt;  <span class="hljs-number">9</span> |     <span class="hljs-keyword">ref</span>.<span class="hljs-keyword">current</span>.pause(); // åæ ·ï¼è°ç¨ `pause()` ä¹ä¸è¡ã<br>                       ^<br>  <span class="hljs-number">10</span> |   &#125;<br>  <span class="hljs-number">11</span> | <br>  <span class="hljs-number">12</span> |   <span class="hljs-keyword">return</span> &lt;video <span class="hljs-keyword">ref</span>=&#123;<span class="hljs-keyword">ref</span>&#125; src=&#123;src&#125; <span class="hljs-keyword">loop</span> playsInline /&gt;;<br></code></pre></td></tr></table></div></figure><p>这段代码之所以不正确，是因为它试图在渲染期间对 DOM 节点进行操作。<mark>在 React 中，<a href="https://zh-hans.react.dev/learn/keeping-components-pure">JSX 的渲染必须是纯粹操作</a>，不应该包含任何像修改 DOM 的副作用。</mark></p><p>而且，当第一次调用 <code>VideoPlayer</code> 时，对应的 DOM 节点甚至还不存在！如果连 DOM 节点都没有，那么如何调用 <code>play()</code> 或 <code>pause()</code> 方法呢！在返回 JSX 之前，React 不知道要创建什么 DOM。</p><p>解决办法是 <strong>使用 <code>useEffect</code> 包裹副作用，把它分离到渲染逻辑的计算过程之外</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jyphfmlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jyphfmlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>把调用 DOM 方法的操作封装在 Effect 中，你可以让 React 先更新屏幕，确定相关 DOM 创建好了以后然后再运行 Effect。</p><p>当 <code>VideoPlayer</code> 组件渲染时（无论是否为首次渲染），都会发生以下事情。首先，React 会刷新屏幕，确保 <code>&lt;video&gt;</code> 元素已经正确地出现在 DOM 中；然后，React 将运行 Effect；最后，Effect 将根据 <code>isPlaying</code> 的值调用 <code>play()</code> 或 <code>pause()</code>。</p><p>试试按下几次播放和暂停操作，观察视频播放器的播放、暂停行为是如何与 <code>isPlaying</code> prop 同步的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-33ng6plqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-33ng6plqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="language-xml">        &#123;isPlaying ? &#x27;暂停&#x27; : &#x27;播放&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoPlayer</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isPlaying</span>=<span class="hljs-string">&#123;isPlaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Effect 会在  <strong>每次</strong> 渲染后执行，<strong>而以下代码会陷入死循环中</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g6gk6hlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g6gk6hlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>每次渲染结束都会执行 Effect；而更新 state 会触发重新渲染。但是新一轮渲染时又会再次执行 Effect，然后 Effect 再次更新 state……如此周而复始，从而陷入死循环。</p><p>Effect 通常应该使组件与 <strong>外部</strong> 系统保持同步。如果没有外部系统，你只想根据其他状态调整一些状态，那么 <a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect">你也许不需要 Effect</a>。</p><hr><p>第二步：指定 Effect 依赖：一般来说，Effect 会在 <strong>每次</strong> 渲染时执行。<strong>但更多时候，并不需要每次渲染的时候都执行 Effect</strong>。</p><ol><li>有时这会拖慢运行速度。因为与外部系统的同步操作总是有一定时耗，在非必要时可能希望跳过它。例如，没有人会希望每次用键盘打字时都重新连接聊天服务器。</li><li>有时这会导致程序逻辑错误。例如，组件的淡入动画只需要在第一轮渲染出现时播放一次，而不是每次触发新一轮渲染后都播放。</li></ol><p>将 <strong>依赖数组</strong> 传入 <code>useEffect</code> 的第二个参数，以告诉 React <strong>跳过不必要地重新运行 Effect</strong>。传入一个空数组 <code>[]</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pz5vbslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pz5vbslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// ...</span><br>&#125;, []);<br></code></pre></td></tr></table></div></figure><p>报错：<code>React Hook useEffect has a missing dependency: &#39;isPlaying&#39;. Either include it or remove the dependency array.</code></p><p>问题出现在 Effect 中使用了 <code>isPlaying</code> prop 以控制逻辑，但又没有直接告诉 Effect 需要依赖这个属性。为了解决这个问题，将 <code>isPlaying</code> 添加至依赖数组中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fb5zdwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fb5zdwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123; <span class="hljs-comment">/*  isPlaying 在此处使用……  */</span> <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    &#125;<br>&#125;, [isPlaying]); <span class="hljs-comment">// ……所以它必须在此处声明！</span><br></code></pre></td></tr></table></div></figure><p>现在所有的依赖都已经声明，所以没有错误了。<mark>指定 <code>[isPlaying]</code> 会告诉 React，如果 <code>isPlaying</code> 在上一次渲染时与当前相同，它应该跳过重新运行 Effect</mark>。通过这个改变，输入框的输入不会导致 Effect 重新运行，但是按下播放&#x2F;暂停按钮会重新运行 Effect。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wd2igdlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wd2igdlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Calling video.play()&#x27;</span>);<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Calling video.pause()&#x27;</span>);<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;, [isPlaying]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="language-xml">        &#123;isPlaying ? &#x27;Pause&#x27; : &#x27;Play&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoPlayer</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isPlaying</span>=<span class="hljs-string">&#123;isPlaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>依赖数组可以包含多个依赖项。当指定的所有依赖项在上一次渲染期间的值与当前值完全相同时，React 会跳过重新运行该 Effect。React 使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is</code></a> 比较依赖项的值。</p><p>请注意，<mark>不能随意选择依赖项</mark>。如果你指定的依赖项不能与 Effect 代码所期望的相匹配时，lint 将会报错，这将帮助你找到代码中的问题。如果你不希望某些代码重新运行，<a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#what-to-do-when-you-dont-want-to-re-synchronize">那么你应当 <strong>重新编辑 Effect 代码本身</strong>，使其不需要该依赖项</a>。</p><p><mark>没有依赖数组作为第二个参数，与依赖数组位空数组 <code>[]</code> 的行为是不一致的</mark>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-38q659lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-38q659lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/*  这里的代码会在每次渲染后执行  */</span> <br>&#125;);<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/*  这里的代码只会在组件挂载后执行  */</span> <br>&#125;, []);<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/*  这里的代码只会在每次渲染后，并且 a 或 b 的值与上次渲染不一致时执行  */</span><br>&#125;, [a, b]);<br></code></pre></td></tr></table></div></figure><p>为什么依赖数组中可以省略 ref? </p><p>下面的 Effect 同时使用了 <code>ref</code> 与 <code>isPlaying</code> prop，但是只有 <code>isPlaying</code> 被声明为了依赖项：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cjbf18lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cjbf18lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;, [isPlaying]);<br></code></pre></td></tr></table></div></figure><p>这是因为 <code>ref</code> 具有 <strong>稳定</strong> 的标识：React 保证 <a href="https://zh-hans.react.dev/reference/react/useRef#returns">每轮渲染中调用 <code>useRef</code> 所产生的引用对象时，获取到的对象引用总是相同的</a>，即获取到的对象引用永远不会改变，所以它不会导致重新运行 Effect。因此，依赖数组中是否包含它并不重要。当然也可以包括它，这样也可以：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-psc2khlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-psc2khlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;, [isPlaying, ref]);<br></code></pre></td></tr></table></div></figure><p><code>useState</code> 返回的 <a href="https://zh-hans.react.dev/reference/react/useState#setstate"><code>set</code> 函数</a> 也有稳定的标识符，所以也可以把它从依赖数组中忽略掉。如果在忽略某个依赖项时 linter 不会报错，那么这么做就是安全的。</p><p>但是，仅在 linter 可以“看到”对象稳定时，忽略稳定依赖项的规则才会起作用。例如，如果 <code>ref</code> 是从父组件传递的，则必须在依赖项数组中指定它。这样做是合适的，因为无法确定父组件是否始终是传递相同的 ref，或者可能是有条件地传递几个 ref 之一。因此，你的 Effect 将取决于传递的是哪个 ref。</p><hr><p>第三步：按需添加清理（cleanup）函数 </p><p>考虑一个不同的例子。你正在编写一个 <code>ChatRoom</code> 组件，该组件出现时需要连接到聊天服务器。现在为你提供了 <code>createConnection()</code> API，该 API 返回一个包含 <code>connect()</code> 与 <code>disconnection()</code> 方法的对象。考虑当组件展示给用户时，应该如何保持连接？</p><p>从编写 Effect 逻辑开始：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7cso13lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7cso13lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>  connection.<span class="hljs-title function_">connect</span>();<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>每次重新渲染后连接到聊天室会很慢，因此可以添加依赖数组：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d5ja5klqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d5ja5klqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>  connection.<span class="hljs-title function_">connect</span>();<br>&#125;, []);<br></code></pre></td></tr></table></div></figure><p>Effect 中的代码没有使用任何 props 或 state，此时指定依赖数组为空数组 <code>[]</code>。这告诉 React 仅在组件“挂载”时运行此代码，即首次出现在屏幕上这一阶段。</p><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-oayc3jlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-oayc3jlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 真实的实现会将其连接到服务器，此处代码只是示例</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ 连接中……&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ 连接断开。&#x27;</span>);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9rx0qylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9rx0qylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>    connection.<span class="hljs-title function_">connect</span>();<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到聊天室！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231114171125599.png" alt="image-20231114171125599" style="zoom:50%;" /><p>这里的 Effect 仅在组件挂载时执行，所以 <code>&quot;✅ 连接中……&quot;</code> 在控制台中只会打印一次。<strong>然而控制台实际打印 <code>&quot;✅ 连接中……&quot;</code> 了两次！为什么会这样</strong>？</p><p>想象 <code>ChatRoom</code> 组件是一个大规模的 App 中许多界面中的一部分。用户切换到含有 <code>ChatRoom</code> 组件的页面上时，该组件被挂载，并调用 <code>connection.connect()</code> 方法连接服务器。然后想象用户此时突然导航到另一个页面，比如切换到“设置”页面。这时，<code>ChatRoom</code> 组件就被卸载了。接下来，用户在“设置”页面忙完后，单击“返回”，回到上一个页面，并再次挂载 <code>ChatRoom</code>。这将建立第二次连接，但是，第一次时创建的连接从未被销毁！当用户在应用程序中不断切换界面再返回时，与服务器的连接会不断堆积。</p><p>如果不进行大量的手动测试，这样的错误很容易被遗漏。<mark>为了帮助你快速发现它们，在开发环境中，React 会在初始挂载组件后，立即再挂载一次</mark>。</p><p>观察到 <code>&quot;✅ 连接中……&quot;</code> 出现了两次，可以帮助找到问题所在：在代码中，组件被卸载时没有关闭连接。</p><p>为了解决这个问题，可以在 Effect 中返回一个 <strong>清理（cleanup）</strong> 函数。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t6ag9olqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t6ag9olqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></div></figure><p>每次重新执行 Effect 之前，React 都会调用清理函数；组件被卸载时，也会调用清理函数。让我们看看执行清理函数会做些什么：</p><img src="image-20231114171713151.png" alt="image-20231114171713151" style="zoom:50%;" /><ol><li><strong>在开发环境下，出现这样的结果才是符合预期的</strong>。重复挂载组件，可以确保在 React 中离开和返回页面时不会导致代码运行出现问题。上面的代码中规定了挂载组件时连接服务器、卸载组件时断连服务器。所以断开、连接再重新连接是符合预期的行为。当为 Effect 正确实现清理函数时，无论 Effect 执行一次，还是执行、清理、再执行，用户都不会感受到明显的差异。所以，在开发环境下，出现额外的连接、断连时，这是 React 正在调试你的代码。这是很正常的现象，不要试图消除它！</li><li><strong>在生产环境下，<code>&quot;✅ 连接中……&quot;</code> 只会被打印一次</strong>。也就是说仅在开发环境下才会重复挂载组件，以帮助你找到需要清理的 Effect。你可以选择关闭 <a href="https://zh-hans.react.dev/reference/react/StrictMode">严格模式</a> 来关闭开发环境下特有的行为，但我们建议保留它。这可以帮助发现许多上面这样的错误。</li></ol><p>如何处理在开发环境中 Effect 执行两次？ </p><ul><li>在开发环境中，React 有意重复挂载你的组件，以查找像上面示例中的错误。<strong>正确的态度是“如何修复 Effect 以便它在重复挂载后能正常工作”，而不是“如何只运行一次 Effect”</strong>。</li><li>通常的解决办法是实现清理函数。清理函数应该停止或撤销 Effect 正在执行的任何操作。简单来说，用户不应该感受到 Effect 只执行一次（如在生产环境中）和执行“挂载 → 清理 → 挂载”过程（如在开发环境中）之间的差异。</li></ul><p>常用的 Effect 应用模式：</p><ol><li><p><mark>控制非 React 组件</mark>：有时需要添加不是使用 React 编写的 UI 小部件。例如，假设你要向页面添加地图组件，并且它有一个 <code>setZoomLevel()</code> 方法，你希望调整缩放级别（zoom level）并与 React 代码中的 <code>zoomLevel</code> state 变量保持同步。Effect 看起来应该与下面类似：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f4ls8olqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f4ls8olqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> map = mapRef.<span class="hljs-property">current</span>;  map.<span class="hljs-title function_">setZoomLevel</span>(zoomLevel);<br>&#125;, [zoomLevel]);<br></code></pre></td></tr></table></div></figure><p>请注意，在这种情况下不需要清理。在开发环境中，React 会调用 Effect 两次，但这两次挂载时依赖项 <code>zoomLevel</code> 都是相同的，所以会跳过执行第二次挂载时的 Effect。开发环境中它可能会稍微慢一些，但这问题不大，因为它在生产中不会进行不必要的重复挂载。</p><p>某些 API 可能不允许连续调用两次。例如，内置的 <code>showModal</code>方法在连续调用两次时会抛出异常，此时实现清理函数并使其关闭对话框：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sauj5xlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sauj5xlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> dialog = dialogRef.<span class="hljs-property">current</span>;<br>  dialog.<span class="hljs-title function_">showModal</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> dialog.<span class="hljs-title function_">close</span>();<br>&#125;, []);<br></code></pre></td></tr></table></div></figure><p>在开发环境中，Effect 将调用 <code>showModal()</code>，然后立即调用 <code>close()</code>，然后再次调用 <code>showModal()</code>。这与调用只一次 <code>showModal()</code> 的效果相同。也正如在生产环境中看到的那样。</p></li><li><p><mark>订阅事件</mark>：如果 Effect 订阅了某些事件，清理函数应该退订这些事件：</p></li></ol>   <figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ov623ulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ov623ulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleScroll</span>(<span class="hljs-params">e</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollX</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span>);<br><br>  &#125; <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, handleScroll);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, handleScroll);<br>&#125;, []);<br></code></pre></td></tr></table></div></figure><p>   在开发环境中，Effect 会调用 <code>addEventListener()</code>，然后立即调用 <code>removeEventListener()</code>，然后再调用相同的 <code>addEventListener()</code>，这与只订阅一次事件的 Effect 等效；这也与用户在生产环境中只调用一次 <code>addEventListener()</code> 具有相同的感知效果。</p><ol start="3"><li><p><mark>触发动画</mark>：如果 Effect 对某些内容加入了动画，清理函数应将动画重置：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1oelzilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1oelzilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> node = ref.<span class="hljs-property">current</span>;<br>  node.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> = <span class="hljs-number">1</span>; <span class="hljs-comment">/*  触发动画  */</span> <br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;    node.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">/*  重置为初始值  */</span> <br>  &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></div></figure><p>在开发环境中，透明度由 <code>1</code> 变为 <code>0</code>，再变为 <code>1</code>。这与在生产环境中，直接将其设置为 <code>1</code> 具有相同的感知效果，如果你使用支持过渡的第三方动画库，你的清理函数应将时间轴重置为其初始状态。</p></li><li><p><mark>获取数据</mark>：如果 Effect 将会获取数据，清理函数应该要么 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController">中止该数据获取操作</a>，要么忽略其结果：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cd4g18lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cd4g18lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> ignore = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">startFetching</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchTodos</span>(userId);<br>    <span class="hljs-keyword">if</span> (!ignore) &#123;<br>      <span class="hljs-title function_">setTodos</span>(json);<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">startFetching</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    ignore = <span class="hljs-literal">true</span>;<br>  &#125;;<br>&#125;, [userId]);<br></code></pre></td></tr></table></div></figure><p>我们无法撤消已经发生的网络请求，但是清理函数应当确保获取数据的过程以及获取到的结果不会继续影响程序运行。如果 <code>userId</code> 从 <code>&#39;Alice&#39;</code> 变为 <code>&#39;Bob&#39;</code>，那么请确保 <code>&#39;Alice&#39;</code> 响应数据被忽略，即使它在 <code>&#39;Bob&#39;</code> 之后到达。</p><p><strong>在开发环境中，浏览器调试工具的“网络”选项卡中会出现两个 fetch 请求</strong>。这是正常的。使用上述方法，第一个 Effect 将立即被清理，而 <code>ignore</code> 将被设置为 <code>true</code>。因此，即使有额外的请求，由于有 <code>if (!ignore)</code> 判断检查，也不会影响程序状态。</p><p><strong>在生产环境中，只会显示发送了一条获取请求</strong>。如果开发环境中，第二次请求给你造成了困扰，最好的方法是使用一种可以删除重复请求、并缓存请求响应的解决方案：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lg51m2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lg51m2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> todos = <span class="hljs-title function_">useSomeDataLibrary</span>(<span class="hljs-string">`/api/user/<span class="hljs-subst">$&#123;userId&#125;</span>/todos`</span>);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>这不仅可以提高开发体验，还可以让你的应用程序速度更快。例如，用户按下按钮时，如果数据已经被缓存了，那么就不必再次等待加载。你可以自己构建这样的缓存，也可以使用很多在 Effect 中手动加载数据的替代方法。</p><ul><li><p>Effect 中有哪些好的数据获取替代方案？</p><p>在 Effect 中调用 <code>fetch</code> 请求数据 <a href="https://www.robinwieruch.de/react-hooks-fetch-data/">是一种非常受欢迎的方式</a>，特别是在客户端应用中。然而，它非常依赖手动操作，有很多的缺点：</p><ul><li><strong>Effect 不能在服务端执行</strong>。这意味着服务器最初传递的 HTML 不会包含任何数据。客户端的浏览器必须下载所有 JavaScript 脚本来渲染应用程序，然后才能加载数据——这并不搞笑。</li><li><strong>直接在 Effect 中获取数据容易产生网络瀑布（network waterfall）</strong>。首先渲染了父组件，它会获取一些数据并进行渲染；然后渲染子组件，接着子组件开始获取它们的数据。如果网络速度不够快，这种方式比同时获取所有数据要慢得多。</li><li><strong>直接在 Effect 中获取数据通常意味着无法预加载或缓存数据</strong>。例如，在组件卸载后然后再次挂载，那么它必须再次获取数据。</li><li><strong>这不是很符合人机交互原则</strong>。如果你不想出现像 <a href="https://maxrozen.com/race-conditions-fetching-data-react-with-useeffect">条件竞争（race condition）</a> 之类的问题，那么你需要编写更多的样板代码。</li></ul><p>以上所列出来的缺点并不是 React 特有的。在任何框架或者库上的组件挂载过程中获取数据，都会遇到这些问题。与路由一样，要做好数据获取并非易事，因此我们推荐以下方法：</p><ul><li><strong>如果你正在使用 <a href="https://zh-hans.react.dev/learn/start-a-new-react-project#production-grade-react-frameworks">框架</a> ，使用其内置的数据获取机制</strong>。现代 React 框架集成了高效的数据获取机制，不会出现上述问题。</li><li><strong>否则，请考虑使用或构建客户端缓存</strong>。目前受欢迎的开源解决方案是 <a href="https://tanstack.com/query/latest">React Query</a>、<a href="https://swr.vercel.app/">useSWR</a> 和 <a href="https://beta.reactrouter.com/en/main/start/overview">React Router v6.4+</a>。你也可以构建自己的解决方案，在这种情况下，你可以在幕后使用 Effect，但是请注意添加用于删除重复请求、缓存响应和避免网络瀑布（通过预加载数据或将数据需求提升到路由）的逻辑。</li></ul><p>如果这些方法都不适合你，你可以继续直接在 Effect 中获取数据。</p></li></ul></li><li><p><mark>发送分析报告</mark>：考虑在访问页面时发送日志分析：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-e5qetrlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-e5qetrlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">logVisit</span>(url); <span class="hljs-comment">/*  发送 POST 请求  */</span><br>&#125;, [url]);<br></code></pre></td></tr></table></div></figure><p>在开发环境中，<code>logVisit</code> 会为每个 URL 发送两次请求，所以你可能会想尝试解决这个问题。<strong>不过我们建议不必修改此处代码</strong>，与前面的示例一样，从用户的角度来看，运行一次和运行两次之间不会 <strong>感知</strong> 到行为差异。从实际的角度来看，<code>logVisit</code> 不应该在开发环境中做任何影响生产事情。由于每次保存代码文件时都会重新挂载组件，因此在开发环境中会额外记录访问次数。</p><p><strong>在生产环境中，不会产生有重复的访问日志</strong>。</p><p>为了调试发送的分析事件，可以将应用部署到一个运行在生产模式下的暂存环境，或者暂时取消 <a href="https://zh-hans.react.dev/reference/react/StrictMode">严格模式</a> 及其仅在开发环境中重新加载检查；还可以从路由变更事件处理程序中发送分析数据，而不是从 Effect 中发送。为了更精确的分析，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">Intersection Observer</a> 来跟踪哪些组件位于视口中以及它们保持可见的时间。</p></li><li><p><mark>初始化应用时不需要使用 Effect 的情形</mark>：某些逻辑应该只在应用程序启动时运行一次。比如，验证登陆状态和加载本地程序数据。你可以将其放在组件之外：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p2bh07lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p2bh07lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123; <span class="hljs-comment">/*  检查是否在浏览器中运行  */</span> <br>  <span class="hljs-title function_">checkAuthToken</span>();  <span class="hljs-title function_">loadDataFromLocalStorage</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这保证了这种逻辑在浏览器加载页面后只运行一次。</p></li><li><p><mark>不要在 Effect 中执行购买商品一类的操作</mark>：有时，即使编写了一个清理函数，也不能避免执行两次 Effect。例如，Effect 包含会发送 POST 请求以执行购买操作：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-082bk0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-082bk0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/*  🔴 错误：此处的 Effect 会在开发环境中执行两次，这在代码中是有问题的。  */</span> <br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/buy&#x27;</span>, &#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span> &#125;);<br>&#125;, []);<br></code></pre></td></tr></table></div></figure><p>一方面，开发环境下，Effect 会执行两次，这意味着购买操作执行了两次，但是这并非是预期的结果，所以不应该把这个业务逻辑放在 Effect 中。另一方面，如果用户转到另一个页面，然后按“后退”按钮回到了这个界面，该怎么办？Effect 会随着组件再次挂载而再次执行。所以，当用户重新访问某个页面时，不应当执行购买操作；当只有用户点击“购买”按钮时，才执行购买操作。</p><p>因此，“购买”的操作不应由组件的挂载、渲染引起的；它是由特定的交互作用引起的，它应该只在用户按下按钮时运行。因此，<strong>它不应该写在 Effect 中，应当把 <code>/api/buy</code> 请求操作移动到购买按钮事件处理程序中</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a9mywmlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a9mywmlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/*  ✅ 购买商品应当在事件中执行，因为这是由特定的操作引起的。  */</span> <br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/buy&#x27;</span>, &#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span> &#125;);<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>这个例子说明如果重新挂载破坏了应用程序的逻辑，则通常含有未被发现的错误</strong>。从用户的角度来看，访问一个页面不应该与访问它、点击链接然后按下返回键再次查看页面有什么不同。React 通过在开发环境中重复挂载组件以验证组件是否遵守此原则。</p></li></ol><p>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout"><code>setTimeout</code></a> 来安排控制台日志，在 Effect 运行后三秒钟显示输入文本。清理函数会取消挂起的超时。从按下“挂载组件”开始：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8yrcohlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8yrcohlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Playground</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">onTimeout</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;⏰ &#x27;</span> + text);<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;🔵 安排 &quot;&#x27;</span> + text + <span class="hljs-string">&#x27;&quot; 日志&#x27;</span>);<br>    <span class="hljs-keyword">const</span> timeoutId = <span class="hljs-built_in">setTimeout</span>(onTimeout, <span class="hljs-number">3000</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;🟡 取消 &quot;&#x27;</span> + text + <span class="hljs-string">&#x27;&quot; 日志&#x27;</span>);<br>      <span class="hljs-built_in">clearTimeout</span>(timeoutId);<br>    &#125;;<br>  &#125;, [text]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        日志内容：&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setText(e.target.value)&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [show, setShow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(!show)&#125;&gt;</span><br><span class="language-xml">        &#123;show ? &#x27;卸载&#x27; : &#x27;挂载&#x27;&#125; 组件</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>&#125;</span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Playground</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在最开始时可以看到三个日志输出：<code>安排 &quot;a&quot; 日志</code>，<code>取消 &quot;a&quot; 日志</code>，还有一个 <code>安排 &quot;a&quot; 日志</code>。三秒后，还会有一条日志显示：<code>a</code>。正如之前所说，额外的安排&#x2F;取消动作产生的原因是因为 React 在开发环境中，会重新挂载组件一次，以验证你是否正确地实现了清理函数。</p><p>现在编辑输入框，输入 <code>abc</code>。如果输入速度足够快，你会看到 <code>安排 &quot;ab&quot; 日志</code>，紧接着的是 <code>取消 &quot;ab&quot; 日志</code> 和 <code>安排 &quot;abc&quot; 日志</code>。<strong>React 总是在执行下一轮渲染的 Effect 之前清理上一轮渲染的 Effect</strong>。这就是为什么即使你快速输入，最多也只有一个安排操作。</p><p>在输入框中输入一些内容，然后立即按下“卸载组件”按钮。注意卸载时如何清理最后一轮渲染的 Effect。在这里，它在触发卸载之前，清除了最后一次安排操作。</p><p>最后，在上面的代码中注释掉清理函数，这样安排操作就不会被取消。尝试快速输入 <code>abcde</code>。你预期三秒钟内会发生什么？计时器安排内的 <code>console.log(text)</code> 会打印 <strong>最新</strong> 的 <code>text</code> 并产生五个 <code>abcde</code> 日志吗？验证你的直觉吧！</p><p>三秒后，你应该看到一系列日志：<code>a</code>、<code>ab</code>、<code>abc</code>、<code>abcd</code> 与 <code>abcde</code>，而不是五个 <code>abcde</code>。<strong>每个 Effect 都会“捕获”其对应渲染的 <code>text</code> 值</strong>。<code>text</code> state 发生变化并不重要：来自 <code>text = &#39;ab&#39;</code> 的渲染的 Effect 始终会得到 <code>&#39;ab&#39;</code>。换句话说，每个渲染的 Effect 都是相互隔离的。如果你对这是如何工作的感到好奇，你可以阅读有关 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">闭包</a> 的内容。</p><hr><p>挂载后聚焦于表单字段：表单中渲染了一个 <code>&lt;MyInput /&gt;</code> 组件。</p><p>使用输入框的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/focus"><code>focus()</code></a> 方法，以在 <code>MyInput</code> 出现在屏幕上时自动聚焦。如果你熟悉 <code>autoFocus</code> 属性，请假装它不存在：我们正在从头开始重新实现相同的功能。</p><p>解答：<mark>在渲染期间调用 <code>ref.current.focus()</code> 本身是不正确的。因为这会产生“副作用”。副作用要么应该放在事件处理程序里面，要么在 <code>useEffect</code> 中</mark>。在这种情况下，副作用是组件渲染引起的，而不是任何特定的交互引起的，因此应该将它放在 Effect 中。</p><p>为了修复这个错误，可以对 <code>ref.current.focus()</code> 的调用包裹在 Effect 中。然后确保这个 Effect 只在组件挂载时执行而不是在每一轮渲染时都执行，可以为 Effect 的声明加一个空的依赖数组 <code>[]</code>。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l4nrurlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l4nrurlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyInput</span>(<span class="hljs-params">&#123; value, onChange &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;onChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="form.gif" alt="form" style="zoom:50%;" /><hr><p><mark>有条件地聚焦于表单</mark>：下面的表单渲染两个 <code>&lt;MyInput /&gt;</code> 组件。</p><p>按下“展示表单”，同时注意自动聚焦于第二个输入框，这是因为两个 <code>&lt;MyInput /&gt;</code> 组件都在试图把焦点往自身上转移。<mark>当你连续为两个输入框调用 <code>focus()</code> 时，总是聚焦于最后面的输入框</mark>。</p><p>假设聚焦于第一个输入框，那么，第一个 <code>MyInput</code> 组件现在接收到 <code>shouldFocus</code> 属性，并且应当被设置为 <code>true</code>。更改下程序逻辑，规定仅当 <code>MyInput</code> 接收到的 <code>shouldFocus</code> 属性为 <code>true</code> 时才调用 <code>focus()</code> 。</p><p>解答：向 Effect 中加入条件逻辑。由于 Effect 使用了 <code>shouldFocus</code>，你需要为 Effect 指定 <code>shouldFocus</code> 这个依赖项。这也意味着如果输入框的 <code>shouldFocus</code> 由 <code>false</code> 变为 <code>true</code> 时，它才会在下次渲染时获得焦点。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9trj3clqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9trj3clqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyInput</span>(<span class="hljs-params">&#123; shouldFocus, value, onChange &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (shouldFocus) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>    &#125;<br>  &#125;, [shouldFocus]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;onChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="form2.gif" alt="form2" style="zoom:50%;" /><hr><p><mark>修复计时器触发两次的问题</mark>：下面的 <code>Counter</code> 组件显示一个计数器，应该每秒递增一次。在组件挂载时，它调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setInterval"><code>setInterval</code></a>。这会导致 <code>onTick</code> 每秒运行一次。<code>onTick</code> 函数会递增计数器。</p><p>然而，计数器不是每秒递增一次，而是两次。这是为什么呢？找出错误的原因并修复它。</p><p>解答：在 <a href="https://zh-hans.react.dev/reference/react/StrictMode">严格模式</a> 下，React 在开发模式中，每个组件都会重复挂载一次。这也就导致计数器组件被挂载了两次。所以，计时器也被设立了两次，这就是为什么计数器每秒递增两次的原因。</p><p>然而，这并不是 React 本身的错：而是 Effect 代码中本身就存在问题。React 只不过把这个问题放大了。真正的错误原因是这样的 Effect 启动后，但没有提供清理函数，所以上一次的 Effect 残留就没有被除去。</p><p>要修复这个问题，保存 <code>setInterval</code> 返回的 interval ID，并使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/clearInterval"><code>clearInterval</code></a> 实现一个清理函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v6pnpnlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v6pnpnlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">onTick</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> c + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> intervalId = <span class="hljs-built_in">setInterval</span>(onTick, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearInterval</span>(intervalId);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="count.gif" alt="count" style="zoom:50%;" /><p>在开发环境中，React 仍然会重复挂载一次组件，通过放大问题，以确保已经正确地实现了清理函数。这样，调用一次 <code>setInterval</code> 后就紧接着调用 <code>clearInterval</code>，然后再调用 <code>setInterval</code>。在生产环境中与开发环境不同，React 只挂载一次组件，即只调用一次 <code>setInterval</code>。两种情况下用户感知的效果是相同的：计数器每秒递增一次。</p><hr><p>修复在 Effect 中获取数据的问题：下面这个组件显示所选人物的传记。它在挂载时和每当 <code>person</code> 改变时通过调用一个异步函数 <code>fetchBio(person)</code> 来加载传记。该异步函数返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a>，最终解析为一个字符串。当获取完成时，它调用 <code>setBio</code> 以将该字符串显示在选择框下方。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-16tb3flqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-16tb3flqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; fetchBio &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./api.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Alice&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [bio, setBio] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setBio</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-title function_">fetchBio</span>(person).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">setBio</span>(result);<br>    &#125;);<br>  &#125;, [person]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;person&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setPerson(e.target.value);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Alice&quot;</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bob&quot;</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Taylor&quot;</span>&gt;</span>Taylor<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>&#123;bio ?? &#x27;加载中……&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="bio.gif" alt="bio" style="zoom:50%;" /><p>这段代码中有一个错误。试试首先选择 <code>Alice</code>，然后选择 <code>Bob</code>，然后紧接着选择 <code>Taylor</code>。如果操作得足够快，会注意到这个错误：Taylor 被选中了，但下面的一段却说：“这是Bob的传记。”</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">如果 Effect 需要异步获取某些数据，它通常需要清理函数。</p><p>解答：触发问题时，程序的指令序列是这样的：</p><ul><li>选中 <code>&#39;Bob&#39;</code> 触发 <code>fetchBio(&#39;Bob&#39;)</code></li><li>选中 <code>&#39;Taylor&#39;</code> 触发 <code>fetchBio(&#39;Taylor&#39;)</code></li><li><strong>在 <code>&#39;Bob&#39;</code> 的数据完成加载之前，就已经完成了对 <code>&#39;Taylor&#39;</code> 的数据的加载</strong></li><li>加载 <code>&#39;Taylor&#39;</code> 数据的 Effect 调用了 <code>setBio(&#39;这是Taylor的传记&#39;)</code></li><li>加载完成 <code>&#39;Bob&#39;</code> 的数据</li><li>加载 <code>&#39;Bob&#39;</code> 数据的 Effect 调用了 <code>setBio(&#39;这是Bob的传记&#39;)</code></li></ul><p>这就是为什么即使 Taylor 被选中了，但显示的仍然是 Bob 的数据。这种问题被称之为 <a href="https://en.wikipedia.org/wiki/Race_condition">条件竞争</a>，因为两个异步操作都在彼此竞争，谁先谁后是不可预期的。</p><p>为了修复这种问题，在 Effect 中添加清理函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8ohwd8lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8ohwd8lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> ignore = <span class="hljs-literal">false</span>;<br>    <span class="hljs-title function_">setBio</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-title function_">fetchBio</span>(person).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ignore) &#123;<br>            <span class="hljs-title function_">setBio</span>(result);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        ignore = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;, [person]);<br></code></pre></td></tr></table></div></figure><p>其实，每个 Effect 都可以在里面设置一个 <code>ignore</code> 标记变量。在最开始，<code>ignore</code> 被设置为 <code>false</code>。然而，当 Effect 执行清理函数后（就像你选中了列表中不同的人时），<code>ignore</code> 就会被设置为 <code>true</code>。所以此时请求完成的顺序并不重要。只有最后选中的人在执行它的 Effect 时，<code>ignore</code> 会被设为 <code>false</code>，所以它会调用 <code>setBio(result)</code>。而之前的 Effect 都被清理掉了。所以检查 <code>if (!ignore)</code> 会阻止调用 <code>setBio</code>：</p><ul><li>选中 <code>&#39;Bob&#39;</code> 触发 <code>fetchBio(&#39;Bob&#39;)</code></li><li>选中 <code>&#39;Taylor&#39;</code> 触发 <code>fetchBio(&#39;Taylor&#39;)</code>，<strong>然后清理之前加载（Bob）数据时的 Effect</strong></li><li>在加载完 <code>&#39;Bob&#39;</code> 的数据 <strong>之前</strong>，就已经完成加载 <code>&#39;Taylor&#39;</code> 的数据</li><li>渲染 <code>&#39;Taylor&#39;</code> 时的 Effect 调用 <code>setBio(&#39;这是Taylor的传记&#39;)</code></li><li>加载完成 <code>&#39;Bob&#39;</code> 的数据</li><li>渲染 <code>&#39;Bob&#39;</code> 时的 Effect 不会做任何事情，因为 <code>ignore</code> 已经被设为了 <code>true</code>。</li></ul><p>除了忽略过时 API 调用的结果外，你还可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController"><code>AbortController</code></a> 来取消不再需要的请求。然而，仅靠这个还不足以防止竞态-条件。更多的异步步骤可能会在获取之后链接起来，因此使用显式标记，如 <code>ignore</code> 变量，是修复这类问题最可靠的方法。</p><h2 id="4-你可能不需要-Effect"><a href="#4-你可能不需要-Effect" class="headerlink" title="4.你可能不需要 Effect"></a>4.你可能不需要 Effect</h2><p>Effect 是 React 范式中的一个逃脱方案。它们让你可以 “逃出” React 并使组件和一些外部系统同步，比如非 React 组件、网络和浏览器 DOM。如果没有涉及到外部系统（例如，你想根据 props 或 state 的变化来更新一个组件的 state），你就不应该使用 Effect。移除不必要的 Effect 可以让你的代码更容易理解，运行得更快，并且更少出错。</p><p>有两种不必使用 Effect 的常见情况：</p><ul><li><strong>你不必使用 Effect 来转换渲染所需的数据</strong>。例如，你想在展示一个列表前先做筛选。你的直觉可能是写一个当列表变化时更新 state 变量的 Effect。然而，这是低效的。当你更新这个 state 时，React 首先会调用你的组件函数来计算应该显示在屏幕上的内容。然后 React 会把这些变化“<a href="https://zh-hans.react.dev/learn/render-and-commit">提交</a>”到 DOM 中来更新屏幕。然后 React 会执行你的 Effect。如果你的 Effect 也立即更新了这个 state，就会重新执行整个流程。为了避免不必要的渲染流程，应在你的组件顶层转换数据。这些代码会在你的 props 或 state 变化时自动重新执行。</li><li><strong>你不必使用 Effect 来处理用户事件</strong>。例如，你想在用户购买一个产品时发送一个 <code>/api/buy</code> 的 POST 请求并展示一个提示。在这个购买按钮的点击事件处理函数中，你确切地知道会发生什么。但是当一个 Effect 运行时，你却不知道用户做了什么（例如，点击了哪个按钮）。这就是为什么你通常应该在相应的事件处理函数中处理用户事件。</li></ul><p>你 <strong>的确</strong> 可以使用 Effect 来和外部系统 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events">同步</a> 。例如，你可以写一个 Effect 来保持一个 jQuery 的组件和 React state 之间的同步。你也可以使用 Effect 来获取数据：例如，你可以同步当前的查询搜索和查询结果。请记住，比起直接在你的组件中写 Effect，现代 <a href="https://zh-hans.react.dev/learn/start-a-new-react-project#production-grade-react-frameworks">框架</a> 提供了更加高效的，内置的数据获取机制。</p><hr><p><mark>根据 props 或 state 来更新 state</mark>：假设你有一个包含了两个 state 变量的组件：<code>firstName</code> 和 <code>lastName</code>。你想通过把它们联结起来计算出 <code>fullName</code>。此外，每当 <code>firstName</code> 和 <code>lastName</code> 变化时，你希望 <code>fullName</code> 都能更新。你的第一直觉可能是添加一个 state 变量：<code>fullName</code>，并在一个 Effect 中更新它：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fvnjgflqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fvnjgflqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [firstName, setFirstName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Taylor&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [lastName, setLastName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Swift&#x27;</span>);<br>  <span class="hljs-comment">/*  🔴 避免：多余的 state 和不必要的 Effect  */</span> <br>  <span class="hljs-keyword">const</span> [fullName, setFullName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setFullName</span>(firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName);<br>  &#125;, [firstName, lastName]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>大可不必这么复杂。而且这样效率也不高：它先是用 <code>fullName</code> 的旧值执行了整个渲染流程，然后立即使用更新后的值又重新渲染了一遍。让我们移除 state 变量和 Effect：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d9i6lilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d9i6lilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [firstName, setFirstName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Taylor&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [lastName, setLastName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Swift&#x27;</span>);<br>  <span class="hljs-comment">/*  ✅ 非常好：在渲染期间进行计算  */</span> <br>  <span class="hljs-keyword">const</span> fullName = firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>如果一个值可以基于现有的 props 或 state 计算得出，<a href="https://zh-hans.react.dev/learn/choosing-the-state-structure#avoid-redundant-state">不要把它作为一个 state</a>，而是在渲染期间直接计算这个值</strong>。这将使你的代码更快（避免了多余的 “级联” 更新）、更简洁（移除了一些代码）以及更少出错（避免了一些因为不同的 state 变量之间没有正确同步而导致的问题）。如果这个观点对你来说很新奇，<a href="https://zh-hans.react.dev/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state">React 哲学</a> 中解释了什么值应该作为 state。</p><hr><p><mark>缓存昂贵的计算</mark>：这个组件使用它接收到的 props 中的 <code>filter</code> 对另一个 prop <code>todos</code> 进行筛选，计算得出 <code>visibleTodos</code>。你的直觉可能是把结果存到一个 state 中，并在 Effect 中更新它：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hdxw81lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hdxw81lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params">&#123; todos, filter &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [newTodo, setNewTodo] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">/*  🔴 避免：多余的 state 和不必要的 Effect  */</span><br>  <span class="hljs-keyword">const</span> [visibleTodos, setVisibleTodos] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setVisibleTodos</span>(<span class="hljs-title function_">getFilteredTodos</span>(todos, filter));<br>  &#125;, [todos, filter]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>就像之前的例子一样，这既没有必要，也很低效。首先，移除 state 和 Effect：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ob22sxlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ob22sxlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params">&#123; todos, filter &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [newTodo, setNewTodo] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">/*  ✅ 如果 getFilteredTodos() 的耗时不长，这样写就可以了。  */</span> <br>  <span class="hljs-keyword">const</span> visibleTodos = <span class="hljs-title function_">getFilteredTodos</span>(todos, filter);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>一般来说，这段代码没有问题！但是，<code>getFilteredTodos()</code> 的耗时可能会很长，或者你有很多 <code>todos</code>。这些情况下，当 <code>newTodo</code> 这样不相关的 state 变量变化时，你并不想重新执行 <code>getFilteredTodos()</code>。</p><p>你可以使用 <a href="https://zh-hans.react.dev/reference/react/useMemo"><code>useMemo</code></a> Hook 缓存（或者说 <a href="https://en.wikipedia.org/wiki/Memoization">记忆（memoize）</a>）一个昂贵的计算。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-74n8ixlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-74n8ixlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useMemo, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params">&#123; todos, filter &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [newTodo, setNewTodo] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> visibleTodos = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/*  ✅ 除非 todos 或 filter 生变化，否则不会重新执行  */</span> <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getFilteredTodos</span>(todos, filter);<br>  &#125;, [todos, filter]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>或者写成一行：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ennfvilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ennfvilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useMemo, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params">&#123; todos, filter &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [newTodo, setNewTodo] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">/*  ✅ 除非 todos 或 filter 发生变化，否则不会重新执行 getFilteredTodos()  */</span> <br>  <span class="hljs-keyword">const</span> visibleTodos = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getFilteredTodos</span>(todos, filter), [todos, filter]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>这会告诉 React，除非 <code>todos</code> 或 <code>filter</code> 发生变化，否则不要重新执行传入的函数</strong>。React 会在初次渲染的时候记住 <code>getFilteredTodos()</code> 的返回值。在下一次渲染中，它会检查 <code>todos</code> 或 <code>filter</code> 是否发生了变化。如果它们跟上次渲染时一样，<code>useMemo</code> 会直接返回它最后保存的结果。如果不一样，React 将再次调用传入的函数（并保存它的结果）。</p><p>你传入 <a href="https://zh-hans.react.dev/reference/react/useMemo"><code>useMemo</code></a> 的函数会在渲染期间执行，所以它仅适用于 <a href="https://zh-hans.react.dev/learn/keeping-components-pure">纯函数</a> 场景。</p><hr><p><mark>当 props 变化时重置所有 state </mark>：<code>ProfilePage</code> 组件接收一个 prop：<code>userId</code>。页面上有一个评论输入框，你用了一个 state：<code>comment</code> 来保存它的值。有一天，你发现了一个问题：当你从一个人的个人资料导航到另一个时，<code>comment</code> 没有被重置。这导致很容易不小心把评论发送到不正确的个人资料。为了解决这个问题，你想在 <code>userId</code> 变化时，清除 <code>comment</code> 变量：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fokx2plqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fokx2plqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ProfilePage</span>(<span class="hljs-params">&#123; userId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [comment, setComment] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">/*  🔴 避免：当 prop 变化时，在 Effect 中重置 state  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setComment</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;, [userId]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>但这是低效的，因为 <code>ProfilePage</code> 和它的子组件首先会用旧值渲染，然后再用新值重新渲染。并且这样做也很复杂，因为你需要在 <code>ProfilePage</code> 里面 <strong>所有</strong> 具有 state 的组件中都写这样的代码。例如，如果评论区的 UI 是嵌套的，你可能也想清除嵌套的 comment state。</p><p>取而代之的是，你可以通过为每个用户的个人资料组件提供一个明确的键来告诉 React 它们原则上是 <strong>不同</strong> 的个人资料组件。将你的组件拆分为两个组件，并从外部的组件传递一个 <code>key</code> 属性给内部的组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2ke96ylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2ke96ylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ProfilePage</span>(<span class="hljs-params">&#123; userId &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Profile</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">userId</span>=<span class="hljs-string">&#123;userId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;userId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params">&#123; userId &#125;</span>) &#123;<br>  <span class="hljs-comment">// ✅ 当 key 变化时，该组件内的 comment 或其他 state 会自动被重置</span><br>  <span class="hljs-keyword">const</span> [comment, setComment] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>通常，当在相同的位置渲染相同的组件时，React 会保留状态。<strong>通过将 <code>userId</code> 作为 <code>key</code> 传递给 <code>Profile</code> 组件，使  React 将具有不同 <code>userId</code> 的两个 <code>Profile</code> 组件视为两个不应共享任何状态的不同组件</strong>。每当 key（这里是 <code>userId</code>）变化时，React 将重新创建 DOM，并 <a href="https://zh-hans.react.dev/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key">重置</a> <code>Profile</code> 组件和它的所有子组件的 state。现在，当在不同的个人资料之间导航时，<code>comment</code> 区域将自动被清空。</p><p>请注意，在这个例子中，只有外部的 <code>ProfilePage</code> 组件被导出并在项目中对其他文件可见。渲染 <code>ProfilePage</code> 的那些组件不用传递 <code>key</code> 给它：它们只需把 <code>userId</code> 作为常规 prop 传入即可。而 <code>ProfilePage</code> 将其作为 <code>key</code> 传递给内部的 <code>Profile</code> 组件是它的实现细节而已。</p><hr><p><mark>当 prop 变化时调整部分 state </mark>：有时候，当 prop 变化时，你可能只想重置或调整部分 state ，而不是所有 state。</p><p><code>List</code> 组件接收一个 <code>items</code> 列表作为 prop，然后用 state 变量 <code>selection</code> 来保持已选中的项。当 <code>items</code> 接收到一个不同的数组时，你想将 <code>selection</code> 重置为 <code>null</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-iblydblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-iblydblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isReverse, setIsReverse] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [selection, setSelection] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-comment">/*  🔴 避免：当 prop 变化时，在 Effect 中调整 state  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setSelection</span>(<span class="hljs-literal">null</span>);<br>  &#125;, [items]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这不太理想。每当 <code>items</code> 变化时，<code>List</code> 及其子组件会先使用旧的 <code>selection</code> 值渲染。然后 React 会更新 DOM 并执行 Effect。最后，调用 <code>setSelection(null)</code> 将导致 <code>List</code> 及其子组件重新渲染，重新启动整个流程。</p><p>让我们从删除 Effect 开始。取而代之的是在渲染期间直接调整 state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-818pxblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-818pxblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isReverse, setIsReverse] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [selection, setSelection] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-comment">/* 好一些：在渲染期间调整 state   */</span> <br>  <span class="hljs-keyword">const</span> [prevItems, setPrevItems] = <span class="hljs-title function_">useState</span>(items);<br>  <span class="hljs-keyword">if</span> (items !== prevItems) &#123;<br>    <span class="hljs-title function_">setPrevItems</span>(items);<br>    <span class="hljs-title function_">setSelection</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>像这样 <a href="https://zh-hans.react.dev/reference/react/useState#storing-information-from-previous-renders">存储前序渲染的信息</a> 可能很难理解，但它比在 Effect 中更新这个 state 要好。上面的例子中，在渲染过程中直接调用了 <code>setSelection</code>。当它执行到 <code>return</code> 语句退出后，React 将 <strong>立即</strong> 重新渲染 <code>List</code>。此时 React 还没有渲染 <code>List</code> 的子组件或更新 DOM，这使得 <code>List</code> 的子组件可以跳过渲染旧的 <code>selection</code> 值。</p><p>在渲染期间更新组件时，React 会丢弃已经返回的 JSX 并立即尝试重新渲染。为了避免非常缓慢的级联重试，React 只允许在渲染期间更新 <strong>同一</strong> 组件的状态。如果你在渲染期间更新另一个组件的状态，你会看到一条报错信息。条件判断 <code>items !== prevItems</code> 是必要的，它可以避免无限循环。你可以像这样调整 state，但任何其他副作用（比如变化 DOM 或设置的延时）应该留在事件处理函数或 Effect 中，以 <a href="https://zh-hans.react.dev/learn/keeping-components-pure">保持组件纯粹</a>。</p><p><strong>虽然这种方式比 Effect 更高效，但大多数组件也不需要它</strong>。无论你怎么做，根据 props 或其他 state 来调整 state 都会使数据流更难理解和调试。总是检查是否可以通过添加 <a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect#resetting-all-state-when-a-prop-changes">key 来重置所有 state</a>，或者 <a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect#updating-state-based-on-props-or-state">在渲染期间计算所需内容</a>。例如，你可以存储已选中的 <strong>item ID</strong> 而不是存储（并重置）已选中的 <strong>item</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xwq6molqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xwq6molqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isReverse, setIsReverse] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [selectedId, setSelectedId] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-comment">/*  ✅ 非常好：在渲染期间计算所需内容  */</span> <br>  <span class="hljs-keyword">const</span> selection = items.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">id</span> === selectedId) ?? <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在完全不需要 “调整” state 了。如果包含已选中 ID 的项出现在列表中，则仍然保持选中状态。如果没有找到匹配的项，则在渲染期间计算的 <code>selection</code> 将会是 <code>null</code>。行为不同了，但可以说更好了，因为大多数对 <code>items</code> 的更改仍可以保持选中状态。</p><hr><p><mark>在事件处理函数中共享逻辑</mark>：假设你有一个产品页面，上面有两个按钮（购买和付款），都可以让你购买该产品。当用户将产品添加进购物车时，你想显示一个通知。在两个按钮的 click 事件处理函数中都调用 <code>showNotification()</code> 感觉有点重复，所以你可能想把这个逻辑放在一个 Effect 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-maks7ulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-maks7ulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; product, addToCart &#125;</span>) &#123;<br>  <span class="hljs-comment">/*  🔴 避免：在 Effect 中处理属于事件特定的逻辑  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (product.<span class="hljs-property">isInCart</span>) &#123;<br>      <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">`已添加 <span class="hljs-subst">$&#123;product.name&#125;</span> 进购物车！`</span>);<br>    &#125;<br>  &#125;, [product]);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleBuyClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">addToCart</span>(product);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCheckoutClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">addToCart</span>(product);<br>    <span class="hljs-title function_">navigateTo</span>(<span class="hljs-string">&#x27;/checkout&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这个 Effect 是多余的。而且很可能会导致问题。例如，假设你的应用在页面重新加载之前 “记住” 了购物车中的产品。如果你把一个产品添加到购物车中并刷新页面，通知将再次出现。每次刷新该产品页面时，它都会出现。这是因为 <code>product.isInCart</code> 在页面加载时已经是 <code>true</code> 了，所以上面的 Effect 每次都会调用 <code>showNotification()</code>。</p><p><strong>当你不确定某些代码应该放在 Effect 中还是事件处理函数中时，先自问 为什么 要执行这些代码。Effect 只用来执行那些显示给用户时组件 需要执行 的代码</strong>。在这个例子中，通知应该在用户 <strong>按下按钮</strong> 后出现，而不是因为页面显示出来时！删除 Effect 并将共享的逻辑放入一个被两个事件处理程序调用的函数中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vc7i9tlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vc7i9tlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; product, addToCart &#125;</span>) &#123;<br>  <span class="hljs-comment">/*  ✅ 非常好：事件特定的逻辑在事件处理函数中处理  */</span> <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">buyProduct</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">addToCart</span>(product);<br>    <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">`已添加 <span class="hljs-subst">$&#123;product.name&#125;</span> 进购物车！`</span>);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleBuyClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">buyProduct</span>();<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCheckoutClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">buyProduct</span>();<br>    <span class="hljs-title function_">navigateTo</span>(<span class="hljs-string">&#x27;/checkout&#x27;</span>);<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>这既移除了不必要的 Effect，又修复了问题。</p><hr><p><mark>发送 POST 请求 </mark>：这个 <code>Form</code> 组件会发送两种 POST 请求。它在页面加载之际会发送一个分析请求。当你填写表格并点击提交按钮时，它会向 <code>/api/register</code> 接口发送一个 POST 请求：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bqocgalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bqocgalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [firstName, setFirstName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [lastName, setLastName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">/*  ✅ 非常好：这个逻辑应该在组件显示时执行  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/analytics/event&#x27;</span>, &#123; <span class="hljs-attr">eventName</span>: <span class="hljs-string">&#x27;visit_form&#x27;</span> &#125;);<br>  &#125;, []);<br>  <span class="hljs-comment">/*  🔴 避免：在 Effect 中处理属于事件特定的逻辑  */</span> <br>  <span class="hljs-keyword">const</span> [jsonToSubmit, setJsonToSubmit] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (jsonToSubmit !== <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/register&#x27;</span>, jsonToSubmit);<br>    &#125;<br>  &#125;, [jsonToSubmit]);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setJsonToSubmit</span>(&#123; firstName, lastName &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>让我们应用与之前示例相同的准则。</p><p>分析请求应该保留在 Effect 中。这是 <strong>因为</strong> 发送分析请求是表单显示时就需要执行的（在开发环境中它会发送两次，请 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#sending-analytics">参考这里</a> 了解如何处理）。</p><p>然而，发送到 <code>/api/register</code> 的 POST 请求并不是由表单 <strong>显示</strong> 时引起的。你只想在一个特定的时间点发送请求：当用户按下按钮时。它应该只在这个 <strong>特定的交互</strong> 中发生。删除第二个 Effect，将该 POST 请求移入事件处理函数中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5fg6felqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5fg6felqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [firstName, setFirstName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [lastName, setLastName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">/*  ✅ 非常好：这个逻辑应该在组件显示时执行  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/analytics/event&#x27;</span>, &#123; <span class="hljs-attr">eventName</span>: <span class="hljs-string">&#x27;visit_form&#x27;</span> &#125;);<br>  &#125;, []);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-comment">/*  ✅ 非常好：事件特定的逻辑在事件处理函数中处理  */</span> <br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/register&#x27;</span>, &#123; firstName, lastName &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>当你决定将某些逻辑放入事件处理函数还是 Effect 中时，你需要回答的主要问题是：从用户的角度来看它是 <strong>怎样的逻辑</strong>。如果这个逻辑是由某个特定的交互引起的，请将它保留在相应的事件处理函数中。如果是由用户在屏幕上 <strong>看到</strong> 组件时引起的，请将它保留在 Effect 中。</p><hr><p><mark>链式计算</mark>：有时候你可能想链接多个 Effect，每个 Effect 都基于某些 state 来调整其他的 state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1yizl3lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1yizl3lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Game</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [card, setCard] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [goldCardCount, setGoldCardCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [round, setRound] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> [isGameOver, setIsGameOver] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-comment">/*  🔴 避免：链接多个 Effect 仅仅为了相互触发调整 state  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (card !== <span class="hljs-literal">null</span> &amp;&amp; card.<span class="hljs-property">gold</span>) &#123;<br>      <span class="hljs-title function_">setGoldCardCount</span>(<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> c + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;, [card]);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (goldCardCount &gt; <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-title function_">setRound</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> r + <span class="hljs-number">1</span>)<br>      <span class="hljs-title function_">setGoldCardCount</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;, [goldCardCount]);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (round &gt; <span class="hljs-number">5</span>) &#123;<br>      <span class="hljs-title function_">setIsGameOver</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>  &#125;, [round]);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;游戏结束！&#x27;</span>);<br>  &#125;, [isGameOver]);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePlaceCard</span>(<span class="hljs-params">nextCard</span>) &#123;<br>    <span class="hljs-keyword">if</span> (isGameOver) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;游戏已经结束了。&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">setCard</span>(nextCard);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></div></figure><p>这段代码里有两个问题。</p><p>一个问题是它非常低效：在链式的每个 <code>set</code> 调用之间，组件（及其子组件）都不得不重新渲染。在上面的例子中，在最坏的情况下（<code>setCard</code> → 渲染 → <code>setGoldCardCount</code> → 渲染 → <code>setRound</code> → 渲染 → <code>setIsGameOver</code> → 渲染）有三次不必要的重新渲染。</p><p>即使不考虑渲染效率问题，随着代码不断扩展，你会遇到这条 “链式” 调用不符合新需求的情况。试想一下，你现在需要添加一种方法来回溯游戏的历史记录，可以通过更新每个 state 变量到之前的值来实现。然而，将 <code>card</code> 设置为之前的的某个值会再次触发 Effect 链并更改你正在显示的数据。这样的代码往往是僵硬而脆弱的。</p><p>在这个例子中，更好的做法是：尽可能在渲染期间进行计算，以及在事件处理函数中调整 state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t2atdxlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t2atdxlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Game</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [card, setCard] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [goldCardCount, setGoldCardCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [round, setRound] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-comment">/*  ✅ 尽可能在渲染期间进行计算  */</span> <br>  <span class="hljs-keyword">const</span> isGameOver = round &gt; <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePlaceCard</span>(<span class="hljs-params">nextCard</span>) &#123;<br>    <span class="hljs-keyword">if</span> (isGameOver) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;游戏已经结束了。&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*  ✅ 在事件处理函数中计算剩下的所有 state  */</span> <br>    <span class="hljs-title function_">setCard</span>(nextCard);<br>    <span class="hljs-keyword">if</span> (nextCard.<span class="hljs-property">gold</span>) &#123;<br>      <span class="hljs-keyword">if</span> (goldCardCount &lt;= <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-title function_">setGoldCardCount</span>(goldCardCount + <span class="hljs-number">1</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-title function_">setGoldCardCount</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-title function_">setRound</span>(round + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (round === <span class="hljs-number">5</span>) &#123;<br>          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;游戏结束！&#x27;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></div></figure><p>这高效得多。此外，如果你实现了一个回溯游戏历史的方法，现在你可以将每个 state 变量设置为之前的任何的一个值，而不会触发每个调整其他值的 Effect 链。如果你需要在多个事件处理函数之间复用逻辑，可以 <a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect#sharing-logic-between-event-handlers">提取成一个函数</a> 并在这些事件处理函数中调用它。</p><p>请记住，在事件处理函数内部，<a href="https://zh-hans.react.dev/learn/state-as-a-snapshot">state 的行为类似快照</a>。例如，即使你调用了 <code>setRound(round + 1)</code>，<code>round</code> 变量仍然是用户点击按钮时的值。如果你需要使用下一个值进行计算，则需要像这样手动定义它：<code>const nextRound = round + 1</code>。</p><p>在某些情况下，你 <strong>无法</strong> 在事件处理函数中直接计算出下一个 state。例如，试想一个具有多个下拉菜单的表单，如果下一个下拉菜单的选项取决于前一个下拉菜单选择的值。这时，Effect 链是合适的，因为你需要与网络进行同步。</p><hr><p><mark>初始化应用 </mark>：有些逻辑只需要在应用加载时执行一次。</p><p>你可能想把它放在一个顶层组件的 Effect 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-k2nfzblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-k2nfzblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/*  🔴 避免：把只需要执行一次的逻辑放在 Effect 中  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">loadDataFromLocalStorage</span>();<br>    <span class="hljs-title function_">checkAuthToken</span>();<br>  &#125;, []);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>然后，你很快就会发现它在 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development">开发环境会执行两次</a>。这会导致一些问题——例如，它可能使身份验证 token 无效，因为该函数不是为被调用两次而设计的。一般来说，当组件重新挂载时应该具有一致性。包括你的顶层 <code>App</code> 组件。</p><p>尽管在实际的生产环境中它可能永远不会被重新挂载，但在所有组件中遵循相同的约束条件可以更容易地移动和复用代码。如果某些逻辑必须在 <strong>每次应用加载时执行一次</strong>，而不是在 <strong>每次组件挂载时执行一次</strong>，可以添加一个顶层变量来记录它是否已经执行过了：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0qjg1qlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0qjg1qlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> didInit = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!didInit) &#123;<br>      didInit = <span class="hljs-literal">true</span>;<br>      <span class="hljs-comment">/*  ✅ 只在每次应用加载时执行一次  */</span> <br>      <span class="hljs-title function_">loadDataFromLocalStorage</span>();<br>      <span class="hljs-title function_">checkAuthToken</span>();<br>    &#125;<br>  &#125;, []);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>你也可以在模块初始化和应用渲染之前执行它：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v6sn38lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v6sn38lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123; <span class="hljs-comment">// 检测我们是否在浏览器环境</span><br>   <span class="hljs-comment">/*  ✅ 只在每次应用加载时执行一次  */</span> <br>  <span class="hljs-title function_">checkAuthToken</span>(); <span class="hljs-title function_">loadDataFromLocalStorage</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>顶层代码会在组件被导入时执行一次——即使它最终并没有被渲染。为了避免在导入任意组件时降低性能或产生意外行为，请不要过度使用这种方法。将应用级别的初始化逻辑保留在像 <code>App.js</code> 这样的根组件模块或你的应用入口中。</p><p><mark>通知父组件有关 state 变化的信息 </mark>：假设你正在编写一个有具有内部 state <code>isOn</code> 的 <code>Toggle</code> 组件，该 state 可以是 <code>true</code> 或 <code>false</code>。有几种不同的方式来进行切换（通过点击或拖动）。你希望在 <code>Toggle</code> 的 state 变化时通知父组件，因此你暴露了一个 <code>onChange</code> 事件并在 <code>Effect</code> 中调用它：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a1qevplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a1qevplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toggle</span>(<span class="hljs-params">&#123; onChange &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOn, setIsOn] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-comment">/*  🔴 避免：onChange 处理函数执行的时间太晚了  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">onChange</span>(isOn);<br>  &#125;, [isOn, onChange])<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIsOn</span>(!isOn);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDragEnd</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isCloserToRightEdge</span>(e)) &#123;<br>      <span class="hljs-title function_">setIsOn</span>(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">setIsOn</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>和之前一样，这不太理想。<code>Toggle</code> 首先更新它的 state，然后 React 会更新屏幕。然后 React 执行 Effect 中的代码，调用从父组件传入的 <code>onChange</code> 函数。现在父组件开始更新它自己的 state，开启另一个渲染流程。更好的方式是在单个流程中完成所有操作。</p><p>删除 Effect，并在同一个事件处理函数中更新 <strong>两个</strong> 组件的 state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ns0ubblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ns0ubblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toggle</span>(<span class="hljs-params">&#123; onChange &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOn, setIsOn] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateToggle</span>(<span class="hljs-params">nextIsOn</span>) &#123;<br>    <span class="hljs-comment">/*  ✅ 非常好：在触发它们的事件中执行所有更新  */</span> <br>    <span class="hljs-title function_">setIsOn</span>(nextIsOn);<br>    <span class="hljs-title function_">onChange</span>(nextIsOn);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">updateToggle</span>(!isOn);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDragEnd</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isCloserToRightEdge</span>(e)) &#123;<br>      <span class="hljs-title function_">updateToggle</span>(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">updateToggle</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>通过这种方式，<code>Toggle</code> 组件及其父组件都在事件处理期间更新了各自的 state。React 会 <a href="https://zh-hans.react.dev/learn/queueing-a-series-of-state-updates">批量</a> 处理来自不同组件的更新，所以只会有一个渲染流程。</p><p>你也可以完全移除该 state，并从父组件中接收 <code>isOn</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ohsj6wlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ohsj6wlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/*  ✅ 也很好：该组件完全由它的父组件控制  */</span> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toggle</span>(<span class="hljs-params">&#123; isOn, onChange &#125;</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">onChange</span>(!isOn);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDragEnd</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isCloserToRightEdge</span>(e)) &#123;<br>      <span class="hljs-title function_">onChange</span>(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">onChange</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>“<a href="https://zh-hans.react.dev/learn/sharing-state-between-components">状态提升</a>” 允许父组件通过切换自身的 state 来完全控制 <code>Toggle</code> 组件。这意味着父组件会包含更多的逻辑，但整体上需要关心的状态变少了。每当你尝试保持两个不同的 state 变量之间的同步时，试试状态提升！</p><p><mark>将数据传递给父组件</mark>：<code>Child</code> 组件获取了一些数据并在 Effect 中传递给 <code>Parent</code> 组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vnmdlhlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vnmdlhlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [data, setData] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">onFetched</span>=<span class="hljs-string">&#123;setData&#125;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">&#123; onFetched &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">useSomeAPI</span>();<br>  <span class="hljs-comment">/*  🔴 避免：在 Effect 中传递数据给父组件  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (data) &#123;<br>      <span class="hljs-title function_">onFetched</span>(data);<br>    &#125;<br>  &#125;, [onFetched, data]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 React 中，数据从父组件流向子组件。当你在屏幕上看到了一些错误时，你可以通过一路追踪组件树来寻找错误信息是从哪个组件传递下来的，从而找到传递了错误的 prop 或具有错误的 state 的组件。当子组件在 Effect 中更新其父组件的 state 时，数据流变得非常难以追踪。既然子组件和父组件都需要相同的数据，那么可以让父组件获取那些数据，并将其 <strong>向下传递</strong> 给子组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yx9m4jlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yx9m4jlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">useSomeAPI</span>();<br>  <span class="hljs-comment">/*  ✅ 非常好：向子组件传递数据  */</span> <br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;data&#125;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">&#123; data &#125;</span>) &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这更简单，并且可以保持数据流的可预测性：数据从父组件流向子组件。</p><p><mark>订阅外部 store </mark>：有时候，你的组件可能需要订阅 React state 之外的一些数据。这些数据可能来自第三方库或内置浏览器 API。由于这些数据可能在 React 无法感知的情况下发变化，你需要在你的组件中手动订阅它们。这经常使用 Effect 来实现，例如：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zvkjwmlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zvkjwmlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">useOnlineStatus</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/*  不理想：在 Effect 中手动订阅 store  */</span><br>  <span class="hljs-keyword">const</span> [isOnline, setIsOnline] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateState</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(navigator.<span class="hljs-property">onLine</span>);<br>    &#125;<br>    <span class="hljs-title function_">updateState</span>();<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, updateState);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, updateState);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, updateState);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, updateState);<br>    &#125;;<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> isOnline;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatIndicator</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnline = <span class="hljs-title function_">useOnlineStatus</span>();<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这个组件订阅了一个外部的 store 数据（在这里，是浏览器的 <code>navigator.onLine</code> API）。由于这个 API 在服务端不存在（因此不能用于初始的 HTML），因此 state 最初被设置为 <code>true</code>。每当浏览器 store 中的值发生变化时，组件都会更新它的 state。</p><p>尽管通常可以使用 Effect 来实现此功能，但 React 为此针对性地提供了一个 Hook 用于订阅外部 store。删除 Effect 并将其替换为调用 <a href="https://zh-hans.react.dev/reference/react/useSyncExternalStore"><code>useSyncExternalStore</code></a>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zj6lm5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zj6lm5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, callback); <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, callback);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, callback);    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, callback);<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useOnlineStatus</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/*  ✅ 非常好：用内置的 Hook 订阅外部 store  */</span> <br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useSyncExternalStore</span>(<br>    subscribe, <span class="hljs-comment">// 只要传递的是同一个函数，React 不会重新订阅</span><br>    <span class="hljs-function">() =&gt;</span> navigator.<span class="hljs-property">onLine</span>, <span class="hljs-comment">// 如何在客户端获取值</span><br>    <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span> <span class="hljs-comment">// 如何在服务端获取值</span><br>  );<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatIndicator</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnline = <span class="hljs-title function_">useOnlineStatus</span>();<br>&#125;<br></code></pre></td></tr></table></div></figure><p>与手动使用 Effect 将可变数据同步到 React state 相比，这种方法能减少错误。通常，你可以写一个像上面的 <code>useOnlineStatus()</code> 这样的自定义 Hook，这样你就不需要在各个组件中重复写这些代码。<a href="https://zh-hans.react.dev/reference/react/useSyncExternalStore">阅读更多关于在 React 组件中订阅外部数据 store 的信息</a>。</p><p>获取数据：许多应用使用 Effect 来发起数据获取请求。像这样在 Effect 中写一个数据获取请求是相当常见的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zvim8tlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zvim8tlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SearchResults</span>(<span class="hljs-params">&#123; query &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [results, setResults] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [page, setPage] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/*  🔴 避免：没有清除逻辑的获取数据  */</span> <br>    <span class="hljs-title function_">fetchResults</span>(query, page).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">setResults</span>(json);<br>    &#125;);<br>  &#125;, [query, page]);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNextPageClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setPage</span>(page + <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>你 <strong>不需要</strong> 把这个数据获取逻辑迁移到一个事件处理函数中。</p><p>这可能看起来与之前需要将逻辑放入事件处理函数中的示例相矛盾！但是，考虑到这并不是 <strong>键入事件</strong>，这是在这里获取数据的主要原因。搜索输入框的值经常从 URL 中预填充，用户可以在不关心输入框的情况下导航到后退和前进页面。</p><p><code>page</code> 和 <code>query</code> 的来源其实并不重要。只要该组件可见，你就需要通过当前 <code>page</code> 和 <code>query</code> 的值，保持 <code>results</code> 和网络数据的 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects">同步</a>。这就是为什么这里是一个 Effect 的原因。</p><p>然而，上面的代码有一个问题。假设你快速地输入 <code>“hello”</code>。那么 <code>query</code> 会从 <code>“h”</code> 变成 <code>“he”</code>，<code>“hel”</code>，<code>“hell”</code> 最后是 <code>“hello”</code>。这会触发一连串不同的数据获取请求，但无法保证对应的返回顺序。例如，<code>“hell”</code> 的响应可能在 <code>“hello”</code> 的响应 <strong>之后</strong> 返回。由于它的 <code>setResults()</code> 是在最后被调用的，你将会显示错误的搜索结果。这种情况被称为 “<a href="https://en.wikipedia.org/wiki/Race_condition">竞态条件</a>”：两个不同的请求 “相互竞争”，并以与你预期不符的顺序返回。</p><p><strong>为了修复这个问题，你需要添加一个 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#fetching-data">清理函数</a> 来忽略较早的返回结果：</strong></p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-crz083lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-crz083lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SearchResults</span>(<span class="hljs-params">&#123; query &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [results, setResults] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [page, setPage] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> ignore = <span class="hljs-literal">false</span>;<br>    <span class="hljs-title function_">fetchResults</span>(query, page).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!ignore) &#123;<br>        <span class="hljs-title function_">setResults</span>(json);<br>      &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      ignore = <span class="hljs-literal">true</span>;<br>    &#125;;<br>  &#125;, [query, page]);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNextPageClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setPage</span>(page + <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这确保了当你在 Effect 中获取数据时，除了最后一次请求的所有返回结果都将被忽略。</p><p>处理竞态条件并不是实现数据获取的唯一难点。你可能还需要考虑缓存响应结果（使用户点击后退按钮时可以立即看到先前的屏幕内容），如何在服务端获取数据（使服务端初始渲染的 HTML 中包含获取到的内容而不是加载动画），以及如何避免网络瀑布（使子组件不必等待每个父组件的数据获取完毕后才开始获取数据）。</p><p><strong>这些问题适用于任何 UI 库，而不仅仅是 React。解决这些问题并不容易，这也是为什么现代 <a href="https://zh-hans.react.dev/learn/start-a-new-react-project#production-grade-react-frameworks">框架</a> 提供了比在 Effect 中获取数据更有效的内置数据获取机制的原因。</strong></p><p>如果你不使用框架（也不想开发自己的框架），但希望使从 Effect 中获取数据更符合人类直觉，请考虑像这个例子一样，将获取逻辑提取到一个自定义 Hook 中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-e8mta5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-e8mta5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SearchResults</span>(<span class="hljs-params">&#123; query &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [page, setPage] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(&#123; query, page &#125;);<br>  <span class="hljs-keyword">const</span> results = <span class="hljs-title function_">useData</span>(<span class="hljs-string">`/api/search?<span class="hljs-subst">$&#123;params&#125;</span>`</span>);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNextPageClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setPage</span>(page + <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useData</span>(<span class="hljs-params">url</span>) &#123;<br>  <span class="hljs-keyword">const</span> [data, setData] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> ignore = <span class="hljs-literal">false</span>;<br>    <span class="hljs-title function_">fetch</span>(url)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ignore) &#123;<br>          <span class="hljs-title function_">setData</span>(json);<br>        &#125;<br>      &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      ignore = <span class="hljs-literal">true</span>;<br>    &#125;;<br>  &#125;, [url]);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>你可能还想添加一些错误处理逻辑以及跟踪内容是否处于加载中。你可以自己编写这样的 Hook，也可以使用 React 生态中已经存在的许多解决方案。<strong>虽然仅仅使用自定义 Hook 不如使用框架内置的数据获取机制高效，但将数据获取逻辑移动到自定义 Hook 中将使后续采用高效的数据获取策略更加容易。</strong></p><p>一般来说，当你不得不编写 Effect 时，请留意是否可以将某段功能提取到专门的内置 API 或一个更具声明性的自定义 Hook 中，比如上面的 <code>useData</code>。你会发现组件中的原始 <code>useEffect</code> 调用越少，维护应用将变得更加容易。</p><h2 id="5-响应式-Effect-的生命周期"><a href="#5-响应式-Effect-的生命周期" class="headerlink" title="5.响应式 Effect 的生命周期"></a>5.响应式 Effect 的生命周期</h2><p>Effect 与组件有不同的生命周期。组件可以挂载、更新或卸载。Effect 只能做两件事：开始同步某些东西，然后停止同步它。如果 Effect 依赖于随时间变化的 props 和 state，这个循环可能会发生多次。React 提供了代码检查规则来检查是否正确地指定了 Effect 的依赖项，这能够使 Effect 与最新的 props 和 state 保持同步。</p><p><mark>每个 React 组件都经历相同的生命周期</mark>：</p><ol><li>当组件被添加到屏幕上时，它会进行组件的 <strong>挂载</strong>。</li><li>当组件接收到新的 props 或 state 时，通常是作为对交互的响应，它会进行组件的 <strong>更新</strong>。</li><li>当组件从屏幕上移除时，它会进行组件的 <strong>卸载</strong>。</li></ol><p><strong>这是一种很好的思考组件的方式，但并不适用于 Effect</strong>。相反，尝试从组件生命周期中跳脱出来，独立思考 Effect。Effect 描述了如何将外部系统与当前的 props 和 state 同步。随着代码的变化，同步的频率可能会增加或减少。</p><p>为了说明这一点，考虑下面这个示例。Effect 将组件连接到聊天服务器：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s177yzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s177yzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>Effect 的主体部分指定了如何 <strong>开始同步</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hwc8mflqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hwc8mflqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>connection.<span class="hljs-title function_">connect</span>();<br></code></pre></td></tr></table></div></figure><p>Effect 返回的清理函数指定了如何 <strong>停止同步</strong>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q8i0lslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q8i0lslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">connection.<span class="hljs-title function_">disconnect</span>();<br></code></pre></td></tr></table></div></figure><p>你可能会直观地认为当组件挂载时 React 会 <strong>开始同步</strong>，而当组件卸载时会 <strong>停止同步</strong>。然而，事情并没有这么简单！有时，在组件保持挂载状态的同时，可能还需要 <strong>多次开始和停止同步</strong>。</p><p>有些 Effect 根本不返回清理函数。<a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development">在大多数情况下</a>，可能希望返回一个清理函数，但如果没有返回，React 将表现得好像返回了一个空的清理函数。</p><hr><p><mark>为什么同步可能需要多次进行</mark>：想象一下，这个 <code>ChatRoom</code> 组件接收 <code>roomId</code> 属性，用户可以在下拉菜单中选择。假设初始时，用户选择了 <code>&quot;general&quot;</code> 作为 <code>roomId</code>。应用程序会显示 <code>&quot;general&quot;</code> 聊天室：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y3vfnrlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y3vfnrlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId /* <span class="hljs-string">&quot;general&quot;</span> */ &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 UI 显示之后，React 将运行 Effect 来 <strong>开始同步</strong>。它连接到 <code>&quot;general&quot;</code> 聊天室：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-44cuxalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-44cuxalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId /* <span class="hljs-string">&quot;general&quot;</span> */ &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">/*  连接到 &quot;general&quot; 聊天室  */</span> <br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>(); <span class="hljs-comment">/*  断开与 &quot;general&quot; 聊天室的连接  */</span> <br>    &#125;;<br>  &#125;, [roomId]);<br></code></pre></td></tr></table></div></figure><p>到目前为止，一切都很顺利。</p><p>之后，用户在下拉菜单中选择了不同的房间（例如 <code>&quot;travel&quot;</code> ）。首先，React 会更新 UI：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-efghtblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-efghtblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId /* <span class="hljs-string">&quot;travel&quot;</span> */ &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>思考接下来应该发生什么。用户在界面中看到 <code>&quot;travel&quot;</code> 是当前选定的聊天室。然而，上次运行的 Effect 仍然连接到 <code>&quot;general&quot;</code> 聊天室。**<code>roomId</code> 属性已经发生了变化，所以之前 Effect 所做的事情（连接到 <code>&quot;general&quot;</code> 聊天室）不再与 UI 匹配**。</p><p>此时，你希望 React 执行两个操作：</p><ol><li>停止与旧的 <code>roomId</code> 同步（断开与 <code>&quot;general&quot;</code> 聊天室的连接）</li><li>开始与新的 <code>roomId</code> 同步（连接到 <code>&quot;travel&quot;</code> 聊天室）</li></ol><p><strong>幸运的是，你已经教会了 React 如何执行这两个操作</strong>！Effect 的主体部分指定了如何开始同步，而清理函数指定了如何停止同步。现在，React 只需要按照正确的顺序和正确的 props 和 state 来调用它们。让我们看看具体是如何实现的。</p><hr><p><mark>React 如何重新同步 Effect </mark>：回想一下，<code>ChatRoom</code> 组件已经接收到了 <code>roomId</code> 属性的新值。之前它是 <code>&quot;general&quot;</code>，现在变成了 <code>&quot;travel&quot;</code>。React 需要重新同步 Effect，以重新连接到不同的聊天室。</p><p>为了 <strong>停止同步</strong>，React 将调用 Effect 返回的清理函数，该函数在连接到 <code>&quot;general&quot;</code> 聊天室后返回。由于 <code>roomId</code> 为 <code>&quot;general&quot;</code>，清理函数将断开与 <code>&quot;general&quot;</code> 聊天室的连接：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rm17yglqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rm17yglqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId /* <span class="hljs-string">&quot;general&quot;</span> */ &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">/*  连接到 &quot;general&quot; 聊天室  */</span> <br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>(); <span class="hljs-comment">/* 断开与 &quot;general&quot; 聊天室的连接   */</span> <br>    &#125;;<br></code></pre></td></tr></table></div></figure><p>然后，React 将运行在此渲染期间提供的 Effect。这次，<code>roomId</code> 为 <code>&quot;travel&quot;</code>，因此它将 <strong>开始同步</strong> 到 <code>&quot;travel&quot;</code> 聊天室（直到最终也调用了清理函数）：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-egloj5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-egloj5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId /* <span class="hljs-string">&quot;travel&quot;</span> */ &#125;</span>) &#123;<br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">/*  连接到 &quot;travel&quot; 聊天室  */</span> <br>        connection.<span class="hljs-title function_">connect</span>();<br>    &#125;<br></code></pre></td></tr></table></div></figure><p>多亏了这一点，现在已经连接到了用户在 UI 中选择的同一个聊天室。避免了灾难！</p><p>每当组件使用不同的 <code>roomId</code> 重新渲染后，Effect 将重新进行同步。例如，假设用户将 <code>roomId</code> 从 <code>&quot;travel&quot;</code> 更改为 <code>&quot;music&quot;</code>。React 将再次通过调用清理函数 <strong>停止同步</strong> Effect（断开与 <code>&quot;travel&quot;</code> 聊天室的连接）。然后，它将通过使用新的 <code>roomId</code> 属性再次运行 Effect 的主体部分 <strong>开始同步</strong>（连接到 <code>&quot;music&quot;</code> 聊天室）。</p><p>最后，当用户切换到不同的屏幕时，<code>ChatRoom</code> 组件将被卸载。现在没有必要保持连接了。React 将 <strong>最后一次停止同步</strong> Effect，并从 <code>&quot;music&quot;</code> 聊天室断开连接。 </p><p>让我们总结一下从 <code>ChatRoom</code> 组件的角度所发生的一切：</p><ol><li><code>ChatRoom</code> 组件挂载，<code>roomId</code> 设置为 <code>&quot;general&quot;</code></li><li><code>ChatRoom</code> 组件更新，<code>roomId</code> 设置为 <code>&quot;travel&quot;</code></li><li><code>ChatRoom</code> 组件更新，<code>roomId</code> 设置为 <code>&quot;music&quot;</code></li><li><code>ChatRoom</code> 组件卸载</li></ol><p>在组件生命周期的每个阶段，Effect 执行了不同的操作：</p><ol><li>Effect 连接到了 <code>&quot;general&quot;</code> 聊天室</li><li>Effect 断开了与 <code>&quot;general&quot;</code> 聊天室的连接，并连接到了 <code>&quot;travel&quot;</code> 聊天室</li><li>Effect 断开了与 <code>&quot;travel&quot;</code> 聊天室的连接，并连接到了 <code>&quot;music&quot;</code> 聊天室</li><li>Effect 断开了与 <code>&quot;music&quot;</code> 聊天室的连接</li></ol><p>现在让我们从 Effect 本身的角度来思考所发生的事情：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n573b8lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n573b8lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/*  Effect 连接到了通过 roomId 指定的聊天室...  */</span> <br>  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>  connection.<span class="hljs-title function_">connect</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/*  ...直到它断开连接  */</span> <br>    connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;;<br>&#125;, [roomId]);<br></code></pre></td></tr></table></div></figure><p>这段代码的结构可能会将所发生的事情看作是一系列不重叠的时间段：</p><ol><li>Effect 连接到了 <code>&quot;general&quot;</code> 聊天室（直到断开连接）</li><li>Effect 连接到了 <code>&quot;travel&quot;</code> 聊天室（直到断开连接）</li><li>Effect 连接到了 <code>&quot;music&quot;</code> 聊天室（直到断开连接）</li></ol><p>之前，你是从组件的角度思考的。当你从组件的角度思考时，很容易将 Effect 视为在特定时间点触发的“回调函数”或“生命周期事件”，例如“渲染后”或“卸载前”。这种思维方式很快变得复杂，所以最好避免使用。</p><p><strong>相反，始终专注于单个启动&#x2F;停止周期。无论组件是挂载、更新还是卸载，都不应该有影响。只需要描述如何开始同步和如何停止。如果做得好，Effect 将能够在需要时始终具备启动和停止的弹性</strong>。</p><p>这可能会让你想起当编写创建 JSX 的渲染逻辑时，并不考虑组件是挂载还是更新。描述的是应该显示在屏幕上的内容，而 React 会 <a href="https://zh-hans.react.dev/learn/reacting-to-input-with-state">解决其余的问题</a>。</p><hr><p><mark>React 如何验证 Effect 可以重新进行同步 </mark>：这里有一个可以互动的实时示例。点击“打开聊天”来挂载 <code>ChatRoom</code> 组件：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-r9v9mllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-r9v9mllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomId, setRoomId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;general&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [show, setShow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        选择聊天室：&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setRoomId(e.target.value)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;general&quot;</span>&gt;</span>所有<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;travel&quot;</span>&gt;</span>旅游<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(!show)&#125;&gt;</span><br><span class="language-xml">        &#123;show ? &#x27;关闭聊天&#x27; : &#x27;打开聊天&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>&#125;</span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span> <span class="hljs-attr">roomId</span>=<span class="hljs-string">&#123;roomId&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6ugq4qlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6ugq4qlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/*  实际的实现将会连接到服务器  */</span> <br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ 连接到 &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; 房间，位于&#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ 断开 &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; 房间，位于&#x27;</span> + serverUrl);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>请注意，当组件首次挂载时，会看到三个日志：</p><ol><li><code>✅ 连接到 &quot;general&quot; 聊天室，位于 https://localhost:1234...</code> <em>(仅限开发环境)</em></li><li><code>❌ 从 &quot;general&quot; 聊天室断开连接，位于 https://localhost:1234.</code> <em>(仅限开发环境)</em></li><li><code>✅ 连接到 &quot;general&quot; 聊天室，位于 https://localhost:1234...</code></li></ol><p>前两个日志仅适用于开发环境。在开发环境中，React 总是会重新挂载每个组件一次。</p><p><strong>React 通过在开发环境中立即强制 Effect 重新进行同步来验证其是否能够重新同步</strong>。这可能让你想起打开门并额外关闭它以检查门锁是否有效的情景。React 在开发环境中额外启动和停止 Effect 一次，以检查 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development">是否正确实现了它的清理功能</a>。</p><p>实际上，Effect 重新进行同步的主要原因是它所使用的某些数据发生了变化。在上面的示例中，更改所选的聊天室。注意当 <code>roomId</code> 发生变化时，Effect 会重新进行同步。</p><p>然而，还存在其他一些不寻常的情况需要重新进行同步。例如，在上面的示例中，尝试在聊天打开时编辑 <code>serverUrl</code>。注意当修改代码时，Effect会重新进行同步。将来，React 可能会添加更多依赖于重新同步的功能。</p><hr><p><mark>React 如何知道需要重新进行 Effect 的同步 </mark>：你可能想知道 React 是如何知道在 <code>roomId</code> 更改后需要重新同步 Effect。这是因为 <strong>你告诉了 React</strong> 它的代码依赖于 <code>roomId</code>，通过将其包含在 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#step-2-specify-the-effect-dependencies">依赖列表</a> 中。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cc64zjlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cc64zjlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123; <span class="hljs-comment">// roomId 属性可能会随时间变化。</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">/*  这个 Effect 读取了 roomId  */</span> <br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId]); <span class="hljs-comment">/*  因此，你告诉 React 这个 Effect &quot;依赖于&quot; roomId  */</span> <br></code></pre></td></tr></table></div></figure><p>下面是它的工作原理：</p><ol><li>你知道 <code>roomId</code> 是 prop，这意味着它可能会随着时间的推移发生变化。</li><li>你知道 Effect 读取了 <code>roomId</code>（因此其逻辑依赖于可能会在之后发生变化的值）。</li><li>这就是为什么你将其指定为 Effect 的依赖项（以便在 <code>roomId</code> 发生变化时重新进行同步）。</li></ol><p>每次在组件重新渲染后，React 都会查看传递的依赖项数组。如果数组中的任何值与上一次渲染时在相同位置传递的值不同，React 将重新同步 Effect。</p><p>例如，如果在初始渲染时传递了 <code>[&quot;general&quot;]</code>，然后在下一次渲染时传递了 <code>[&quot;travel&quot;]</code>，React 将比较 <code>&quot;general&quot;</code> 和 <code>&quot;travel&quot;</code>。这些是不同的值（使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is</code></a> 进行比较），因此 React 将重新同步 Effect。另一方面，如果组件重新渲染但 <code>roomId</code> 没有发生变化，Effect 将继续连接到相同的房间。</p><hr><p>每个 Effect 表示一个独立的同步过程。 </p><p>抵制将与 Effect 无关的逻辑添加到已经编写的 Effect 中，仅仅因为这些逻辑需要与 Effect 同时运行。例如，假设你想在用户访问房间时发送一个分析事件。你已经有一个依赖于 <code>roomId</code> 的 Effect，所以你可能会想要将分析调用添加到那里：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yigvnzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yigvnzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">logVisit</span>(roomId);<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>但是想象一下，如果以后给这个 Effect 添加了另一个需要重新建立连接的依赖项。如果这个 Effect 重新进行同步，它将为相同的房间调用 <code>logVisit(roomId)</code>，而这不是你的意图。记录访问行为是 <strong>一个独立的过程</strong>，与连接不同。将它们作为两个单独的 Effect 编写：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2ykubzlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2ykubzlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">logVisit</span>(roomId);<br>  &#125;, [roomId]);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>  &#125;, [roomId]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>代码中的每个 Effect 应该代表一个独立的同步过程。</strong></p><p>在上面的示例中，删除一个 Effect 不会影响另一个 Effect 的逻辑。这表明它们同步不同的内容，因此将它们拆分开是有意义的。另一方面，如果将一个内聚的逻辑拆分成多个独立的 Effects，代码可能会看起来更加“清晰”，但 <a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect#chains-of-computations">维护起来会更加困难</a>。这就是为什么你应该考虑这些过程是相同还是独立的，而不是只考虑代码是否看起来更整洁。</p><hr><p><mark>Effect 会“响应”于响应式值 </mark>：Effect 读取了两个变量（<code>serverUrl</code> 和 <code>roomId</code>），但是只将 <code>roomId</code> 指定为依赖项：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-26mgwxlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-26mgwxlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>为什么 <code>serverUrl</code> 不需要作为依赖项呢？</p><p>这是因为 <code>serverUrl</code> 永远不会因为重新渲染而发生变化。无论组件重新渲染多少次以及原因是什么，<code>serverUrl</code> 都保持不变。既然 <code>serverUrl</code> 从不变化，将其指定为依赖项就没有意义。毕竟，依赖项只有在随时间变化时才会起作用！</p><p>另一方面，<code>roomId</code> 在重新渲染时可能会不同。<strong>在组件内部声明的 props、state 和其他值都是 响应式 的，因为它们是在渲染过程中计算的，并参与了 React 的数据流</strong>。</p><p>如果 <code>serverUrl</code> 是状态变量，那么它就是响应式的。响应式值必须包含在依赖项中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hn3w8jlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hn3w8jlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123; <span class="hljs-comment">/*  Props 随时间变化  */</span> <br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>); <span class="hljs-comment">/*  State 可能随时间变化  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">/*  Effect 读取 props 和 state  */</span> <br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId, serverUrl]); <span class="hljs-comment">/* 因此，你告诉 React 这个 Effect &quot;依赖于&quot; props 和 state   */</span> <br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>通过将 <code>serverUrl</code> 包含在依赖项中，确保 Effect 在其发生变化后重新同步。</p><p>尝试在此沙盒中更改所选的聊天室或编辑服务器 URL：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qda7yalqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qda7yalqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId, serverUrl]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        服务器 URL：&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;serverUrl&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setServerUrl(e.target.value)&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomId, setRoomId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;general&#x27;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        选择聊天室：&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setRoomId(e.target.value)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;general&quot;</span>&gt;</span>所有<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;travel&quot;</span>&gt;</span>旅游<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span> <span class="hljs-attr">roomId</span>=<span class="hljs-string">&#123;roomId&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3jnmz2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3jnmz2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/* 实际的实现将会连接到服务器   */</span> <br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ 连接到 &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; 房间，位于&#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ 断开 &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; 房间，位于&#x27;</span> + serverUrl);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>无论何时更改一个类似 <code>roomId</code> 或 <code>serverUrl</code> 的响应式值，该 Effect 都会重新连接到聊天服务器。</p><hr><p><mark>没有依赖项的 Effect 的含义 </mark>：如果将 <code>serverUrl</code> 和 <code>roomId</code> 都移出组件会发生什么？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5s3f35lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5s3f35lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&#x27;general&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, []); <span class="hljs-comment">/*  ✅ 声明的所有依赖  */</span> <br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在 Effect 的代码不使用任何响应式值，因此它的依赖可以是空的 (<code>[]</code>)。</p><p>从组件的角度来看，空的 <code>[]</code> 依赖数组意味着这个 Effect 仅在组件挂载时连接到聊天室，并在组件卸载时断开连接。（请记住，在开发环境中，React 仍会 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#how-react-verifies-that-your-effect-can-re-synchronize">额外执行一次</a> 来对逻辑进行压力测试。）</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-uqz2vnlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-uqz2vnlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&#x27;general&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [show, setShow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(!show)&#125;&gt;</span><br><span class="language-xml">        &#123;show ? &#x27;关闭聊天&#x27; : &#x27;打开聊天&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>&#125;</span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-py9gp3lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-py9gp3lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/*  实际的实现将会连接到服务器  */</span> <br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ 连接到 &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; 房间，位于&#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ 断开 &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; 房间，位于&#x27;</span> + serverUrl);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>然而，如果你 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#thinking-from-the-effects-perspective">从 Effect 的角度思考</a>，根本不需要考虑挂载和卸载。重要的是，你已经指定了 Effect 如何开始和停止同步。目前，它没有任何响应式依赖。但是，如果希望用户随时间改变 <code>roomId</code> 或 <code>serverUrl</code>（它们将变为响应式），Effect 的代码不需要改变。只需要将它们添加到依赖项中即可。</p><hr><p><mark>在组件主体中声明的所有变量都是响应式的</mark>：Props 和 state 并不是唯一的响应式值。从它们计算出的值也是响应式的。如果 props 或 state 发生变化，组件将重新渲染，从中计算出的值也会随之改变。这就是为什么 Effect 使用的组件主体中的所有变量都应该在依赖列表中。</p><p>假设用户可以在下拉菜单中选择聊天服务器，但他们还可以在设置中配置默认服务器。假设你已经将设置状态放入了 <a href="https://zh-hans.react.dev/learn/scaling-up-with-reducer-and-context">上下文</a>，因此从该上下文中读取 <code>settings</code>。现在，可以根据 props 中选择的服务器和默认服务器来计算 <code>serverUrl</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vbd4g4lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vbd4g4lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId, selectedServerUrl &#125;</span>) &#123; <span class="hljs-comment">/*  roomId 是响应式的  */</span> <br>  <span class="hljs-keyword">const</span> settings = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">SettingsContext</span>); <span class="hljs-comment">/* settings 是响应式的   */</span><br>  <span class="hljs-keyword">const</span> serverUrl = selectedServerUrl ?? settings.<span class="hljs-property">defaultServerUrl</span>; <span class="hljs-comment">/*  serverUrl 是响应式的  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">/*  Effect 读取了 roomId 和 serverUrl  */</span> <br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId, serverUrl]); <span class="hljs-comment">/*  因此，当它们中的任何一个发生变化时，它需要重新同步！  */</span> <br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>在这个例子中，<code>serverUrl</code> 不是 prop 或 state 变量。它是在渲染过程中计算的普通变量。但是它是在渲染过程中计算的，所以它可能会因为重新渲染而改变。这就是为什么它是响应式的。</p><p><strong>组件内部的所有值（包括 props、state 和组件体内的变量）都是响应式的。任何响应式值都可以在重新渲染时发生变化，所以需要将响应式值包括在 Effect 的依赖项中</strong>。</p><p>换句话说，Effect 对组件体内的所有值都会“react”。</p><hr><p><mark>React 会验证是否将每个响应式值都指定为了依赖项</mark>：如果检查工具 <a href="https://zh-hans.react.dev/learn/editor-setup#linting">配置了 React</a>，它将检查 Effect 代码中使用的每个响应式值是否已声明为其依赖项。例如，以下示例是一个 lint 错误，因为 <code>roomId</code> 和 <code>serverUrl</code> 都是响应式的：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-o7nu3alqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-o7nu3alqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123; <span class="hljs-comment">/*  roomId 是响应式的  */</span> <br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>); <span class="hljs-comment">/*  serverUrl 是响应式的  */</span> <br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, []); <span class="hljs-comment">/*  &lt;-- 这里有些问题！  */</span> <br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        服务器 URL：&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;serverUrl&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setServerUrl(e.target.value)&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomId, setRoomId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;general&#x27;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        选择聊天室：&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setRoomId(e.target.value)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;general&quot;</span>&gt;</span>所有<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;travel&quot;</span>&gt;</span>旅游<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span> <span class="hljs-attr">roomId</span>=<span class="hljs-string">&#123;roomId&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-942sedlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-942sedlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/*  实际的实现将会连接到服务器  */</span> <br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ 连接到 &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; 房间，位于&#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ 断开 &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; 房间，位于&#x27;</span> + serverUrl);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这可能看起来像是 React 错误，但实际上 React 是在指出代码中的 bug。<code>roomId</code> 和 <code>serverUrl</code> 都可能随时间改变，但忘记了在它们改变时重新同步 Effect。即使用户在 UI 中选择了不同的值，仍然保持连接到初始的 <code>roomId</code> 和 <code>serverUrl</code>。</p><p>要修复这个 bug，请按照检查工具的建议将 <code>roomId</code> 和 <code>serverUrl</code> 作为 Effect 的依赖进行指定：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fi01y5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fi01y5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123; <span class="hljs-comment">/*  roomId 是响应式的  */</span> <br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>); <span class="hljs-comment">/*  serverUrl 是响应式的  */</span> <br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [serverUrl, roomId]); <span class="hljs-comment">/*  ✅ 声明的所有依赖  */</span> <br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>在上面的沙盒中尝试这个修复方法。验证一下是否消除了检查工具的错误，并且在需要时聊天会重新连接。</p><p>在某些情况下，React <strong>知道</strong> 一个值永远不会改变，即使它在组件内部声明。例如，从 <code>useState</code> 返回的 <code>set</code> 函数和从 <code>useRef</code> 返回的 ref 对象是 <strong>稳定的</strong> ——它们保证在重新渲染时不会改变。稳定值不是响应式的，因此可以从列表中省略它们。包括它们是允许的：它们不会改变，所以无关紧要。</p><hr><p><mark>当你不想进行重新同步时该怎么办 </mark>：在上一个示例中，通过将 <code>roomId</code> 和 <code>serverUrl</code> 列为依赖项来修复了 lint 错误。</p><p>然而，可以通过向检查工具“证明”这些值不是响应式值，即它们 <strong>不会</strong> 因为重新渲染而改变。例如，如果 <code>serverUrl</code> 和 <code>roomId</code> 不依赖于渲染并且始终具有相同的值，可以将它们移到组件外部。现在它们不需要成为依赖项：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v2mbi9lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v2mbi9lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>; <span class="hljs-comment">/*  serverUrl 不是响应式的  */</span> <br><span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&#x27;general&#x27;</span>; <span class="hljs-comment">/*  roomId 不是响应式的  */</span> <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, []); <span class="hljs-comment">/*  ✅ 声明的所有依赖  */</span> <br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>也可以将它们 <strong>移动到 Effect 内部</strong>。它们不是在渲染过程中计算的，因此它们不是响应式的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tqnphklqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tqnphklqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>; <span class="hljs-comment">/* serverUrl 不是响应式的   */</span> <br>    <span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&#x27;general&#x27;</span>; <span class="hljs-comment">/*  roomId 不是响应式的  */</span> <br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>()<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, []); <span class="hljs-comment">/*  ✅ 声明的所有依赖  */</span> <br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>Effect 是一段响应式的代码块</strong>。它们在读取的值发生变化时重新进行同步。与事件处理程序不同，事件处理程序只在每次交互时运行一次，而 Effect 则在需要进行同步时运行。</p><p><strong>不能“选择”依赖项</strong>。依赖项必须包括 Effect 中读取的每个 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#all-variables-declared-in-the-component-body-are-reactive">响应式值</a>。代码检查工具会强制执行此规则。有时，这可能会导致出现无限循环的问题，或者 Effect 过于频繁地重新进行同步。不要通过禁用代码检查来解决这些问题！下面是一些解决方案：</p><ul><li><strong>检查 Effect 是否表示了独立的同步过程</strong>。如果 Effect 没有进行任何同步操作，<a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect">可能是不必要的</a>。如果它同时进行了几个独立的同步操作，<a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process">将其拆分为多个 Effect</a>。</li><li><strong>如果想读取 props 或 state 的最新值，但又不想对其做出反应并重新同步 Effect</strong>，可以将 Effect 拆分为具有反应性的部分（保留在 Effect 中）和非反应性的部分（提取为名为 “Effect Event” 的内容）。<a href="https://zh-hans.react.dev/learn/separating-events-from-effects">阅读关于将事件与 Effect 分离的内容</a>。</li><li><strong>避免将对象和函数作为依赖项</strong>。如果在渲染过程中创建对象和函数，然后在 Effect 中读取它们，它们将在每次渲染时都不同。这将导致 Effect 每次都重新同步。<a href="https://zh-hans.react.dev/learn/removing-effect-dependencies">阅读有关从 Effect 中删除不必要依赖项的更多内容</a>。</li></ul><p>检查工具是你的朋友，但它们的能力是有限的。检查工具只知道依赖关系是否 <strong>错误</strong>。它并不知道每种情况下的 <strong>最佳</strong> 解决方法。如果静态代码分析工具建议添加某个依赖关系，但添加该依赖关系会导致循环，这并不意味着应该忽略静态代码分析工具。需要修改 Effect 内部（或外部）的代码，使得该值不是响应式的，也不 <strong>需要</strong> 成为依赖项。</p><p>如果有一个现有的代码库，可能会有一些像这样禁用了检查工具的 Effect：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qvwuyolqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qvwuyolqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/*  🔴 避免这样禁用静态代码分析工具：slint-ignore-next-line react-hooks/exhaustive-deps  */</span> <br>&#125;, []);<br></code></pre></td></tr></table></div></figure><h2 id="6-将事件从-Effect-中分开"><a href="#6-将事件从-Effect-中分开" class="headerlink" title="6.将事件从 Effect 中分开"></a>6.将事件从 Effect 中分开</h2><p>事件处理函数只有在你再次执行同样的交互时才会重新运行。Effect 和事件处理函数不一样，它只有在读取的 props 或 state 值和上一次渲染不一样时才会重新同步。有时你需要这两种行为的混合体：即一个 Effect 只在响应某些值时重新运行，但是在其他值变化时不重新运行。</p><p>首先让我们回顾一下事件处理函数和 Effect 的区别。</p><p>假设你正在实现一个聊天室组件，需求如下：</p><ol><li>组件应该自动连接选中的聊天室。</li><li>每当你点击“Send”按钮，组件应该在当前聊天界面发送一条消息。</li></ol><p>假设你已经实现了这部分代码，但是还没有确定应该放在哪里。你是应该用事件处理函数还是 Effect 呢？每当你需要回答这个问题时，请考虑一下 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events">为什么代码需要运行</a>。</p><hr><p><mark>事件处理函数只在响应特定的交互操作时运行</mark>：从用户角度出发，发送消息是 <strong>因为</strong> 他点击了特定的“Send”按钮。如果在任意时间或者因为其他原因发送消息，用户会觉得非常混乱。这就是为什么发送消息应该使用事件处理函数。事件处理函数是让你处理特定的交互操作的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-oozv0vlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-oozv0vlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [message, setMessage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">/*    */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSendClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">sendMessage</span>(message);<br>  &#125;<br>  <span class="hljs-comment">/*    */</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;message&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setMessage(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSendClick&#125;</span>&gt;</span>Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>借助事件处理函数，你可以确保 <code>sendMessage(message)</code> <strong>只</strong> 在用户点击按钮的时候运行。</p><hr><p><mark>每当需要同步，Effect 就会运行 </mark>：回想一下，你还需要让组件和聊天室保持连接。代码放哪里呢？</p><p>运行这个代码的 <strong>原因</strong> 不是特定的交互操作。用户为什么或怎么导航到聊天室屏幕的都不重要。既然用户正在看它并且能够和它交互，组件就要和选中的聊天服务器保持连接。即使聊天室组件显示的是应用的初始屏幕，用户根本还没有执行任何交互，仍然应该需要保持连接。这就是这里用 Effect 的原因：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-70rxiklqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-70rxiklqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-comment">/*    */</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId]);<br>  <span class="hljs-comment">/*    */</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>无论</strong> 用户是否执行指定交互操作，这段代码都可以保证当前选中的聊天室服务器一直有一个活跃连接。用户是否只启动了应用，或选中了不同的聊天室，又或者导航到另一个屏幕后返回，Effect 都可以确保组件和当前选中的聊天室保持同步，并在必要时 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#why-synchronization-may-need-to-happen-more-than-once">重新连接</a>。</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gzaeiolqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gzaeiolqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection, sendMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [message, setMessage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSendClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">sendMessage</span>(message);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to the &#123;roomId&#125; room!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;message&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setMessage(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSendClick&#125;</span>&gt;</span>Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomId, setRoomId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;general&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [show, setShow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Choose the chat room:&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setRoomId(e.target.value)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;general&quot;</span>&gt;</span>general<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;travel&quot;</span>&gt;</span>travel<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span>music<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(!show)&#125;&gt;</span><br><span class="language-xml">        &#123;show ? &#x27;Close chat&#x27; : &#x27;Open chat&#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>&#125;</span><br><span class="language-xml">      &#123;show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span> <span class="hljs-attr">roomId</span>=<span class="hljs-string">&#123;roomId&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ifdr8qlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ifdr8qlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params">message</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;🔵 You sent: &#x27;</span> + message);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/*  真正的实现实际上会连接到服务器  */</span> <br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ Connecting to &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; room at &#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ Disconnected from &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; room at &#x27;</span> + serverUrl);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p><mark>响应式值和响应式逻辑 </mark>：直观上，你可以说事件处理函数总是“手动”触发的，例如点击按钮。另一方面， Effect 是自动触发：每当需要保持同步的时候他们就会开始运行和重新运行。</p><p>有一个更精确的方式来考虑这个问题。</p><p>组件内部声明的 state 和 props 变量被称为  响应式值。本示例中的 <code>serverUrl</code> 不是响应式值，但 <code>roomId</code> 和 <code>message</code> 是。他们参与组件的渲染数据流：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rt5c1zlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rt5c1zlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [message, setMessage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>像这样的响应式值可以因为重新渲染而变化。例如用户可能会编辑 <code>message</code> 或者在下拉菜单中选中不同的 <code>roomId</code>。事件处理函数和 Effect 对于变化的响应是不一样的：</p><ul><li><strong>事件处理函数内部的逻辑是非响应式的</strong>。除非用户又执行了同样的操作（例如点击），否则这段逻辑不会再运行。事件处理函数可以在“不响应”他们变化的情况下读取响应式值。</li><li><strong>Effect 内部的逻辑是响应式的</strong>。如果 Effect 要读取响应式值，<a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values">你必须将它指定为依赖项</a>。如果接下来的重新渲染引起那个值变化，React 就会使用新值重新运行 Effect 内的逻辑。</li></ul><p>让我们重新看看前面的示例来说明差异。</p><p><mark>事件处理函数内部的逻辑是非响应式的</mark>：看这行代码。这个逻辑是响应式的吗？</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-e2448blqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-e2448blqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">sendMessage</span>(message);<br></code></pre></td></tr></table></div></figure><p>从用户角度出发，**<code>message</code> 的变化并不意味着他们想要发送消息**。它只能表明用户正在输入。换句话说，发送消息的逻辑不应该是响应式的。它不应该仅仅因为 响应式值 变化而再次运行。这就是应该把它归入事件处理函数的原因：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nt1bd7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nt1bd7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSendClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">sendMessage</span>(message);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>事件处理函数是非响应式的，所以 <code>sendMessage(message)</code> 只会在用户点击“Send”按钮的时候运行。</p><p><mark>Effect 内部的逻辑是响应式的 </mark>：现在让我们返回这几行代码：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y6xmc3lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y6xmc3lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>connection.<span class="hljs-title function_">connect</span>();<br></code></pre></td></tr></table></div></figure><p>从用户角度出发，**<code>roomId</code> 的变化意味着他们的确想要连接到不同的房间**。换句话说，连接房间的逻辑应该是响应式的。你 <strong>需要</strong> 这几行代码和响应式值“保持同步”，并在值不同时再次运行。这就是它被归入 Effect 的原因：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-w1hz1plqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-w1hz1plqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        connection.<span class="hljs-title function_">disconnect</span>()<br>    &#125;;<br>&#125;, [roomId]);<br></code></pre></td></tr></table></div></figure><p>Effect 是响应式的，所以 <code>createConnection(serverUrl, roomId)</code> 和 <code>connection.connect()</code> 会因为 <code>roomId</code> 每个不同的值而运行。Effect 让聊天室连接和当前选中的房间保持了同步。</p><hr><p><mark>从 Effect 中提取非响应式逻辑 </mark>：当你想混合使用响应式逻辑和非响应式逻辑时，事情变得更加棘手。</p><p>例如，假设你想在用户连接到聊天室时展示一个通知。并且通过从 props 中读取当前 theme（dark 或者 light）来展示对应颜色的通知：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-eu2ik5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-eu2ik5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId, theme &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connected&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Connected!&#x27;</span>, theme);<br>    &#125;);<br>    connection.<span class="hljs-title function_">connect</span>();<br></code></pre></td></tr></table></div></figure><p>但是 <code>theme</code> 是一个响应式值（它会由于重新渲染而变化），并且 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency">Effect 读取的每一个响应式值都必须在其依赖项中声明</a>。现在你必须把 <code>theme</code> 作为 Effect 的依赖项之一：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mhixq2lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mhixq2lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId, theme &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connected&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Connected!&#x27;</span>, theme);<br>    &#125;);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>()<br>    &#125;;<br>  &#125;, [roomId, theme]); <span class="hljs-comment">/*  ✅ 声明所有依赖项  */</span> <br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>用这个例子试一下，看你能否看出这个用户体验问题：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mth7uelqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mth7uelqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection, sendMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; showNotification &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./notifications.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId, theme &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connected&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Connected!&#x27;</span>, theme);<br>    &#125;);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId, theme]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to the &#123;roomId&#125; room!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomId, setRoomId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;general&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [isDark, setIsDark] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Choose the chat room:&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setRoomId(e.target.value)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;general&quot;</span>&gt;</span>general<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;travel&quot;</span>&gt;</span>travel<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span>music<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;isDark&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setIsDark(e.target.checked)&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        Use dark theme</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">roomId</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">theme</span>=<span class="hljs-string">&#123;isDark</span> ? &#x27;<span class="hljs-attr">dark</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">light</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4br4eclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4br4eclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/*  真正的实现实际上会连接到服务器  */</span> <br>  <span class="hljs-keyword">let</span> connectedCallback;<br>  <span class="hljs-keyword">let</span> timeout;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (connectedCallback) &#123;<br>          <span class="hljs-title function_">connectedCallback</span>();<br>        &#125;<br>      &#125;, <span class="hljs-number">100</span>);<br>    &#125;,<br>    <span class="hljs-title function_">on</span>(<span class="hljs-params">event, callback</span>) &#123;<br>      <span class="hljs-keyword">if</span> (connectedCallback) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Cannot add the handler twice.&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (event !== <span class="hljs-string">&#x27;connected&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Only &quot;connected&quot; event is supported.&#x27;</span>);<br>      &#125;<br>      connectedCallback = callback;<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timeout);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>notifications.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vtz0xylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vtz0xylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Toastify</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;toastify-js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;toastify-js/src/toastify.css&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showNotification</span>(<span class="hljs-params">message, theme</span>) &#123;<br>  <span class="hljs-title class_">Toastify</span>(&#123;<br>    <span class="hljs-attr">text</span>: message,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>,<br>    <span class="hljs-attr">gravity</span>: <span class="hljs-string">&#x27;top&#x27;</span>,<br>    <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;right&#x27;</span>,<br>    <span class="hljs-attr">style</span>: &#123;<br>      <span class="hljs-attr">background</span>: theme === <span class="hljs-string">&#x27;dark&#x27;</span> ? <span class="hljs-string">&#x27;black&#x27;</span> : <span class="hljs-string">&#x27;white&#x27;</span>,<br>      <span class="hljs-attr">color</span>: theme === <span class="hljs-string">&#x27;dark&#x27;</span> ? <span class="hljs-string">&#x27;white&#x27;</span> : <span class="hljs-string">&#x27;black&#x27;</span>,<br>    &#125;,<br>  &#125;).<span class="hljs-title function_">showToast</span>();<br>&#125;<br></code></pre></td></tr></table></div></figure><p>当 <code>roomId</code> 变化时，聊天会和预期一样重新连接。但是由于 <code>theme</code> 也是一个依赖项，所以每次你在 dark 和 light 主题间切换时，聊天 <strong>也会</strong> 重连。这不是很好！</p><p>换言之，即使它在 Effect 内部（这是响应式的），你也不想让这行代码变成响应式：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nmp3r5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nmp3r5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Connected!&#x27;</span>, theme);<br></code></pre></td></tr></table></div></figure><p>你需要一个将这个非响应式逻辑和周围响应式 Effect 隔离开来的方法。</p><h2 id="7-移除-Effect-依赖"><a href="#7-移除-Effect-依赖" class="headerlink" title="7.移除 Effect 依赖"></a>7.移除 Effect 依赖</h2><p>当编写 Effect 时，linter 会验证是否已经将 Effect 读取的每一个响应式值（如 props 和 state）包含在 Effect 的依赖中。这可以确保 Effect 与组件的 props 和 state 保持同步。不必要的依赖可能会导致 Effect 运行过于频繁，甚至产生无限循环。请按照本指南审查并移除 Effect 中不必要的依赖。</p><p><mark>依赖应该和代码保持一致 </mark>：当你编写 Effect 时，无论这个 Effect 要做什么，你首先要明确其 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#the-lifecycle-of-an-effect">生命周期</a>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d29u12lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d29u12lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>        connection.<span class="hljs-title function_">connect</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果你设置 Effect 的依赖是空数组（<code>[]</code>），那么 linter 将会建议合适的依赖：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kg54bhlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kg54bhlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, []); <span class="hljs-comment">/*  &lt;-- 修复这里的依赖！  */</span> <br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomId, setRoomId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;所有&#x27;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        选择聊天室：</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setRoomId(e.target.value)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;所有&quot;</span>&gt;</span>所有<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;旅游&quot;</span>&gt;</span>旅游<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;音乐&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span> <span class="hljs-attr">roomId</span>=<span class="hljs-string">&#123;roomId&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3rqzsplqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3rqzsplqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/*  真正的实现实际上会连接到服务器  */</span> <br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ 连接到“&#x27;</span> + roomId + <span class="hljs-string">&#x27;”房间，在 &#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ 断开“&#x27;</span> + roomId + <span class="hljs-string">&#x27;”房间，在 &#x27;</span> + serverUrl);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>按照 linter 的建议，把它们填进去：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p93jp5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p93jp5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]); <span class="hljs-comment">/*  ✅ 所有依赖已声明  */</span> <br>&#125;<br></code></pre></td></tr></table></div></figure><p><a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values">Effect “反应”响应式值</a> 因为这里的 <code>roomId</code> 是一个响应式值（它可能随重新渲染而改变），所以 linter 会验证你是否将它指定为依赖。如果 <code>roomId</code> 变成不同的值，React 将重新运行 Effect。这可以确保聊天界面与所选房间保持一致，并把变化“反馈”给下拉菜单：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jm1l2klqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jm1l2klqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomId, setRoomId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;所有&#x27;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        选择聊天室：</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setRoomId(e.target.value)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;所有&quot;</span>&gt;</span>所有<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;旅游&quot;</span>&gt;</span>旅游<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;音乐&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span> <span class="hljs-attr">roomId</span>=<span class="hljs-string">&#123;roomId&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vc1o2slqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vc1o2slqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/*  真正的实现实际上会连接到服务器  */</span> <br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ 连接到“&#x27;</span> + roomId + <span class="hljs-string">&#x27;”房间，在 &#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ 断开“&#x27;</span> + roomId + <span class="hljs-string">&#x27;”房间，在 &#x27;</span> + serverUrl);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><mark>当要移除一个依赖时，请证明它不是一个依赖</mark>：注意，你不能“选择” Effect 的依赖。每个被 Effect 所使用的响应式值，必须在依赖中声明。依赖是由 Effect 的代码决定的：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wpt56olqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wpt56olqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123; <span class="hljs-comment">// 这是一个响应式值</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">// Effect 在这里读取响应式值</span><br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]); <span class="hljs-comment">// ✅ 所以你必须在依赖中声明 Effect 使用的响应式值</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p><a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#all-variables-declared-in-the-component-body-are-reactive">响应式值</a> 包括 props 以及所有你直接在组件中声明的变量和函数。由于 <code>roomId</code> 是响应式值，你不能把它从依赖中移除。linter 不允许这样做：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cbwaj7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cbwaj7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, []); <span class="hljs-comment">// 🔴 React Hook useEffect 缺失依赖: &#x27;roomId&#x27;</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>linter 是对的！ 由于 <code>roomId</code> 可能会随时间变化，这会在代码中引入错误。</p><p><strong>移除一个依赖，你需要向 linter 证明其不需要这个依赖</strong>。例如，你可以将 <code>roomId</code> 移出组件，以证明它不是响应的，也不会在重新渲染时改变：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0apcsllqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0apcsllqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&#x27;音乐&#x27;</span>; <span class="hljs-comment">// 不再是响应式值</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, []); <span class="hljs-comment">// ✅ 所有依赖已声明</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在 <code>roomId</code> 不是响应式值（并且不能在重新渲染时改变），那它不就不是依赖：</p><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cw0vw0lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cw0vw0lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>;<br><span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&#x27;音乐&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到 &#123;roomId&#125; 房间！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vat0znlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vat0znlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">serverUrl, roomId</span>) &#123;<br>  <span class="hljs-comment">/*  真正的实现实际上会连接到服务器  */</span> <br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ 连接到“&#x27;</span> + roomId + <span class="hljs-string">&#x27;”房间，在 &#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ 断开“&#x27;</span> + roomId + <span class="hljs-string">&#x27;”房间，在 &#x27;</span> + serverUrl);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这就是为什么你现在可以指定 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#what-an-effect-with-empty-dependencies-means">空（<code>[]</code>）依赖</a>。Effect <strong>真的不</strong> 依赖任何响应式值了，也 <strong>真的不</strong> 需要在组件的 props 或 state 改变时重新运行。</p><p>你可能已经注意到工作流程中有一个模式：</p><ol><li>首先，你 <strong>改变 Effect 的代码</strong> 或响应式值的声明方式。</li><li>然后，你采纳 linter 的建议，调整依赖，以 <strong>匹配你所改变的代码</strong>。</li><li>如果你对依赖不满意，你可以 <strong>回到第一步</strong>（并再次修改代码）。</li></ol><p>最后一部分很重要。<strong>如果你想改变依赖，首先要改变所涉及到的代码</strong>。你可以把依赖看作是 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency">Effect的代码所依赖的所有响应式值的列表</a>。你不要 <strong>选择</strong> 把什么放在这个列表上。该列表 <strong>描述了</strong> 代码。要改变依赖，请改变代码。</p><p>这可能感觉就像解方程一样。你有一个目标（例如，移除一个依赖），你需要“找到”与该目标相匹配的代码。不是每个人都觉得解方程很有趣，写 Effect 也是如此！幸运的是，下面有一些常见的解决方案你可以去尝试。</p><p>如果你有一个已经存在的代码库，你可能会有一些像这样抑制 linter 的代码：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gkjuzglqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gkjuzglqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 🔴 避免像这样抑制 linter 的警告或错误提示：eslint-ignore-next-line react-hooks/exhaustive-deps   */</span> <br>&#125;, []);<br></code></pre></td></tr></table></div></figure><p>当依赖与代码不匹配时，极有可能引入 bug。通过抑制 linter，你是在 Effect 所依赖的值上对 React “撒谎”。</p><hr><p><mark>移除非必需的依赖</mark>：每当你调整 Effect 的依赖以适配代码时，请注意一下当前的依赖。当这些依赖发生变化时，让 Effect 重新运行是否有意义？有时，答案是“不”：</p><ul><li>你可能想在不同的条件下重新执行 Effect 的 <strong>不同部分</strong>。</li><li>你可能想只读取某个依赖的 <strong>最新值</strong>，而不是对其变化做出“反应”。</li><li>依赖可能会因为它的类型是对象或函数而 <strong>无意间</strong> 改变太频繁。</li></ul><p>为了找到正确的解决方案，你需要回答关于 Effect 的几个问题。让我们来看看这些问题。</p><p>你应该考虑的第一件事是，这段代码是否应该成为 Effect。</p><p>想象一个表单，在提交时你将 <code>submitted</code> 状态变量设置为 <code>true</code>，并在 <code>submitted</code> 为 <code>true</code> 时，需要发送 POST 请求并显示通知。你把这个逻辑放在 Effect 内，并根据 <code>submitted</code> 为 <code>true</code> “反应”。</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v2afxhlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v2afxhlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [submitted, setSubmitted] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (submitted) &#123;<br>     <span class="hljs-comment">/*  🔴 避免: Effect 中有特定事件的逻辑  */</span> <br>      <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/register&#x27;</span>);<br>      <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Successfully registered!&#x27;</span>);<br>    &#125;<br>  &#125;, [submitted]);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setSubmitted</span>(<span class="hljs-literal">true</span>);<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>后来，你想通过读取当前的主题值来调整通知信息的样式。因为 <code>theme</code> 是在组件中声明的，所以它是响应式值，你决定把它作为依赖加入：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sa841klqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sa841klqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [submitted, setSubmitted] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (submitted) &#123;<br>      <span class="hljs-comment">/*  🔴 避免: Effect 中有特定事件的逻辑  */</span> <br>      <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/register&#x27;</span>);<br>      <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Successfully registered!&#x27;</span>, theme);<br>    &#125;<br>  &#125;, [submitted, theme]); <span class="hljs-comment">/*  ✅ 所有依赖已声明  */</span> <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setSubmitted</span>(<span class="hljs-literal">true</span>);<br>  &#125;  <br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果这么做，你将引入一个错误。想象一下，你先提交表单，然后切换暗亮主题。当 <code>theme</code> 改变后，Effect 重新运行，这将导致显示两次相同的通知！</p><p><strong>首先，这里的问题是，代码不应该以 Effect 实现</strong>。你想发送这个 POST 请求，并在 <strong>提交表单时显示通知</strong>，这是一个特定的交互。特定的交互请将该逻辑直接放到相应的事件处理程序中：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ogb5imlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ogb5imlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/*  ✅ 好：从事件处理程序调用特定于事件的逻辑  */</span> <br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/register&#x27;</span>);<br>    <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Successfully registered!&#x27;</span>, theme);<br>  &#125; <br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>现在，代码在事件处理程序中，它不是响应式的 —— 所以它只在用户提交表单时运行。阅读更多关于 <a href="https://zh-hans.react.dev/learn/separating-events-from-effects#reactive-values-and-reactive-logic">在事件处理程序和 Effect 之间做出选择</a> 和 <a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect">如何删除不必要的 Effect</a>。</p><p>下一个应该问自己的问题是，Effect 是否在做几件不相关的事情。</p><p>如下例子，你正在实现运输表单，用户需要选择他们的城市和地区。你根据所选的“国家”从服务器上获取“城市”列表，然后在下拉菜单中显示：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3862hulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3862hulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ShippingForm</span>(<span class="hljs-params">&#123; country &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [cities, setCities] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [city, setCity] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> ignore = <span class="hljs-literal">false</span>;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api/cities?country=<span class="hljs-subst">$&#123;country&#125;</span>`</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ignore) &#123;<br>          <span class="hljs-title function_">setCities</span>(json);<br>        &#125;<br>      &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      ignore = <span class="hljs-literal">true</span>;<br>    &#125;;<br>  &#125;, [country]); <span class="hljs-comment">/* ✅ 所有依赖已声明   */</span> <br></code></pre></td></tr></table></div></figure><p>这是一个 <a href="https://zh-hans.react.dev/learn/you-might-not-need-an-effect#fetching-data">在Effect中获取数据</a> 的好例子：<code>cities</code> state 通过网络和 <code>country</code> props 进行“同步”。但你不能在事件处理程序中这样做，因为你需要在 <code>ShippingForm</code> 显示时和 <code>country</code> 发生变化时（不管是哪个交互导致的）立即获取。</p><p>现在我们假设你要为城市区域添加第二个选择框，它应该获取当前选择的 <code>city</code> 的 <code>areas</code>。你也许会在同一个 Effect 中添加第二个 <code>fetch</code> 调用来获取地区列表：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-plrylilqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-plrylilqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ShippingForm</span>(<span class="hljs-params">&#123; country &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [cities, setCities] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [city, setCity] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [areas, setAreas] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> ignore = <span class="hljs-literal">false</span>;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api/cities?country=<span class="hljs-subst">$&#123;country&#125;</span>`</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ignore) &#123;<br>          <span class="hljs-title function_">setCities</span>(json);<br>        &#125;<br>      &#125;);<br>    <span class="hljs-comment">/*  🔴 避免: 单个 Effect 同步两个独立逻辑处理  */</span> <br>    <span class="hljs-keyword">if</span> (city) &#123;<br>      <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api/areas?city=<span class="hljs-subst">$&#123;city&#125;</span>`</span>)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (!ignore) &#123;<br>            <span class="hljs-title function_">setAreas</span>(json);<br>          &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      ignore = <span class="hljs-literal">true</span>;<br>    &#125;;<br>  &#125;, [country, city]); <span class="hljs-comment">/*  ✅ 所有依赖已声明  */</span> <br></code></pre></td></tr></table></div></figure><p>然而，由于 Effect 现在使用 <code>city</code> state 变量，你不得不把 <code>city</code> 加入到依赖中。这又带来一个问题：当用户选择不同的城市时，Effect 将重新运行并调用 <code>fetchCities(country)</code>。这将导致不必要地多次获取城市列表。</p><p><strong>这段代码的问题在于，你在同步两个不同的、不相关的东西</strong>：</p><ol><li>你想要根据 <code>country</code> props 通过网络同步 <code>city</code> state</li><li>你想要根据 <code>city</code> 状态通过网络同步 <code>areas</code> state</li></ol><p>将逻辑分到 2 个 Effect 中，每个 Effect 仅响应其需要同步响应的 props：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-e2qfv1lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-e2qfv1lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ShippingForm</span>(<span class="hljs-params">&#123; country &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [cities, setCities] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> ignore = <span class="hljs-literal">false</span>;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api/cities?country=<span class="hljs-subst">$&#123;country&#125;</span>`</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ignore) &#123;<br>          <span class="hljs-title function_">setCities</span>(json);<br>        &#125;<br>      &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      ignore = <span class="hljs-literal">true</span>;<br>    &#125;;<br>  &#125;, [country]); <span class="hljs-comment">/*  ✅ 所有依赖已声明  */</span><br>  <span class="hljs-keyword">const</span> [city, setCity] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [areas, setAreas] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (city) &#123;<br>      <span class="hljs-keyword">let</span> ignore = <span class="hljs-literal">false</span>;<br>      <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api/areas?city=<span class="hljs-subst">$&#123;city&#125;</span>`</span>)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (!ignore) &#123;<br>            <span class="hljs-title function_">setAreas</span>(json);<br>          &#125;<br>        &#125;);<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        ignore = <span class="hljs-literal">true</span>;<br>      &#125;;<br>    &#125;<br>  &#125;, [city]); <span class="hljs-comment">/*  ✅ 所有依赖已声明  */</span> <br></code></pre></td></tr></table></div></figure><p>现在，第一个 Effect 只在 <code>country</code> 改变时重新运行，而第二个 Effect 在 <code>city</code> 改变时重新运行。你已经按目的把它们分开了：两件不同的事情由两个独立的 Effect 来同步。两个独立的 Effect 有两个独立的依赖，所以它们不会在无意中相互触发。</p><p>最终完成的代码比最初的要长，但是拆分这些 Effect 是非常正确的。<a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process">每个 Effect 应该代表一个独立的同步过程</a>。在这个例子中，删除一个 Effect 并不会影响到另一个 Effect 的逻辑。这意味着他们 <strong>同步不同的事情</strong>，分开他们处理是一件好事。如果你担心重复代码的问题，你可以通过 <a href="https://zh-hans.react.dev/learn/reusing-logic-with-custom-hooks#when-to-use-custom-hooks">提取相同逻辑到自定义 Hook</a> 来提升代码质量。</p><hr><p><mark>是否在读取一些状态来计算下一个状态？ </mark>：每次有新的消息到达时，这个 Effect 会用新创建的数组更新 <code>messages</code> state：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-e0c9jqlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-e0c9jqlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [messages, setMessages] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>    connection.<span class="hljs-title function_">connect</span>();<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">receivedMessage</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">setMessages</span>([...messages, receivedMessage]);<br>    &#125;);<br>    <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>它使用 <code>messages</code> 变量来 <a href="https://zh-hans.react.dev/learn/updating-arrays-in-state">创建一个新的数组</a>：从所有现有的消息开始，并在最后添加新的消息。然而，由于 <code>messages</code> 是一个由 Effect 读取的响应式值，它必须是一个依赖：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zm42aolqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zm42aolqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [messages, setMessages] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>    connection.<span class="hljs-title function_">connect</span>();<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">receivedMessage</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">setMessages</span>([...messages, receivedMessage]);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId, messages]); <span class="hljs-comment">/*  ✅ 所有依赖已声明  */</span> <br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>而让 <code>messages</code> 成为依赖会带来问题。</p><p>每当你收到一条消息，<code>setMessages()</code> 就会使该组件重新渲染一个新的 <code>messages</code> 数组，其中包括收到的消息。然而，由于该 Effect 现在依赖于 <code>messages</code>，这 <strong>也将</strong> 重新同步该 Effect。所以每条新消息都会使聊天重新连接。用户不会喜欢这样！</p><p>为了解决这个问题，不要在 Effect 里面读取 <code>messages</code>。相反，应该将一个 <a href="https://zh-hans.react.dev/reference/react/useState#updating-state-based-the-previous-state">state 更新函数</a> 传递给 <code>setMessages</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5k5i43lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5k5i43lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [messages, setMessages] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>    connection.<span class="hljs-title function_">connect</span>();<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">receivedMessage</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">setMessages</span>(<span class="hljs-function"><span class="hljs-params">msgs</span> =&gt;</span> [...msgs, receivedMessage]);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]); <br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p><strong>注意 Effect 现在根本不读取 <code>messages</code> 变量</strong>。你只需要传递一个更新函数，比如 <code>msgs =&gt; [...msgs, receivedMessage]</code>。React <a href="https://zh-hans.react.dev/learn/queueing-a-series-of-state-updates">将更新程序函数放入队列</a> 并将在下一次渲染期间向其提供 <code>msgs</code> 参数。这就是 Effect 本身不再需要依赖 <code>messages</code> 的原因。修复后，接收聊天消息将不再使聊天重新连接。</p><h2 id="8-使用自定义-Hook-复用逻辑"><a href="#8-使用自定义-Hook-复用逻辑" class="headerlink" title="8.使用自定义 Hook 复用逻辑"></a>8.使用自定义 Hook 复用逻辑</h2><p>React 有一些内置 Hook，例如 <code>useState</code>，<code>useContext</code> 和 <code>useEffect</code>。有时你需要一个用途更特殊的 Hook：例如获取数据，记录用户是否在线或者连接聊天室。虽然 React 中可能没有这些 Hook，但是你可以根据应用需求创建自己的 Hook。</p><hr><p><mark>自定义 Hook：组件间共享逻辑 </mark>：假设你正在开发一款重度依赖网络的应用（和大多数应用一样）。当用户使用应用时网络意外断开，你需要提醒他。你会怎么处理呢？看上去组件需要两个东西：</p><ol><li>一个追踪网络是否在线的 state。</li><li>一个订阅全局 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/online_event"><code>online</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/offline_event"><code>offline</code></a> 事件并更新上述 state 的 Effect。</li></ol><p>这会让组件与网络状态保持 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects">同步</a>。你也许可以像这样开始：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-poj33hlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-poj33hlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">StatusBar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOnline, setIsOnline] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOnline</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOffline</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, handleOnline);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, handleOffline);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, handleOnline);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, handleOffline);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;isOnline ? &#x27;✅ Online&#x27; : &#x27;❌ Disconnected&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>试着开启和关闭网络，注意观察 <code>StatusBar</code> 组件应对你的行为是如何更新的。</p><p>假设现在你想在另一个不同的组件里 <strong>也</strong> 使用同样的逻辑。你希望实现一个保存按钮，每当网络断开这个按钮就会不可用并且显示“Reconnecting…”而不是“Save progress”。</p><p>你可以从复制粘贴 <code>isOnline</code> state 和分支里调用getSor Effect 到 <code>SaveButton</code> 组件开始：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-is3dhclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-is3dhclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">SaveButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOnline, setIsOnline] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOnline</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOffline</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, handleOnline);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, handleOffline);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, handleOnline);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, handleOffline);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSaveClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ Progress saved&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;!isOnline&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSaveClick&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;isOnline ? &#x27;Save progress&#x27; : &#x27;Reconnecting...&#x27;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>如果你关闭网络，可以发现这个按钮的外观变了。</p><p>这两个组件都能很好地工作，但不幸的是他们的逻辑重复了。他们看上去有不同的 <strong>视觉外观</strong>，但你依然想复用他们的逻辑。</p><hr><p><mark>从组件中提取自定义 Hook </mark>：假设有一个内置 Hook <code>useOnlineStatus</code>，它与 <a href="https://zh-hans.react.dev/reference/react/useState"><code>useState</code></a> 和 <a href="https://zh-hans.react.dev/reference/react/useEffect"><code>useEffect</code></a> 相似。那么你就可以简化这两个组件并移除他们之间的重复部分：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zagj0ulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zagj0ulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">StatusBar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnline = <span class="hljs-title function_">useOnlineStatus</span>();<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;isOnline ? &#x27;✅ Online&#x27; : &#x27;❌ Disconnected&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SaveButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnline = <span class="hljs-title function_">useOnlineStatus</span>();<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSaveClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ Progress saved&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;!isOnline&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSaveClick&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;isOnline ? &#x27;Save progress&#x27; : &#x27;Reconnecting...&#x27;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>尽管目前还没有这样的内置 Hook，但是你可以自己写。声明一个 <code>useOnlineStatus</code> 函数，并把组件里早前写的所有重复代码移入该函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-o4qr8dlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-o4qr8dlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">useOnlineStatus</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOnline, setIsOnline] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOnline</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOffline</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, handleOnline);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, handleOffline);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, handleOnline);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, handleOffline);<br>    &#125;;<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> isOnline;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在函数结尾处返回 <code>isOnline</code>。这可以让组件读取到该值：</p><p>App.js</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0ty7uflqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0ty7uflqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useOnlineStatus &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ueOnlineStatus.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">StatusBar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnline = <span class="hljs-title function_">useOnlineStatus</span>();<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;isOnline ? &#x27;✅ Online&#x27; : &#x27;❌ Disconnected&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SaveButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnline = <span class="hljs-title function_">useOnlineStatus</span>();<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSaveClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ Progress saved&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;!isOnline&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSaveClick&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;isOnline ? &#x27;Save progress&#x27; : &#x27;Reconnecting...&#x27;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SaveButton</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StatusBar</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>useOnlineStatus.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rovrgclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rovrgclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useOnlineStatus</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOnline, setIsOnline] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOnline</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOffline</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsOnline</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, handleOnline);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, handleOffline);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, handleOnline);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, handleOffline);<br>    &#125;;<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> isOnline;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>切换网络状态验证一下是否会同时更新两个组件。</p><p>现在组件里没有那么多的重复逻辑了。<strong>更重要的是，组件内部的代码描述的是想要做什么（使用在线状态！），而不是怎么做（通过订阅浏览器事件完成）</strong>。</p><p>当提取逻辑到自定义 Hook 时，你可以隐藏如何处理外部系统或者浏览器 API 这些乱七八糟的细节。组件内部的代码表达的是目标而不是具体实现。</p><hr><p><mark>Hook 的名称必须永远以 <code>use</code> 开头 </mark>：React 应用是由组件构成，而组件由内置或自定义 Hook 构成。可能你经常使用别人写的自定义 Hook，但偶尔也要自己写！</p><p>你必须遵循以下这些命名公约：</p><ol><li><strong>React 组件名称必须以大写字母开头</strong>，比如 <code>StatusBar</code> 和 <code>SaveButton</code>。React 组件还需要返回一些 React 能够显示的内容，比如一段 JSX。</li><li><strong>Hook 的名称必须以 <code>use</code> 开头，然后紧跟一个大写字母</strong>，就像内置的 <a href="https://zh-hans.react.dev/reference/react/useState"><code>useState</code></a> 或者本文早前的自定义 <code>useOnlineStatus</code> 一样。Hook 可以返回任意值。</li></ol><p>这个公约保证你始终能一眼识别出组件并且知道它的 state，Effect 以及其他的 React 特性可能“隐藏”在哪里。例如如果你在组件内部看见 <code>getColor()</code> 函数调用，就可以确定它里面不可能包含 React state，因为它的名称没有以 <code>use</code> 开头。但是像 <code>useOnlineStatus()</code> 这样的函数调用就很可能包含对内部其他 Hook 的调用！</p><p>如果你为 <a href="https://zh-hans.react.dev/learn/editor-setup#linting">React 配置了</a> 代码检查工具，它会强制执行这个命名公约。现在滑动到上面的 sandbox，并将 <code>useOnlineStatus</code> 重命名为 <code>getOnlineStatus</code>。注意此时代码检查工具将不会再允许你在其内部调用 <code>useState</code> 或者 <code>useEffect</code>。只有 Hook 和组件可以调用其他 Hook！</p><hr><p><mark>渲染期间调用的所有函数都应该以 use 前缀开头么？ </mark>：不。没有 <strong>调用</strong> Hook 的函数不需要 <strong>变成</strong> Hook。</p><p>如果函数没有调用任何 Hook，请避免使用 <code>use</code> 前缀。 而是 <strong>不带</strong> <code>use</code> 前缀把它当成常规函数去写。例如下面的 <code>useSorted</code>  没有调用 Hook，所以叫它 <code>getSorted</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l4rwwylqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l4rwwylqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 🔴 Avoid: 没有调用其他Hook的Hook</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useSorted</span>(<span class="hljs-params">items</span>) &#123;<br>  <span class="hljs-keyword">return</span> items.<span class="hljs-title function_">slice</span>().<span class="hljs-title function_">sort</span>();<br>&#125;<br><span class="hljs-comment">// ✅ Good: 没有使用Hook的常规函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSorted</span>(<span class="hljs-params">items</span>) &#123;<br>  <span class="hljs-keyword">return</span> items.<span class="hljs-title function_">slice</span>().<span class="hljs-title function_">sort</span>();<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这保证你的代码可以在包含条件语句在内的任何地方调用这个常规函数：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-km58kclqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-km58kclqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; items, shouldSort &#125;</span>) &#123;<br>  <span class="hljs-keyword">let</span> displayedItems = items;<br>  <span class="hljs-keyword">if</span> (shouldSort) &#123;<br>    <span class="hljs-comment">/*  ✅ 在条件分支里调用getSorted()是没问题的，因为它不是Hook  */</span> <br>    displayedItems = <span class="hljs-title function_">getSorted</span>(items);<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>哪怕内部只使用了一个 Hook，你也应该给这个函数加 <code>use</code> 前缀（让它成为一个 Hook）：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ph8si1lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ph8si1lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/*  ✅ Good: 一个使用了其他Hook的Hook  */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useAuth</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">Auth</span>);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>技术上 React 对此并不强制要求。原则上你可以写出不调用其他 Hook 的 Hook。但这常常会难以理解且受限，所以最好避免这种方式。但是它在极少数场景下可能是有益的。例如函数目前也许并没有使用任何 Hook，但是你计划未来在该函数内部添加一些 Hook 调用。那么使用 <code>use</code> 前缀命名就很有意义：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mem5zwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mem5zwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/*  ✅ Good: 之后可能使用其他Hook的Hook  */</span> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useAuth</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/*  <span class="hljs-doctag">TODO:</span> 当认证功能实现以后，替换这一行：  */</span> <br>  <span class="hljs-comment">/*  返回 useContext(Auth)；  */</span> <br>  <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">TEST_USER</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>接下来组件就不能在条件语句里调用这个函数。当你在内部实际添加了 Hook 调用时，这一点将变得很重要。如果你（现在或者之后）没有计划在内部使用 Hook，请不要让它变成 Hook。</p><hr><p><mark>自定义 Hook 共享的是状态逻辑，而不是状态本身</mark>：之前的例子里，当你开启或关闭网络时，两个组件一起更新了。但是两个组件共享 state 变量 <code>isOnline</code> 这种想法是错的。看这段代码：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-aky043lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-aky043lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">StatusBar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnline = <span class="hljs-title function_">useOnlineStatus</span>();<br>  <span class="hljs-comment">/*    */</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SaveButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> isOnline = <span class="hljs-title function_">useOnlineStatus</span>();<br>  <span class="hljs-comment">/*    */</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>它的工作方式和你之前提取的重复代码一模一样：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a04x4xlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a04x4xlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">StatusBar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOnline, setIsOnline] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/*    */</span><br>  &#125;, []);<br>  <span class="hljs-comment">/*    */</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SaveButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOnline, setIsOnline] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>   <span class="hljs-comment">/*    */</span><br>  &#125;, []);<br>  <span class="hljs-comment">/*    */</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>这是完全独立的两个 state 变量和 Effect！只是碰巧同一时间值一样，因为你使用了相同的外部值同步两个组件（无论网络是否开启）。</p><p>为了更好的说明这一点，我们需要一个不同的示例。看下面的 <code>Form</code> 组件：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-jbpxuwlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-jbpxuwlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [firstName, setFirstName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Mary&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [lastName, setLastName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;Poppins&#x27;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFirstNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setFirstName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleLastNameChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setLastName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        First name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;firstName&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleFirstNameChange&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Last name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;lastName&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleLastNameChange&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Good morning, &#123;firstName&#125; &#123;lastName&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>每个表单域都有一部分重复的逻辑：</p><ol><li>都有一个 state（<code>firstName</code> 和 <code>lastName</code>）。</li><li>都有 change 事件的处理函数（<code>handleFirstNameChange</code> 和 <code>handleLastNameChange</code>）。</li><li>都有为输入框指定 <code>value</code> 和 <code>onChange</code> 属性的 JSX。</li></ol><p>你可以提取重复的逻辑到自定义 Hook <code>useFormInput</code>：</p><p>useFormInput.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b5ckkblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b5ckkblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useFormInput</span>(<span class="hljs-params">initialValue</span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(initialValue);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-title function_">setValue</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> inputProps = &#123;<br>    <span class="hljs-attr">value</span>: value,<br>    <span class="hljs-attr">onChange</span>: handleChange<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> inputProps;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-uoi9b7lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-uoi9b7lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useFormInput &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useFormInput.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> firstNameProps = <span class="hljs-title function_">useFormInput</span>(<span class="hljs-string">&#x27;Mary&#x27;</span>);<br>  <span class="hljs-keyword">const</span> lastNameProps = <span class="hljs-title function_">useFormInput</span>(<span class="hljs-string">&#x27;Poppins&#x27;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        First name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> &#123;<span class="hljs-attr">...firstNameProps</span>&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Last name:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> &#123;<span class="hljs-attr">...lastNameProps</span>&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Good morning, &#123;firstNameProps.value&#125; &#123;lastNameProps.value&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>注意它只声明了 <strong>一个</strong> state 变量，叫做 <code>value</code>。</p><p>但 <code>Form</code> 组件调用了 <strong>两次</strong> <code>useFormInput</code>：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6byfydlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6byfydlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> firstNameProps = <span class="hljs-title function_">useFormInput</span>(<span class="hljs-string">&#x27;Mary&#x27;</span>);<br>  <span class="hljs-keyword">const</span> lastNameProps = <span class="hljs-title function_">useFormInput</span>(<span class="hljs-string">&#x27;Poppins&#x27;</span>);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>这就是为什么它工作的时候像声明了两个单独的 state 变量！</p><p><strong>自定义 Hook 共享的只是状态逻辑而不是状态本身。对 Hook 的每个调用完全独立于对同一个 Hook 的其他调用</strong>。这就是上面两个 sandbox 结果完全相同的原因。如果愿意，你可以划上去进行比较。提取自定义 Hook 前后组件的行为是一致的。</p><p>当你需要在多个组件之间共享 state 本身时，需要 <a href="https://zh-hans.react.dev/learn/sharing-state-between-components">将变量提升并传递下去</a>。</p><hr><p><mark>在 Hook 之间传递响应值</mark>：每当组件重新渲染，自定义 Hook 中的代码就会重新运行。这就是组件和自定义 Hook 都 <a href="https://zh-hans.react.dev/learn/keeping-components-pure">需要是纯函数</a> 的原因。我们应该把自定义 Hook 的代码看作组件主体的一部分。</p><p>由于自定义 Hook 会随着组件一起重新渲染，所以组件可以一直接收到最新的 props 和 state。想知道这意味着什么，那就看看这个聊天室的示例。修改 ServeUrl 或者 roomID：</p><p>notifications.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-41c00slqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-41c00slqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Toastify</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;toastify-js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;toastify-js/src/toastify.css&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showNotification</span>(<span class="hljs-params">message, theme = <span class="hljs-string">&#x27;dark&#x27;</span></span>) &#123;<br>  <span class="hljs-title class_">Toastify</span>(&#123;<br>    <span class="hljs-attr">text</span>: message,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>,<br>    <span class="hljs-attr">gravity</span>: <span class="hljs-string">&#x27;top&#x27;</span>,<br>    <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;right&#x27;</span>,<br>    <span class="hljs-attr">style</span>: &#123;<br>      <span class="hljs-attr">background</span>: theme === <span class="hljs-string">&#x27;dark&#x27;</span> ? <span class="hljs-string">&#x27;black&#x27;</span> : <span class="hljs-string">&#x27;white&#x27;</span>,<br>      <span class="hljs-attr">color</span>: theme === <span class="hljs-string">&#x27;dark&#x27;</span> ? <span class="hljs-string">&#x27;white&#x27;</span> : <span class="hljs-string">&#x27;black&#x27;</span>,<br>    &#125;,<br>  &#125;).<span class="hljs-title function_">showToast</span>();<br>&#125;<br></code></pre></td></tr></table></div></figure><p>chat.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x47uvblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x47uvblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createConnection</span>(<span class="hljs-params">&#123; serverUrl, roomId &#125;</span>) &#123;<br>  <span class="hljs-comment">/*  真正的实现会实际连接到服务器  */</span> <br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> serverUrl !== <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Expected serverUrl to be a string. Received: &#x27;</span> + serverUrl);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> roomId !== <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Expected roomId to be a string. Received: &#x27;</span> + roomId);<br>  &#125;<br>  <span class="hljs-keyword">let</span> intervalId;<br>  <span class="hljs-keyword">let</span> messageCallback;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;✅ Connecting to &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; room at &#x27;</span> + serverUrl + <span class="hljs-string">&#x27;...&#x27;</span>);<br>      <span class="hljs-built_in">clearInterval</span>(intervalId);<br>      intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (messageCallback) &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span>) &#123;<br>            <span class="hljs-title function_">messageCallback</span>(<span class="hljs-string">&#x27;hey&#x27;</span>)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">messageCallback</span>(<span class="hljs-string">&#x27;lol&#x27;</span>);<br>          &#125;<br>        &#125;<br>      &#125;, <span class="hljs-number">3000</span>);<br>    &#125;,<br>    <span class="hljs-title function_">disconnect</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">clearInterval</span>(intervalId);<br>      messageCallback = <span class="hljs-literal">null</span>;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❌ Disconnected from &quot;&#x27;</span> + roomId + <span class="hljs-string">&#x27;&quot; room at &#x27;</span> + serverUrl + <span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">on</span>(<span class="hljs-params">event, callback</span>) &#123;<br>      <span class="hljs-keyword">if</span> (messageCallback) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Cannot add the handler twice.&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (event !== <span class="hljs-string">&#x27;message&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Only &quot;message&quot; event is supported.&#x27;</span>);<br>      &#125;<br>      messageCallback = callback;<br>    &#125;,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>ChatRoom.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fubvz1lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fubvz1lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createConnection &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chat.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; showNotification &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./notifications.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> options = &#123;<br>      <span class="hljs-attr">serverUrl</span>: serverUrl,<br>      <span class="hljs-attr">roomId</span>: roomId<br>    &#125;;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(options);<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">msg</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;New message: &#x27;</span> + msg);<br>    &#125;);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId, serverUrl]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Server URL:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;serverUrl&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setServerUrl(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to the &#123;roomId&#125; room!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>App.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dnf2pslqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dnf2pslqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ChatRoom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ChatRoom.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomId, setRoomId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;general&#x27;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Choose the chat room:&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setRoomId(e.target.value)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;general&quot;</span>&gt;</span>general<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;travel&quot;</span>&gt;</span>travel<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span>music<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChatRoom</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">roomId</span>=<span class="hljs-string">&#123;roomId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>当你修改 <code>serverUrl</code> 或者 <code>roomId</code> 时，Effect 会对 <a href="https://zh-hans.react.dev/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values">你的修改做出“响应”</a> 并重新同步。你可以通过每次修改 Effect 依赖项时聊天室重连的控制台消息来区分。</p><p>现在将 Effect 代码移入自定义 Hook：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y6nrgulqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y6nrgulqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useChatRoom</span>(<span class="hljs-params">&#123; serverUrl, roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> options = &#123;<br>      <span class="hljs-attr">serverUrl</span>: serverUrl,<br>      <span class="hljs-attr">roomId</span>: roomId<br>    &#125;;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(options);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">msg</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;New message: &#x27;</span> + msg);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId, serverUrl]);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这让 <code>ChatRoom</code> 组件调用自定义 Hook，而不需要担心内部怎么工作：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6sl5nblqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6sl5nblqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>);<br>  <span class="hljs-title function_">useChatRoom</span>(&#123;<br>    <span class="hljs-attr">roomId</span>: roomId,<br>    <span class="hljs-attr">serverUrl</span>: serverUrl<br>  &#125;);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Server URL:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;serverUrl&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setServerUrl(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to the &#123;roomId&#125; room!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这看上去简洁多了（但是它做的是同一件事）！</p><p>注意逻辑 <strong>仍然响应</strong> props 和 state 的变化。尝试编辑 server URL 或选中的房间：</p><p>ChatRoom.js：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-uhaydrlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-uhaydrlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useChatRoom &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useChatRoom.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>);<br><br>  <span class="hljs-title function_">useChatRoom</span>(&#123;<br>    <span class="hljs-attr">roomId</span>: roomId,<br>    <span class="hljs-attr">serverUrl</span>: serverUrl<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        Server URL:</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;serverUrl&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setServerUrl(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to the &#123;roomId&#125; room!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></div></figure><p>注意你如何获取 Hook 的返回值：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ga9tw5lqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ga9tw5lqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>);<br>  <span class="hljs-title function_">useChatRoom</span>(&#123;<br>    <span class="hljs-attr">roomId</span>: roomId,<br>    <span class="hljs-attr">serverUrl</span>: serverUrl<br>  &#125;);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>并把它作为输入传给另一个 Hook：</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nf5nodlqv4htb1" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nf5nodlqv4htb1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [serverUrl, setServerUrl] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;https://localhost:1234&#x27;</span>);<br>  <span class="hljs-title function_">useChatRoom</span>(&#123;<br>    <span class="hljs-attr">roomId</span>: roomId,<br>    <span class="hljs-attr">serverUrl</span>: serverUrl<br>  &#125;);<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></div></figure><p>每次 <code>ChatRoom</code> 组件重新渲染，它就会传最新的 <code>roomId</code> 和 <code>serverUrl</code> 到你的 Hook。这就是每当重新渲染后他们的值不一样时你的 Effect 会重连聊天室的原因。（如果你曾经使用过音视频处理软件，像这样的 Hook 链也许会让你想起音视频效果链。好似 <code>useState</code> 的输出作为 <code>useChatRoom</code> 的输入）。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五.Typora使用指南</title>
    <link href="/2023/10/16/Typora%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2023/10/16/Typora%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>Typora 官网：<a href="https://typoraio.cn/">https://typoraio.cn/</a></p><p>Typora 主题：<a href="https://theme.typora.io/">https://theme.typora.io/</a></p><hr><p>激活 Typora1.7 版本：</p><ol><li><p>首先下载三个文件（百度网盘）：</p><img src="image-20231102102909272.png" alt="image-20231102102909272" style="zoom:50%;" /></li><li><p>运行typora-setup-x64.exe，复制另外两个文件到安装包的路径下：</p><img src="image-20231102102505005.png" alt="image-20231102102505005" style="zoom:50%;" /></li><li><p>在当前安装包路径下打开cmd运行license-gen.exe：</p><img src="image-20231102102550661.png" alt="image-20231102102550661" style="zoom:50%;" /></li><li><p>用管理员身份运行TyporaCrack.exe</p></li><li><p>运行完成后输入邮箱地址和序列号（即激活码）：</p><img src="image-20231102102833246.png" alt="image-20231102102833246" style="zoom:30%;" /></li><li><p>激活成功：</p><img src="image-20231102102813692.png" alt="image-20231102102813692" style="zoom:30%;" /></li></ol><p>更新themes和conf文件夹【打开高级设置】：</p><img src="image-20231103103633725.png" alt="image-20231103103633725" style="zoom:50%;" /><p>修改偏好设置：</p><img src="image-20231103103533030.png" alt="image-20231103103533030" style="zoom:50%;" /><hr><p>shift+F12 调出控制台：</p><img src="image-20231016095537228.png" alt="image-20231016095537228" style="zoom:50%;" /><hr><p>在需要分页的时候，添加分页符，导出 PDF 时可以进行分页：</p><ul><li><code>---</code></li><li><code>***</code></li><li><code>_____</code></li></ul><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s0dhuflqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s0dhuflqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*手动分页控制：需要手动添加分页符， &#x27;----&#x27;、&#x27;***&#x27; 、&#x27;_______&#x27; */</span><br><span class="hljs-keyword">@media</span> print, (<span class="hljs-attribute">overflow-block</span>: paged) <span class="hljs-keyword">or</span> (<span class="hljs-attribute">overflow-block</span>: optional-paged) &#123;<br>  hr &#123;<br>    <span class="hljs-attribute">page-break-after</span>: always; <span class="hljs-comment">/* CSS 2 */</span><br>    <span class="hljs-attribute">break-after</span>: region; <span class="hljs-comment">/* CSS 3+ */</span><br>    <span class="hljs-comment">/* minimal layout disruption: */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0.1mm</span>;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>仅支持普通的<code>html</code>标签，不支持<code>class</code>、<code>id</code>、<code>data-*</code>等自定义属性。</p><hr><p>高亮快捷键：</p><img src="image-20231103103407067.png" alt="image-20231103103407067" style="zoom:50%;" /><img src="image-20231103103444079.png" alt="image-20231103103444079" style="zoom:50%;" />]]></content>
    
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四.git常用命令</title>
    <link href="/2023/09/06/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/09/06/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Git文档：<a href="https://git-scm.com/docs">https://git-scm.com/docs</a></p><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>推送代码：git add .           git commit -m &quot;1&quot;             git push</p><p>拉取代码：</p><ol><li>git checkout master</li><li>git pull</li><li>git checkout dev-lan777</li><li>git merge master —no-commit</li><li>git push【sync changes】</li><li>npm run dev</li></ol><p>创建分支：</p><ol><li>git checkout master</li><li>git pull</li><li>git checkout -b the-name-of-my-branch</li></ol><p>合并分支：</p><ol><li>git add .</li><li>git commit -m &quot;1&quot;</li><li>git push</li><li>git checkout master</li><li>git pull</li><li>git merge dev-lan777 —no-commit<ol><li>【处理merge冲突的代码后保存】</li><li>git add .</li><li>git commit -m &quot;2&quot;</li></ol></li><li>git push【maintainer角色】</li></ol><p>打包部署：</p><ol><li>npm run build:test</li><li>git add .</li><li>git commit -m &quot;2&quot;</li><li>git push</li></ol><p>删除文件夹：git bash命令：rm -rf node_modules</p><p>切换分支：git checkout -b dev-lan777</p><p>暂存修改：git stash</p><ul><li><code>git stash pop</code> 的作用是将最近一次暂存的修改应用到当前分支，并将该暂存记录从存储堆栈中移除。它的执行过程如下：<ol><li>将最近一次的暂存修改从存储堆栈中取出。</li><li>将这些修改应用到当前所在分支上。</li><li>如果应用成功，则将该暂存记录从存储堆栈中移除。</li></ol></li></ul><p>查看日志：git log —oneline</p><p>git rebase dev-lan777</p><p>上下箭头返回之前的git命令</p><p>git回退到commit_id的状态：</p><ol><li>git log：查看commit的历史记录及其对应的commit_id</li><li>git reset --hard commit_id</li><li>git push origin HEAD --force：使本地和远程的内容都回退到commit_id对应的状态。</li></ol><img src="image-20231029004846153.png" alt="image-20231029004846153" style="zoom:50%;" /><p><code>Auto packing the repository in background for optimum performance.See &quot;git help gc&quot; for manual housekeeping.</code>：</p><ol><li>git fsck --lost-found：出现很多&quot;dangling commit&quot;</li><li>git gc --prune&#x3D;now</li></ol><p>git推送lan-blog中的fluid主题文件夹：推送fluid后再回到lan-blog</p><ol><li>cd themes&#x2F;fluid</li><li>git add .</li><li>git commit -m &quot;1&quot;</li><li>git push</li></ol><p><code>feat</code> 是 “Feature”的缩写，代表新的功能特性。当你想要添加一个新的功能特性，或是改进现有的功能特性时，应当使用 <code>feat</code> 这个前缀来描述你的提交。</p><p><a href="https://ruanyifeng.com/blog/2020/04/git-cherry-pick.html">https://ruanyifeng.com/blog/2020/04/git-cherry-pick.html</a></p><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><p>Github仓库导入到Gitee：</p><img src="image-20231106151706877.png" alt="image-20231106151706877" style="zoom:50%;" /><p>授权Github后：</p><img src="image-20231106151617948.png" alt="image-20231106151617948" style="zoom:50%;" /><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><img src="image-20231012112042094.png" alt="image-20231012112042094" style="zoom:50%;" /><p>原因：在分支创建时，使用了与远程不一致的分支名。</p><p>解决方法：修改<code>git push</code>默认规则<code>git config push.default upstream</code></p><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">OpenSSL SSL_read: Connection was reset, errno 10054</p><p> 解决方法：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n058eslqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n058eslqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.sslVerify <span class="hljs-string">&quot;false&quot;</span><br>git config --global https.sslVerify <span class="hljs-string">&quot;false&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p><code>fatal: unable to access &#39;https://github.com/Chanzhaoyu/chatgpt-web.git/&#39;: Failed to connect to github.com port 443 after 21343 ms: Timed out</code>：</p><img src="image-20231123171826860.png" alt="image-20231123171826860" style="zoom:50%;" /><p>打开使用代码服务器：</p><img src="image-20231123171855262.png" alt="image-20231123171855262" style="zoom:40%;" /><p>查看原代理设置：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ba0vb2lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ba0vb2lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --get http.proxy<br>git config --get https.proxy<br></code></pre></td></tr></table></div></figure><p> 取消原代理设置：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-r066holqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-r066holqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></div></figure><p>刷新 DNS 解析缓存：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wqao83lqv4htaz" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wqao83lqv4htaz"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig /flushdns<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三.暑期实习问题总结</title>
    <link href="/2023/08/27/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/27/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><mark>debugger</mark></p><p>vscode中Ctrl+shift+P调出控制面板：</p><img src="image-20231009155049000.png" alt="image-20231009155049000" style="zoom:50%;" /><p>Ctrl+P：通过文件名搜索文件路径</p><hr><p>Chrome插件：<code>Vue.js devtools</code></p><img src="image-20231101175926473.png" alt="image-20231101175926473" style="zoom:50%;" /><hr><p>Vue代码模板：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dvx0d4lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dvx0d4lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>    <br>&lt;/script&gt;<br><br>&lt;template&gt;<br><br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>在vscode管理中点击用户代码片段code snippets：文件→首选项→Configure Use Snippets→New Global Snippets file→输入名称</p><p>借助<code>https://snippet-generator.app/</code>生成代码即可：</p><img src="image-20230927172325096.png" alt="image-20230927172325096" style="zoom:50%;" /><p class="note note-danger">注意要加上{}</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-cp4rlxlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-cp4rlxlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;v3&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;v3&quot;</span>,<br>      <span class="hljs-string">&quot;body&quot;</span>: [<br>        <span class="hljs-string">&quot;&lt;script setup lang=\&quot;ts\&quot;&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;    &quot;</span>,<br>        <span class="hljs-string">&quot;&lt;/script&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;template&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;/template&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;/style&gt;&quot;</span><br>      ],<br>      <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;v3&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在文件中使用：v3回车</p><hr><p>VScode插件：</p><ul><li>TypeScript Vue Plugin(Volar)</li><li>Vue Language Features(Volar)</li><li>ESLint：JavaScript 代码检查工具</li><li>Prettier-Code formatter：代码缩进应该使用 tabs 还是空格。Prettier根据预设配置的规则重新格式化代码，以保证代码整洁。运行 Prettier，你的所有 tabs 都将转换为空格，同时缩进、引号等也都将根据你的配置而改变。理想状态下，当你保存文件时，Prettier 会自动执行格式化操作。</li><li>Prettier ESLint</li><li>px2rem</li><li>Auto Close Tag</li><li>Auto Complete Tag</li><li>Auto Rename Tag</li><li>Path Intellisense</li><li>vscode-icons</li></ul><p>点击Vue Language Features(Volar)的扩展设置：自动补全ref声明的变量的.value：</p><img src="image-20231122170831930.png" alt="image-20231122170831930" style="zoom:50%;" /><img src="value.gif" alt="value" style="zoom:50%;" /><hr><h1 id="一-Form组件替换"><a href="#一-Form组件替换" class="headerlink" title="一.Form组件替换"></a>一.Form组件替换</h1><p>el-form表单二次封装：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-owjumelqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-owjumelqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;50px&quot;</span> <span class="hljs-attr">label-position</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;accessInfo.isOwner&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;起始节点&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;结束节点&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5g52v6lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5g52v6lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">:formObj</span>=<span class="hljs-string">&quot;formObj&quot;</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">&quot;formData&quot;</span> <span class="hljs-attr">:labelWidth</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">:labelPosition</span>=<span class="hljs-string">&quot;&#x27;top&#x27;&quot;</span> <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;&#x27;mini&#x27;&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;accessInfo.isOwner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">fromid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.fromid&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">toid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.toid&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dgn8krlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dgn8krlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br>&lt;script&gt;<br>    import Form from &#x27;@/components/common/Form&#x27;<br>    export default&#123;<br>        components:&#123;<br>            Form<br>        &#125;,<br>        data()&#123;<br>            return&#123;<br>                formData:&#123;<br>                    fromid: &#x27;&#x27;,<br>                    toid: &#x27;&#x27;<br>                &#125;,<br>                formObj:[<br>                    &#123;<br>                        specialFormItem: true,<br>                        specialName: &quot;fromid&quot;,<br>                        label: &quot;起始节点&quot;<br>                    &#125;,<br>                    &#123;<br>                        specialFormItem: true,<br>                        specialName: &quot;toid&quot;,<br>                        label: &quot;结束节点&quot;<br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><br/><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2mx9u5lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2mx9u5lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;名称&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.name&quot;</span> <span class="hljs-attr">:maxlength</span>=<span class="hljs-string">&quot;60&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;描述&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.desc&quot;</span> <span class="hljs-attr">:maxlength</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">:rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;类型&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.type&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择类型&quot;</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;wdith:100%&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;HIVE&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;SQL&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;数据库&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">filterable</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.hiveDatabase&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;formData.table=&#x27;&#x27;&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择数据库&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.database&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.database&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in hiveDatabaseList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-r5lphzlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-r5lphzlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">formObj</span>:[<br>    &#123;<br>        <span class="hljs-attr">input</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;名称&#x27;</span>,<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br>        <span class="hljs-attr">maxlength</span>: <span class="hljs-number">60</span>,<br>        <span class="hljs-attr">inputStyle</span>: <span class="hljs-string">&#x27;width: 100%&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">textarea</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;描述&#x27;</span>,<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;desc&#x27;</span>,<br>        <span class="hljs-attr">maxlength</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">inputStyle</span>: <span class="hljs-string">&#x27;width: 100%&#x27;</span>,<br>        <span class="hljs-attr">autosize</span>: &#123;<span class="hljs-attr">minRows</span>: <span class="hljs-number">5</span>&#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">select</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;类型&#x27;</span>,<br>        <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;请选择类型&#x27;</span>,<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;type&#x27;</span>,<br>        <span class="hljs-attr">maxlength</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">inputStyle</span>: <span class="hljs-string">&#x27;width: 100%&#x27;</span>,<br>        <span class="hljs-attr">options</span>: [<br>            &#123;<br>                <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;HIVE&#x27;</span>,<br>                <span class="hljs-attr">value</span>: <span class="hljs-number">0</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;SQL&#x27;</span>,<br>                <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>            &#125;,<br>        ]<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">searchSelect</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;数据库&#x27;</span>,<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;hiveDatabase&#x27;</span>,<br>        <span class="hljs-attr">options</span>: [],<br>        <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;请选择数据库&#x27;</span><br>    &#125;,<br>]<br></code></pre></td></tr></table></div></figure><br/><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-k4d73llqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-k4d73llqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;ruleForm&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ruleForm&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;项目名称&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;ruleForm.name&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;isSharedProject==0 ? &#x27;请输入共享项目名称&#x27; : &#x27;请输入本地项目名称&#x27;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-quadn0lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-quadn0lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">:formObj</span>=<span class="hljs-string">&quot;formObj&quot;</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">&quot;ruleForm&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ruleForm&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ywaab0lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ywaab0lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br>&lt;script&gt;<br>import Form from &#x27;@/components/common/Form&#x27;<br>    export default&#123;<br>        components:&#123;<br>            Form<br>        &#125;,<br>        data()&#123;<br>            return&#123;<br>                ruleForm: &#123;<br>                    name: &#x27;&#x27;,<br>                &#125;,<br>                rules:&#123;<br>                    name: [<br>                        &#123;<br>                            required: true,<br>                            message: &#x27;请输入项目名称&#x27;,<br>                            trigger: &#x27;blur&#x27;,<br>                        &#125;,<br>                    ],<br>                &#125;,<br>                formObj:[<br>                    &#123;<br>                        input: true,<br>                        label: &#x27;项目名称&#x27;,<br>                        prop: &#x27;name&#x27;,<br>                        placeholder: &quot;&quot;,<br>                        size: &quot;mini&quot;,<br>                        inputStyle: &quot;width: 100%&quot;<br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            updatePlaceholder()&#123;<br>                this.formObj[0].placeholder=this.isSharedProject==0 ? &#x27;请输入共享项目名称&#x27; : &#x27;请输入本地项目名称&#x27;<br>            &#125;,<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><br/><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tako0olqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tako0olqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&#x27;formData&#x27;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#x27;mini&#x27;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;formNode&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;item in formList&#x27;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;item.key&#x27;</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">&#x27;item.desc&#x27;</span> <span class="hljs-attr">:prop</span>=<span class="hljs-string">&#x27;item.key&#x27;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&#x27;item.rules&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;formData[item.key]&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;textarea&#x27;</span> <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;`Type-$&#123;(item.type&#125;\nFormat -JSON`&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>→</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8hivlxlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8hivlxlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Form :formObj=&quot;formObj&quot; :formData=&quot;formData&quot; :size=&quot;&#x27;mini&#x27;&quot; ref=&quot;formNode&quot;&gt;<br>&lt;/Form&gt;<br></code></pre></td></tr></table></div></figure><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ogknm0lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ogknm0lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br>&lt;script&gt;<br>import Form from &#x27;@/components/common/Form&#x27;<br>    export default&#123;<br>        components:&#123;<br>            Form<br>        &#125;,<br>        data()&#123;<br>            return&#123;<br>                formData,<br>                formList,<br>                formObj:[]<br>            &#125;<br>        &#125;,<br>        created()&#123;<br>            this.updateFormObj()<br>        &#125;,<br>        methods: &#123;<br>            updateFormObj()&#123;<br>                this.formObj=this.formList.map(item=&gt;&#123;<br>                    return&#123;<br>                        key: item.key,<br>                        label: item.desc,<br>                        prop: item.key,<br>                        rules: item.rules,<br>                        textarea: true,<br>                        prop: item.key,<br>                        placeholder: `Type-$&#123;(item.type&#125;\nFormat -JSON`<br>                    &#125;<br>                &#125;)<br>            &#125;,<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><h1 id="二-LLM"><a href="#二-LLM" class="headerlink" title="二.LLM"></a>二.LLM</h1><p class="note note-success" style="border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;">Ctrl+,打开vscode的设置</p><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p>Vite是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：</p><ul><li>一个开发服务器，它基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ES 模块</a> 提供了 <a href="https://cn.vitejs.dev/guide/features.html">丰富的内建功能</a>，如速度快到惊人的 <a href="https://cn.vitejs.dev/guide/features.html#hot-module-replacement">模块热更新（HMR）</a>。</li><li>一套构建指令，它使用 <a href="https://rollupjs.org/">Rollup</a> 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li></ul><p>在 Vite 中，<mark>defineConfig</mark>是一个函数，用于定义和导出 Vite 的配置。它主要用于创建一个合法的配置对象，以供 Vite 使用。</p><p>创建vue+vite+ts项目：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xtmm48lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xtmm48lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create vite@latest<br></code></pre></td></tr></table></div></figure><p>选择<code>Vue</code>和<code>Customize with create-vue</code>：</p><img src="image-20231125155148959.png" alt="image-20231125155148959" style="zoom:50%;" /><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6ks0lglqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6ks0lglqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> vite-project-vue<br>npm install<br>npm run format<br>npm run dev<br></code></pre></td></tr></table></div></figure><img src="image-20231125155909311.png" alt="image-20231125155909311" style="zoom:50%;" /><img src="image-20231125160006850.png" alt="image-20231125160006850" style="zoom:50%;" /><p>配置别名：设置@指向src目录，添加到tsconfig.json文件中。</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rk7dr9lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rk7dr9lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;composite&quot;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,<br>            <span class="hljs-string">&quot;paths&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;@/*&quot;</span>: [<span class="hljs-string">&quot;./src/*&quot;</span>]<br>            &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231125191448935.png" alt="image-20231125191448935" style="zoom:50%;" /><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">报错：找不到模块“path”或其相应的类型声明</p><img src="image-20231010094751290.png" alt="image-20231010094751290" style="zoom:43%;" /><p>因为path模块是node.js内置的功能，但是node.js本身并不支持typescript，所以直接在typescript项目里使用是不行的。</p><p>解决方法：安装<code>@types/node</code></p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wydayelqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wydayelqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install @types/node --save-dev<br></code></pre></td></tr></table></div></figure><p>重启项目后生效</p><hr><p>报错<code>Component name &quot;home&quot;should always be multi-word.eslint(vue/multi-word-component-names</code>：</p><p>在.eslintrc.cjs文件中加上：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vazd4vlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vazd4vlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-comment">// 关闭名称校验</span><br>    <span class="hljs-string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="hljs-string">&quot;off&quot;</span><br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">控制台警告：[Vue warn]: Failed to resolve component: router-linkIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement. at < App > </p><img src="image-20231010101246698.png" alt="image-20231010101246698" style="zoom:40%;" /><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">修改端口号 ，使用localhost访问</p><p>在vite.config.ts添加：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-w61sx0lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-w61sx0lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<span class="hljs-comment">//端口号</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//ip地址 或 &#x27;0.0.0.0&#x27; 或 &quot;loaclhost&quot;</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//启动后是否自动打开浏览器</span><br>    <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否开启 https</span><br>&#125;,<br></code></pre></td></tr></table></div></figure><img src="image-20231010103633427.png" alt="image-20231010103633427" style="zoom:50%;" /><p><code>&lt;router-view /&gt;</code>是用于呈现路由组件的占位符。当你使用 Vue Router 进行页面导航时，它会根据当前路由配置加载相应的组件，并将其渲染到 <code>&lt;router-view /&gt;</code> 中。</p><img src="image-20231010104903812.png" alt="image-20231010104903812" style="zoom:40%;" /><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">报错：Preprocessor dependency "sass"not found</p><img src="image-20231011172319536.png" alt="image-20231011172319536" style="zoom:50%;" /><p>解决方法：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-nk68x7lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-nk68x7lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -D sass<br></code></pre></td></tr></table></div></figure><hr><p><code>postcss-pxtorem</code>是postcss的一个插件，可以将对应的像素单位转换为rem。主要用于适应不同的分辨率的移动设备，从而实现响应式布局。在vite中可以直接对其进行配置，因为vite已经集成了postcss。</p><p>其中最重要的配置属性为：</p><ul><li>rootValue：根元素的值，即1rem对应的像素值大小。一般设置为设计稿尺寸&#x2F;10</li></ul><p>以及一些其他属性：</p><ul><li>propList：需要进行转换的css属性的值，可以使用通配符。如：<code>*</code>意思是将全部属性单位都进行转换；<code>[&quot;*position*&quot;]</code>会匹配到<code>background-position-y</code></li><li>selectorBlackList：不进行单位转换的选择器。如设置为字符串<code>body</code>，则所有含有body字符串的选择器都不会被该插件进行转换；若设置为<code>[/^body$/]</code>，则<code>body</code>会被匹配到而不是<code>.body</code></li><li>exclude：不需要进行单位转换的文件</li><li>mediaQuery：是否允许像素在媒体查询中进行转换</li></ul><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-od5tk3lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-od5tk3lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install postcss-pxtorem --save-dev<br></code></pre></td></tr></table></div></figure><p>在vite.config.js中配置postcss-pxtorem：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f971uslqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f971uslqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">postcss</span>: &#123;<br>        <span class="hljs-attr">plugins</span>: [<br>            <span class="hljs-title function_">postCssPxToRem</span>(&#123;<br>                <span class="hljs-attr">rootValue</span>: <span class="hljs-number">37.5</span>,<br>                <span class="hljs-attr">propList</span>: [<span class="hljs-string">&#x27;*&#x27;</span>],<br>                <span class="hljs-comment">//转换成rem后保留的小数点位数</span><br>                <span class="hljs-comment">// unitPrecision: 5,</span><br>                <span class="hljs-comment">//小于12px的样式不被替换成rem</span><br>                <span class="hljs-comment">// minPixelValue: 12,</span><br>                <span class="hljs-comment">//selectorBlackList: [&#x27;.qz-&#x27;],// 要忽略的选择器并保留为px。</span><br>                <span class="hljs-comment">//忽略一些文件，不进行转换，比如我想忽略 依赖的UI框架</span><br>                <span class="hljs-comment">// exclude: [&#x27;node_modules&#x27;]</span><br>            &#125;)<br>        ]<br>    &#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231020143318360.png" alt="image-20231020143318360" style="zoom:50%;" /><img src="image-20231020143255549.png" alt="image-20231020143255549" style="zoom:50%;" /><p>行内样式的px不会转换成rem：</p><img src="image-20231023105224042.png" alt="image-20231023105224042" style="zoom:50%;" /><img src="image-20231023104657917.png" alt="image-20231023104657917" style="zoom:50%;" /><p>如果想让行内样式的px转换成rem：</p><ol><li><p>有很多公用的js函数，为了便于集中管理，可以在src下面新建一个utils文件夹统一管理：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ihvxsqlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ihvxsqlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">px2rem</span>(<span class="hljs-params">px: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/%/gi</span>.<span class="hljs-title function_">test</span>(px)) &#123;<span class="hljs-comment">// 有百分号%，特殊处理，表述pc是一个有百分号的数，比如：90%</span><br>        <span class="hljs-keyword">return</span> px<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseFloat</span>(px) / <span class="hljs-number">192</span> + <span class="hljs-string">&#x27;rem&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231024111039721.png" alt="image-20231024111039721" style="zoom:50%;" /><p>在main.ts中注册全局方法$px2rem：</p><img src="image-20231024110931821.png" alt="image-20231024110931821" style="zoom:50%;" /><p>在vue中使用：</p><img src="image-20231024112954917.png" alt="image-20231024112954917" style="zoom:50%;" /></li><li><p>不用全局注册，直接局部引用：</p><img src="image-20231024113151892.png" alt="image-20231024113151892" style="zoom:50%;" /></li></ol><hr><p>前端报错<code>Access to XMLHttpRequest at &#39; http ://10.114.49.20:8000/ private / knowledge / compl etion &#39; from origin &#39; http :// localhost :8085&#39; has been bloc ked by CORS policy : Respons e to preflight request doesn &#39; t pass access control check : No &#39; Access- Control-Allow-Origin &#39; header is present on the requested resource</code>：这个错误是由于浏览器的跨域安全策略（CORS）导致的。</p><p>CORS策略要求服务器在响应中添加特定的头部信息，以允许来自不同源（Origin）的请求访问资源。在你的错误信息中，报告了来自本地开发服务器（<code>http://localhost:8085</code>）对另一个域（<code>http://10.114.49.20:8000</code>）的请求被阻止了。</p><p>要解决这个问题，你可以尝试以下几种方法：</p><ol><li><p><strong>后端配置：</strong> 在 <code>http://10.114.49.20:8000</code> 的服务器端代码中，添加合适的响应头来允许跨域请求。具体而言，你需要在响应中添加 <code>Access-Control-Allow-Origin</code> 头，将其值设置为 <code>http://localhost:8085</code>。</p></li><li><p><strong>使用代理：</strong> 如果你在开发环境中使用的是 Vite 或类似的工具，你可以尝试配置开发服务器的代理，将请求转发到正确的地址。在 Vite 中，你可以通过修改 <code>vite.config.js</code> 文件来配置代理，如下所示：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hl5elwlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hl5elwlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<span class="hljs-comment">//设置地址：http://localhost</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8083</span>, <span class="hljs-comment">// 设置服务启动端口号</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 设置服务启动时是否自动打开浏览器</span><br>    <span class="hljs-attr">cors</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 允许跨域</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>        <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>            <span class="hljs-attr">target</span>: env.<span class="hljs-property">VITE_APP_BASE_URL</span>,<span class="hljs-comment">//代理的地址</span><br>            <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">//这里的/需要转义</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></div></figure><p>这样，所有以 <code>/private</code> 开头的请求将被代理到 <code>http://10.114.49.20:8000</code> 地址。</p></li><li><p><strong>修改前端开发服务器的地址：</strong> 如果你有权限更改后端服务器的配置，可以考虑将前端开发服务器的地址设置为与后端服务器相同的地址（例如 <code>http://10.114.49.20:8000</code>），这样就不存在跨域问题了。</p></li></ol><hr><p>使用环境变量，是基于不同环境实现不同逻辑的。比如，在生产环境和开发环境将BASE_URL设置成不同的值，用来请求不同的环境的接口。</p><p>Vite内置了<code>dotenv</code>这个第三方库， dotenv会自动读取.env文件， dotenv 从你的 环境目录 中的下列文件加载额外的环境变量：</p><ul><li>.env：所有情况下都会加载</li><li>.env.[mode]：只在指定模式下加载</li></ul><p>默认情况下，<code>npm run dev</code>会加载 .env 和 .env.development 内的配置，<code>npm run build</code>会加载 .env 和 .env.production 内的配置，mode 可以通过命令行 --mode 选项来重写。</p><p>加载的环境变量也会通过 import.meta.env 以字符串形式暴露给客户端源码。为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码。</p><hr><p>设置 Volar Takeover 模式 来支持 Vue 的 TS 语言服务：</p><ol><li>在当前项目的工作空间下，用 <code>Ctrl + Shift + P</code> (macOS：<code>Cmd + Shift + P</code>) 唤起命令面板。</li><li>输入 <code>built</code>，然后选择“Extensions：Show Built-in Extensions”。</li><li>在插件搜索框内输入 <code>typescript</code> (不要删除 <code>@builtin</code> 前缀)。</li><li>点击“TypeScript and JavaScript Language Features”右下角的小齿轮，然后选择“Disable (Workspace)”。</li><li>重新加载工作空间。Takeover 模式将会在你打开一个 Vue 或者 TS 文件时自动启用。</li></ol><hr><p>报错<code>Cannot find module &#39;vue&#39;. Did you mean to set the &#39;moduleResolution&#39; option to &#39;noden</code>：</p><p>解决：加上&quot;moduleResolution&quot;: &quot;node&quot;</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0ld98alqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0ld98alqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;es2017&quot;</span>,<br>   <span class="hljs-string">&quot;module&quot;</span>:<span class="hljs-string">&quot;ES2022&quot;</span>,<br>   <span class="hljs-string">&quot;moduleResolution&quot;</span>: <span class="hljs-string">&quot;node&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></div></figure><p>axios</p><p>provide&#x2F;inject</p><p>js-cookie</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>安装：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l853jzlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l853jzlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router -S<br></code></pre></td></tr></table></div></figure><p>src文件夹下创建 router 文件夹，创建 index.ts 文件：</p><figure class="highlight typescript"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-i9vlgblqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-i9vlgblqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory, <span class="hljs-title class_">RouteRecordRaw</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteRecordRaw</span>&gt; = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/auditAnswer/navigation&#x27;</span>,<span class="hljs-comment">/* 重定向 */</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/auditAnswer&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;auditAnswer&#x27;</span>,<br>    <span class="hljs-comment">/* alias: [&#x27;/home&#x27;,&#x27;/home2&#x27;],   //别名 */</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/home/index.vue&#x27;</span>),<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;navigation&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;navigation&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/home/desc.vue&#x27;</span>) <br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;chat&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chat&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/home/chat/index.vue&#x27;</span>) <br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/auditSQL&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/auditSQL/navigation&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/auditSQL&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;auditSQL&#x27;</span>,<br>  &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;navigation&#x27;</span>,<br>        <span class="hljs-comment">/* 不能和/auditAnswer/navigation的name重复 */</span><br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;navigation2&#x27;</span>,<span class="hljs-comment">/* name: &#x27;navigation&#x27;不对 */</span><br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/sql/sqldesc.vue&#x27;</span>) <br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;sql&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sql&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/sql/index.vue&#x27;</span>) <br>      &#125;<br>    ]<br>  &#125;,<br>]<br><span class="hljs-comment">/* 创建路由实例 */</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></div></figure><p>在 main.ts 中引入并注册：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mu3ru3lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mu3ru3lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; creatApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><span class="hljs-keyword">const</span> app=<span class="hljs-title function_">creatApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(store)<br></code></pre></td></tr></table></div></figure><p>跳转404页面：在src文件夹下的views文件夹创建NotFound文件夹，创建index.vue。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fgxhxwlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fgxhxwlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>    <br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;p&gt;<br>        404<br>    &lt;/p&gt;<br>&lt;h5&gt;<br>        您访问的页面不存在<br>    &lt;/h5&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>scr&#x2F;router&#x2F;index.ts：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fejiillqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fejiillqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFound</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/view/NotFound/404.vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteRecordRaw</span>&gt; = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:pathMatch(.*)&#x27;</span>,<span class="hljs-comment">/*pathMatch(.*)*表示匹配所有路径*/</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>  &#125;,<br>    &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;404&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">NotFound</span><br>  &#125;,<br>]<br></code></pre></td></tr></table></div></figure><p>使用一个自定义组件 <code>router-link</code> 来创建链接。这使得 Vue Router 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-v7pnc3lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-v7pnc3lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello App!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用 router-link 组件进行导航 --&gt;</span><br>    <span class="hljs-comment">&lt;!--通过传递 `to` 来指定链接 --&gt;</span><br>    <span class="hljs-comment">&lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p><code>router-view</code> 将显示与 url 对应的组件。你可以把它放在任何地方，以适应你的布局。</p><p>因为我们在 <code>setup</code> 里面没有访问 <code>this</code>，所以我们不能再直接访问 <code>this.$router</code> 或 <code>this.$route</code>。作为替代，我们使用 <code>useRouter</code> 和 <code>useRoute</code> 函数。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y58o2glqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y58o2glqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; useRoute &#125; from &#x27;vue-router&#x27;<br>import router from &#x27;@/router&#x27;<br>const $route=useRoute()<br>    <br>onMounted(()=&gt;&#123;<br>    if($route.name===&#x27;auditSQL&#x27;)&#123;<br>        localStorage.setItem(&#x27;sqlArray&#x27;,JSON.stringify([]))<br>        homeStore.clearSqlArr()<br>    &#125;<br>/*上一个页面*/<br>    if(router.options.history.state.back===&#x27;/auditSQL/navigation&#x27;)&#123;&#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>将给定匹配模式的路由映射到同一个组件。例如，我们可能有一个 <code>User</code> 组件，它应该对所有用户进行渲染，但用户 ID 不同。在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，我们称之为路径参数 ：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-bzlgddlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-bzlgddlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment">/* 这些都会传递给 `createRouter` */</span><br><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">/* 动态字段以冒号开始 */</span><br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/:id&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span> &#125;,<br>]<br></code></pre></td></tr></table></div></figure><p>现在像 <code>/users/johnny</code> 和 <code>/users/jolyne</code> 这样的 URL 都会映射到同一个路由。</p><p>&#x3D;&#x3D;路径参数用冒号 <code>:</code> 表示&#x3D;&#x3D;。当一个路由被匹配时，它的params的值将在每个组件中以 <code>this.$route.params</code> 的形式暴露出来。因此，我们可以通过更新 <code>User</code> 的模板来呈现当前的用户 ID：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-j2gcmulqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-j2gcmulqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">编程式导航</p><p>想要导航到不同的 URL，可以使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。</p><p>当你点击 <code>&lt;router-link&gt;</code> 时，内部会调用这个方法，所以点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 相当于调用 <code>router.push(...)</code> ：</p><table><thead><tr><th align="left">声明式</th><th align="left">编程式</th></tr></thead><tbody><tr><td align="left"><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td align="left"><code>router.push(...)</code></td></tr></tbody></table><p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1fag53lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1fag53lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 字符串路径 */</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/users/eduardo&#x27;</span>)<br><br><span class="hljs-comment">/* 带有路径的对象 */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/eduardo&#x27;</span> &#125;)<br><br><span class="hljs-comment">/* 命名的路由，并加上参数，让路由建立 url */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;eduardo&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">/* 带查询参数，结果是 /register?plan=private */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">plan</span>: <span class="hljs-string">&#x27;private&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">/* 带 hash，结果是 /about#team */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;#team&#x27;</span> &#125;)<br></code></pre></td></tr></table></div></figure><p><strong>注意</strong>：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 <code>name</code> 或手写完整的带有参数的 <code>path</code> ：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-17efcdlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-17efcdlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> username = <span class="hljs-string">&#x27;eduardo&#x27;</span><br><span class="hljs-comment">/* 我们可以手动建立 url，但我们必须自己处理编码 */</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/user/<span class="hljs-subst">$&#123;username&#125;</span>`</span>) <br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">`/user/<span class="hljs-subst">$&#123;username&#125;</span>`</span> &#125;) <br><span class="hljs-comment">/* 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益 */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; username &#125; &#125;) <br><br><span class="hljs-comment">/* `params` 不能与 `path` 一起使用 */</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; username &#125; &#125;)<br></code></pre></td></tr></table></div></figure><p>当指定 <code>params</code> 时，可提供 <code>string</code> 或 <code>number</code> 参数（或者对于可重复的参数可提供一个数组）。任何其他类型（如 <code>undefined</code>、<code>false</code> 等）都将被自动字符串化。对于可选参数，你可以提供一个空字符串（<code>&quot;&quot;</code>）来跳过它。</p><p>由于属性 <code>to</code> 与 <code>router.push</code> 接受的对象种类相同，所以两者的规则完全相同。</p><p><code>router.push</code> 和所有其他导航方法都会返回一个 <em>Promise</em>，让我们可以等到导航完成后才知道是成功还是失败。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7d9zltlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7d9zltlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>    import &#123; onBeforeRouteLeave, onBeforeRouteUpdate &#125; from &#x27;vue-router&#x27;<br>    import &#123; ref &#125; from &#x27;vue&#x27;<br><br>    /* 与 beforeRouteLeave 相同，无法访问 `this` */<br>    onBeforeRouteLeave((to, from) =&gt; &#123;<br>        const answer = window.confirm(<br>            &#x27;Do you really want to leave? you have unsaved changes!&#x27;<br>        )<br>        /*  取消导航并停留在同一页面上  */ <br>        if (!answer) return false<br>    &#125;)<br><br>    const userData = ref()<br><br>    /*  与 beforeRouteUpdate 相同，无法访问 `this`  */ <br>    onBeforeRouteUpdate(async (to, from) =&gt; &#123;<br>        /*  仅当 id 更改时才获取用户，例如仅 query 或 hash 值已更改  */<br>        if (to.params.id !== from.params.id) &#123;<br>            userData.value = await fetchUser(to.params.id)<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p>div设置圆角边框：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3limqylqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3limqylqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>; <span class="hljs-comment">/* 设置边框样式 */</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置圆角半径 */</span><br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>设置水平垂直居中：</p><ol><li>使用 Flexbox：</li></ol><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kjizi5lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kjizi5lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-comment">/* 水平居中 */</span><br>  <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* 垂直居中 */</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>在上述代码中，父容器 <code>.container</code> 需要具有一定的高度和宽度，并且设置为 <code>display: flex;</code>。通过设置 <code>justify-content: center;</code> 和 <code>align-items: center;</code> 可以将子元素水平和垂直居中。</p><ol start="2"><li>使用绝对定位和 transform：将<code>container</code>设置为相对定位(<code>position: relative</code>)，然后将 <code>centered-element</code> 设置为绝对定位(<code>position: absolute</code>)，再设置 <code>centered-element</code> 的<code>top</code>和<code>left</code>即可相对于 <code>container</code> 的宽度进行计算。</li></ol><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-iu8k7nlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-iu8k7nlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.centered-element</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在上述代码中，父容器 <code>.container</code> 需要设置为 <code>position: relative;</code>，然后在要居中的子元素上添加 <code>.centered-element</code> 类。通过设置 <code>top: 50%;</code>、<code>left: 50%;</code> 和 <code>transform: translate(-50%, -50%);</code> 可以将子元素水平和垂直居中。</p><hr><p><code>&lt;el-col&gt;</code> 是 Element UI 库中的栅格布局组件，用于创建响应式的网格系统。通过使用 <code>:xs</code>、<code>:sm</code>、<code>:md</code>、<code>:lg</code> 和 <code>:xl</code> 这些属性，可以定义在不同屏幕尺寸下 <code>&lt;el-col&gt;</code> 元素所占据的列数。</p><p>对于你提供的代码 <code>&lt;el-col :xs=&quot;8&quot; :sm=&quot;6&quot; :md=&quot;4&quot; :lg=&quot;3&quot; :xl=&quot;1&quot;&gt;</code>，这表示在不同屏幕尺寸下，列元素 <code>&lt;el-col&gt;</code> 分别占据的列数。具体设置如下：</p><ul><li><code>:xs=&quot;8&quot;</code>：在超小屏幕设备（&lt;768px 宽度）下，该列元素占据 8 列的宽度。</li><li><code>:sm=&quot;6&quot;</code>：在小屏幕设备（≥768px 宽度）下，该列元素占据 6 列的宽度。</li><li><code>:md=&quot;4&quot;</code>：在中等屏幕设备（≥992px 宽度）下，该列元素占据 4 列的宽度。</li><li><code>:lg=&quot;3&quot;</code>：在大屏幕设备（≥1200px 宽度）下，该列元素占据 3 列的宽度。</li><li><code>:xl=&quot;1&quot;</code>：在超大屏幕设备（≥1920px 宽度）下，该列元素占据 1 列的宽度。</li></ul><p>这些属性值代表了 <code>&lt;el-col&gt;</code> 元素在不同屏幕尺寸下所占据的相对宽度比例。</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-74qp45lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-74qp45lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-row</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;16&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>父组件中引用子组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3yajq6lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3yajq6lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;; // 导入子组件<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;ChildComponent /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><hr><p>要实现上下两栏固定，中间栏自适应的布局：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wiphtclqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wiphtclqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; <span class="hljs-comment">/* 设置容器高度为视窗高度 */</span></span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.header</span>,</span><br><span class="language-css">  <span class="hljs-selector-class">.footer</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 固定高度为 50px */</span></span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* 剩余空间自适应 */</span></span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>上栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>中栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>下栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p><code>.container</code> 是一个具有 Flex 布局的容器，它的 <code>flex-direction</code> 属性被设置为 <code>column</code>，使子元素按垂直方向排列。</p><p><code>.header</code> 和 <code>.footer</code> 类分别表示上栏和下栏，它们都设置了固定的高度（这里为 50px），通过 <code>flex: 0 0 50px</code> 指定不可伸缩、初始大小为 50px。</p><p><code>.content</code> 类表示中栏，它的 <code>flex</code> 属性被设置为 <code>1</code>，表示它会占据剩余的所有空间，从而实现自适应的效果。</p><hr><p>要修改 <code>&lt;el-input&gt;</code> 组件的 placeholder 字体大小，你可以使用 CSS 来覆盖默认样式。下面是一种常用的方法：</p><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">[@vue/compiler-sfc] :deep usage as a combinator has been deprecated. Use :deep(<inner-selector>) instead of :deep <inner-selector>.</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t36d4olqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t36d4olqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-input class=&quot;input&quot; placeholder=&quot;请输入内容&quot;&gt;&lt;/el-input&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.input&#123;<br>    :deep(.el-input__inner) &#123;<br>        font-size: 14px; /* 设置占位符字体大小 */<br>    &#125;<br>    :deep(.el-input__wrapper) &#123;<br>        border-radius: 14px !important; /* 设置输入框圆角边框 */<br>    &#125;<br>&#125; <br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>嵌套层级多的话，&#x2F;deep&#x2F;后面不能直接写当前选择器名，应该先写父元素或者祖先元素。</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ohyfablqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ohyfablqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">/deep/<span class="hljs-selector-class">.el-date-editor</span> <span class="hljs-selector-class">.el-range-separator</span>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>要在 <code>&lt;el-input&gt;</code> 输入框内的右侧放置一个图片，你可以使用输入框的附加内容（<code>append</code>）来实现。</p><p>suffix和append的区别：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qu2favlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qu2favlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;input&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;handleSubmit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">suffix</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;Search&quot;</span> @<span class="hljs-attr">click.native.prevent</span>=<span class="hljs-string">&quot;handleSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20231122155958877.png" alt="image-20231122155958877" style="zoom:50%;" /><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-45r5pllqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-45r5pllqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;input&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;handleSubmit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;Search&quot;</span> @<span class="hljs-attr">click.native.prevent</span>=<span class="hljs-string">&quot;handleSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20231122160035019.png" alt="image-20231122160035019" style="zoom:50%;" /><p>Vue 允许在 <code>v-on</code> 或 <code>@</code> 监听按键事件时添加按键修饰符：<code>@keyup.enter=&quot;handleSubmit&quot;</code></p><hr><p>div里包裹三个p设置div为flex布局，前两个p在一排，第三个p在第二排：如果你想在 <code>&lt;div&gt;</code> 中包裹三个 <code>&lt;p&gt;</code> 元素，并设置前两个 <code>&lt;p&gt;</code> 元素在一行显示，第三个 <code>&lt;p&gt;</code> 元素在第二行，可以通过使用 CSS 的 Flex 布局来实现。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-knrtfklqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-knrtfklqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;p&gt;第一个段落&lt;/p&gt;<br>    &lt;p&gt;第二个段落&lt;/p&gt;<br>    &lt;p&gt;第三个段落&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br>.container &#123;<br>  display: flex;<br>  flex-wrap: wrap;<br>&#125;<br><br>.container p &#123;<br>  width: 50%; /* 每个段落占据容器的一半宽度 */<br>&#125;<br><br>.container p:nth-child(3) &#123;<br>  width: 100%; /* 第三个段落占据整个容器宽度 */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>通过将 <code>.container</code> 类的 <code>display</code> 属性设置为 <code>flex</code>，并设置 <code>flex-wrap</code> 属性为 <code>wrap</code>，可以让容器内的元素自动换行。</p><p>然后，我们给每个 <code>&lt;p&gt;</code> 元素设置了宽度。在示例中，前两个 <code>&lt;p&gt;</code> 元素的宽度被设置为容器宽度的一半（50%），而第三个 <code>&lt;p&gt;</code> 元素的宽度被设置为整个容器的宽度（100%）。</p><p>这样，前两个 <code>&lt;p&gt;</code> 元素会在一行显示，而第三个 <code>&lt;p&gt;</code> 元素会独占一行。</p><hr><p>设置文本折行：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1i8jzglqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1i8jzglqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;text-wrapper&quot;&gt;<br>    &#123;&#123; longText &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br>.text-wrapper &#123;<br>  word-wrap: break-word; /* 当单词过长时自动换行 */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><p>使用了 <code>word-wrap: break-word</code> 样式来实现单词过长时自动换行。</p><hr><p>在父组件内容被撑大出现滚动条时，如何让子组件始终固定在父组件的右下角：父组件div设置<code>position:relative;</code>，子组件div设置<code>position:absolute;bottom:40px;right:0;</code>。</p><p><code>overflow-y: auto;</code> 和 <code>overflow-y: scroll;</code> 都是 CSS 中的属性，用于设置元素内容溢出时的处理方式。它们之间的主要区别在于滚动条的行为和可见性。</p><ol><li><p><code>overflow-y: auto;</code></p><ul><li>当内容的高度超过元素本身的高度时，会自动出现一个垂直滚动条供用户滚动查看超出部分的内容。</li><li>如果内容没有超过元素的高度，则不会显示滚动条。</li></ul></li><li><p><code>overflow-y: scroll;</code></p><ul><li>不管内容是否超过了元素的高度，始终显示一个垂直滚动条。</li><li>即使内容高度并未溢出，滚动条也是启用的（虽然可能禁用或无法操作）。</li></ul></li></ol><p>总结来说，<code>overflow-y: auto;</code> 只在需要时显示滚动条，而 <code>overflow-y: scroll;</code> 则始终显示滚动条。使用 <code>auto</code> 通常更利于用户体验，因为它只在必要时显示滚动条；而 <code>scroll</code> 则更适合需要明确指示可滚动区域的场景。</p><hr><p>点击上箭头按钮返回页面顶部：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3z04xplqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3z04xplqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>    const scrollToTop=()=&gt;&#123;<br>        if(container.value)&#123;<br>            container.value.scrollTo(&#123;<br>                top: 0,<br>                behavior: &#x27;smooth&#x27;,<br>            &#125;)<br>    &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>    &lt;div ref=&quot;container&quot;&gt;<br>        &lt;ChatTool/&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><hr><p>将元素 <code>a</code> 的滚动位置设置为它的内容的高度：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ik6km9lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ik6km9lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">a.<span class="hljs-property">scrollTop</span>=a.<span class="hljs-property">scrollHeight</span><br></code></pre></td></tr></table></div></figure><hr><p>要设置不同el-tree层级的图标不同，你可以通过判断节点的层级来动态地为每个层级设置不同的图标。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fgycwklqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fgycwklqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-tree :data=&quot;treeData&quot;&gt;<br>    &lt;template v-slot=&quot;&#123; node, data &#125;&quot;&gt;<br>      &lt;span class=&quot;tree-node-icon&quot;&gt;<br>        &lt;i :class=&quot;getIconClass(node.level)&quot;&gt;&lt;/i&gt;<br>      &lt;/span&gt;<br>      &lt;span&gt;&#123;&#123; node.label &#125;&#125;&lt;/span&gt;<br>    &lt;/template&gt;<br>  &lt;/el-tree&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const treeData = ref([]);<br><br>const getIconClass = (level: number): string =&gt; &#123;<br>  if (level === 1) &#123;<br>    return &#x27;iconfont icon-level1&#x27;;<br>  &#125; else if (level === 2) &#123;<br>    return &#x27;iconfont icon-level2&#x27;;<br>  &#125; else &#123;<br>    return &#x27;iconfont icon-default&#x27;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>要在树形结构的各个层级之间添加间隙，你可以使用 CSS 的 <code>margin</code> 属性来实现。</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4z02m3lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4z02m3lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">:<span class="hljs-built_in">deep</span>(.el-tree)&#123;<br>    <span class="hljs-selector-class">.el-tree-node__children</span>&#123;<br>        <span class="hljs-selector-class">.el-tree-node__content</span>&#123;<br>            <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;<br>        &#125;<br>        .<span class="hljs-selector-class">.el-tree-node__children</span>&#123;<br>            <span class="hljs-attribute">padding-left</span>:<span class="hljs-number">10px</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>要设置每个 <code>el-table-column</code> 的宽度占比，你可以使用 <code>width</code> 属性配合百分比来实现。</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-uzo0wzlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-uzo0wzlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot;&gt;<br>    &lt;el-table-column<br>      prop=&quot;name&quot;<br>      label=&quot;姓名&quot;<br>      min-width=&quot;20%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;age&quot;<br>      label=&quot;年龄&quot;<br>      min-width=&quot;10%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;gender&quot;<br>      label=&quot;性别&quot;<br>      min-width=&quot;15%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><p>设置el-table滚动：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p7j989lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p7j989lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">max-height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>设置el-table-column的字体颜色：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zfg82ulqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zfg82ulqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-table :data=&quot;tableData&quot;  :header-cell-style=&quot;&#123; color: &#x27;red&#x27; &#125;&quot; :cell-style=&quot;rowCellStyle&quot;&gt;<br>    &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column prop=&quot;age&quot; label=&quot;年龄&quot;&gt;<br>    &lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const tableData = ref([<br>  &#123; name: &#x27;张三&#x27;, age: 20 &#125;,<br>  &#123; name: &#x27;李四&#x27;, age: 25 &#125;<br>]);<br><br>const rowCellStyle = (&#123; row, column &#125;: &#123; row: any, column: any &#125;) =&gt; &#123;<br>  if (column.property === &#x27;name&#x27;) &#123;<br>    return &#123; color: &#x27;green&#x27; &#125;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">父组件向子组件传值</p><p>父组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-lfa5yvlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-lfa5yvlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>        &lt;Metainfo :parentMessage=&quot;parentMessage&quot;&gt;&lt;/Metainfo&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><p>子组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-15zfuqlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-15zfuqlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>const props = defineProps(&#123;<br>  parentMessage: &#123;<br>    type: String,<br>    required: true<br>  &#125;<br>&#125;);<br><br>const &#123;parentMessage&#125; = toRefs(props);<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">子组件向父组件传值</p><p>子组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ckewv3lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ckewv3lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;sendValueToParent&quot;&gt;点击发送值给父组件&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>const $emit = defineEmits([&#x27;changeValue&#x27;,&#x27;value2&#x27;]);<br><br>const sendValueToParent = () =&gt; &#123;<br>  const value = &#x27;这是子组件传递给父组件的值&#x27;;<br>  $emits(&#x27;changeValue&#x27;, true);<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>父组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6e80f4lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6e80f4lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;ChildComponent @changeValue=&quot;changeValue&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const receivedValue = ref(&#x27;&#x27;);<br>const changeValue = (value: string) =&gt; &#123;<br>  receivedValue.value = value;<br>&#125;;<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">【暂时未生效】provide inject传值</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mt3k6vlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mt3k6vlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 模板内容 --&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; provide &#125; from &#x27;vue&#x27;;<br><br>const setup = () =&gt; &#123;<br>  const valueToProvide: string = &#x27;这是要传递的值&#x27;;<br>  provide(&#x27;myValue&#x27;, valueToProvide);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>接收方组件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vy7fz3lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vy7fz3lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 模板内容 --&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; inject &#125; from &#x27;vue&#x27;;<br><br>const receivedValue: string = inject(&#x27;myValue&#x27;);<br><br>console.log(receivedValue); // 输出：这是要传递的值<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p>鼠标悬浮到el-table的某行后在该行的第一列显示出加号：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-t1sikqlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-t1sikqlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-table :data=&quot;tableData&quot; @cell-mouse-enter=&quot;cellMouseEnter&quot; @cell-mouse-leave=&quot;cellMouseLeave&quot;&gt;<br>      &lt;!-- 第一列使用作用域插槽自定义内容 --&gt;<br>      &lt;el-table-column label=&quot;加号&quot;&gt;<br>        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;<br>          &lt;span v-if=&quot;row.showAddIcon&quot;&gt;+&lt;/span&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;;<br><br>interface TableRow &#123;<br>  name: string;<br>  age: number;<br>  gender: string;<br>  showAddIcon?: boolean;<br>&#125;<br><br>const tableData: TableRow[] = reactive([<br>  &#123; name: &#x27;张三&#x27;, age: 20, gender: &#x27;男&#x27;, showAddIcon: false &#125;,<br>  &#123; name: &#x27;李四&#x27;, age: 25, gender: &#x27;女&#x27;, showAddIcon: false &#125;,<br>  &#123; name: &#x27;王五&#x27;, age: 30, gender: &#x27;男&#x27;, showAddIcon: false &#125;<br>]);<br>    <br>const cellMouseEnter=(row:number)=&gt;&#123;<br>    row.showAddIcon=true<br>&#125;<br>const cellMouseLeave=(row:number)=&gt;&#123;<br>    row.showAddIcon=false<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p>要在 <code>el-table</code> 的最后一行中插入一个 <code>el-select</code>：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-eqx6x1lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-eqx6x1lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-table :data=&quot;tableData&quot;&gt;<br>        &lt;el-table-column label=&quot;表名&quot;&gt;<br>            &lt;template #default=&quot;&#123; row &#125;&quot;&gt;<br>                &lt;template v-if=&quot;row.showAddIcon===true&quot;&gt;<br>                    &lt;el-select v-model=&quot;select&quot; placeholder=&quot;请选择&quot; @change=&quot;(val:any)=&gt;selectChange(val,row)&quot;&gt;<br>                        &lt;el-option v-for=&quot;i in options&quot; :key=&quot;i.value&quot; :label=&quot;i.label&quot; :value=&quot;i.value&quot;&gt;<br>                        &lt;/el-option&gt;<br>                    &lt;/el-select&gt;<br>                &lt;/template&gt;<br>                &lt;template v-else&gt;<br>                    &#123;&#123;row.name&#125;&#125;<br>                &lt;/template&gt;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;el-table-column label=&quot;操作&quot;&gt;<br>            &lt;template #default=&quot;scope&quot;&gt;<br>        &lt;svg-icon iconName=&quot;icon-a-shanchu1&quot; @click=&quot;handleDelete(scope.row,scope.$index)&quot;&gt;&lt;/svg-icon&gt;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>&lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></div></figure><p>有时需要用到<code>v-for=&quot;(i,index) in options&quot;</code>获取元素下标。</p><hr><p>自定义el-button禁用时的click事件：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qpg700lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qpg700lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-button :disabled=&quot;isDisabled&quot; @click=&quot;handleClick&quot;&gt;Click me&lt;/el-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const isDisabled = ref(true); <br><br>const handleClick = () =&gt; &#123;<br>  if (!isDisabled.value) &#123;<br>    console.log(&#x27;Button clicked!&#x27;);<br>  &#125;<br>&#125;;<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p><code>trim()</code> 是字符串的内置函数，用于删除字符串的首尾空格：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9kvq1alqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9kvq1alqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;  Hello, World!  &#x27;</span>;<br><span class="hljs-keyword">const</span> trimmedStr = str.<span class="hljs-title function_">trim</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(trimmedStr); <span class="hljs-comment">// 输出: &quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p>随机生成id：可以使用 UUID（Universally Unique Identifier）或 GUID（Globally Unique Identifier）。这些是用于生成全局唯一标识符的算法。在  中，可以使用第三方库 <code>uuid</code> 来生成 UUID。</p><p>uuid的Github仓库地址：<a href="https://github.com/uuidjs/uuid">https://github.com/uuidjs/uuid</a></p><p>首先，确保你已经安装了 <code>uuid</code> 库。可以使用 npm 包管理器运行以下命令进行安装：</p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qhlecmlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qhlecmlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install uuid --save-dev<br>npm i --save-dev @types/uuid<br></code></pre></td></tr></table></div></figure><p>重启项目后生效！</p><p>安装完成后，可以使用以下代码生成一个完全不重复的随机 ID：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n1gyj6lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n1gyj6lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">v4</span>: uuidv4 &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uuid&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">generateUniqueId</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> uniqueId = <span class="hljs-title function_">uuidv4</span>();<br>  <span class="hljs-keyword">return</span> uniqueId;<br>&#125;<br><br><span class="hljs-keyword">const</span> id = <span class="hljs-title function_">generateUniqueId</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id);<br></code></pre></td></tr></table></div></figure><p>上述代码中，<code>uuid</code> 库的 <code>v4</code> 方法被引入并命名为 <code>uuidv4</code>。<code>generateUniqueId</code> 函数使用 <code>uuidv4</code> 方法来生成一个完全不重复的随机 ID。</p><p>每次调用 <code>generateUniqueId</code> 函数时，都会生成一个全局唯一的 ID。这是由 UUID 算法的特性决定的。</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rb3ie7lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rb3ie7lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> &#123;v4 <span class="hljs-keyword">as</span> uuidv4&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;uuid&#x27;</span><br><br><span class="hljs-keyword">const</span> $router=<span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">let</span> uuid=<span class="hljs-title function_">uuidv4</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span>=(<span class="hljs-params">value:string</span>)=&gt;&#123;<br>$router.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;chat&#x27;</span>,<span class="hljs-attr">query</span>:&#123;uuid,<span class="hljs-attr">question</span>:value&#125;&#125;)<br>&#125;<br></code></pre></td></tr></table></div></figure><p>即在url后添加chat?uuid&#x3D;111&amp;question&#x3D;你是谁?</p><p>获取route中的uuid：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vvxn2jlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vvxn2jlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> uuid=$route.<span class="hljs-property">query</span>.<span class="hljs-property">uuid</span> <span class="hljs-keyword">as</span> string<br></code></pre></td></tr></table></div></figure><hr><p>当你刷新页面时，页面的值消失的原因可能是因为数据没有被正确地保存或恢复。</p><p>在 Web 开发中，浏览器提供了 <code>localStorage</code> 和 <code>sessionStorage</code> 这两个 API 来存储数据。这些 API 允许你在页面之间保持持久的数据存储或会话级别的数据存储。</p><p>如果页面的值在刷新后消失，可能是因为你没有正确地使用这些存储机制。</p><ul><li><code>localStorage</code>：<code>localStorage</code> 是一个持久性存储，数据将在浏览器关闭后仍然保留。你可以使用 <code>localStorage.setItem(key, value)</code> 方法将值存储到 <code>localStorage</code> 中，并使用 <code>localStorage.getItem(key)</code> 方法检索值。</li><li><code>sessionStorage</code>：<code>sessionStorage</code> 是一个会话级别的存储，数据将在会话结束时被清除（当用户关闭标签页或浏览器窗口时）。你可以使用 <code>sessionStorage.setItem(key, value)</code> 方法将值存储到 <code>sessionStorage</code> 中，并使用 <code>sessionStorage.getItem(key)</code> 方法检索值。</li></ul><p>请确保在存储值时使用正确的 API，并在页面加载时从存储中恢复值。例如，在加载页面时，你可以在  中使用以下代码来恢复 <code>localStorage</code> 中的值：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-l8ijnnlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-l8ijnnlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> storedValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;myVariable&#x27;</span>);<br><span class="hljs-keyword">if</span> (storedValue) &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>这样，即使在刷新页面后，数据仍然可以从 <code>localStorage</code> 中获取并恢复。</p><p><code>JSON.stringify</code>：将JavaScript对象或值转换为JSON字符串。</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-vsz960lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-vsz960lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;sqlArray&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(newSqlArray))<br></code></pre></td></tr></table></div></figure><hr><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>使用 <code>watch</code> 函数在每次响应式状态发生变化时触发回调函数：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mkd40tlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mkd40tlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref, watch &#125; from &#x27;vue&#x27;;<br><br>const count = ref(0);<br><br>function increment() &#123;<br>  count.value++;<br>&#125;<br><br>watch(count, (newValue, oldValue) =&gt; &#123;<br>  console.log(&#x27;count 发生变化&#x27;, newValue, oldValue);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>在上述代码中，我们使用了 <code>&lt;script setup&gt;</code> 语法来定义组件的逻辑部分。在 <code>&lt;script setup&gt;</code> 中，我们导入了 <code>ref</code> 和 <code>watch</code> 函数，并使用 <code>ref</code> 创建了一个名为 <code>count</code> 的响应式变量，并初始化为 0。</p><p>我们还定义了一个名为 <code>increment</code> 的方法来增加 <code>count</code> 的值。在模板中，我们可以直接绑定 <code>count</code> 变量和 <code>increment</code> 方法。</p><p>最后，我们使用 <code>watch</code> 函数来观察 <code>count</code> 的变化，并在每次变化时输出日志。</p><p><code>watch</code> 的第一个参数可以是不同形式的“数据源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d1wew2lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d1wew2lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> x = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> y = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">/* 单个 ref */</span><br><span class="hljs-title function_">watch</span>(x, <span class="hljs-function">(<span class="hljs-params">newX</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x is <span class="hljs-subst">$&#123;newX&#125;</span>`</span>)<br>&#125;)<br><br><span class="hljs-comment">/* getter 函数 */</span> <br><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> x.<span class="hljs-property">value</span> + y.<span class="hljs-property">value</span>,<br>  <span class="hljs-function">(<span class="hljs-params">sum</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`sum of x + y is: <span class="hljs-subst">$&#123;sum&#125;</span>`</span>)<br>  &#125;<br>)<br><br><span class="hljs-comment">/* 多个来源组成的数组 */</span> <br><span class="hljs-title function_">watch</span>([x, <span class="hljs-function">() =&gt;</span> y.<span class="hljs-property">value</span>], <span class="hljs-function">(<span class="hljs-params">[newX, newY]</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x is <span class="hljs-subst">$&#123;newX&#125;</span> and y is <span class="hljs-subst">$&#123;newY&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>注意，你不能直接侦听响应式对象的属性值，例如：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3lutlclqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3lutlclqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)<br><br><span class="hljs-comment">/* 错误，因为 watch() 得到的参数是一个 number */</span><br><span class="hljs-title function_">watch</span>(obj.<span class="hljs-property">count</span>, <span class="hljs-function">(<span class="hljs-params">count</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`count is: <span class="hljs-subst">$&#123;count&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>这里需要用一个返回该属性的 getter 函数：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-pkmkp0lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-pkmkp0lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 提供一个 getter 函数 */</span><br><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> obj.<span class="hljs-property">count</span>,<br>  <span class="hljs-function">(<span class="hljs-params">count</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`count is: <span class="hljs-subst">$&#123;count&#125;</span>`</span>)<br>  &#125;<br>)<br></code></pre></td></tr></table></div></figure><p>直接给 <code>watch()</code> 传入一个响应式对象，会隐式地创建一个<code>深层侦听器</code>——该回调函数在所有嵌套的变更时都会被触发：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8nfejblqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8nfejblqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)<br><br><span class="hljs-title function_">watch</span>(obj, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment">     在嵌套的属性变更时触发</span><br><span class="hljs-comment">     注意：`newValue` 此处和 `oldValue` 是相等的</span><br><span class="hljs-comment">     因为它们是同一个对象！</span><br><span class="hljs-comment">  */</span><br>&#125;)<br><br>obj.<span class="hljs-property">count</span>++<br></code></pre></td></tr></table></div></figure><p>相比之下，一个返回响应式对象的 getter 函数，只有在返回不同的对象时，才会触发回调：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-eqcv0hlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-eqcv0hlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> state.<span class="hljs-property">someObject</span>,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">/* 仅当 state.someObject 被替换时触发 */</span><br>  &#125;<br>)<br></code></pre></td></tr></table></div></figure><p>你也可以给上面这个例子显式地加上 <code>deep</code> 选项，强制转成深层侦听器：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ti0n32lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ti0n32lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> state.<span class="hljs-property">someObject</span>,<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">/* 注意：`newValue` 此处和 `oldValue` 是相等的，除非 state.someObject 被整个替换了*/</span><br>  &#125;,<br>  &#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>)<br></code></pre></td></tr></table></div></figure><p class="note note-warning">深度侦听需要遍历被侦听对象中的所有嵌套的属性，当用于大型数据结构时，开销很大。因此请只在必要时才使用它，并且要留意性能。</p><p><mark>即时回调的侦听器</mark>：<code>watch</code> 默认是懒执行的：仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。</p><p>可以通过传入 <code>immediate: true</code> 选项来强制侦听器的回调立即执行：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-p2ma6xlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-p2ma6xlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(source, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 立即执行，且当 `source` 改变时再次执行 */</span><br>&#125;, &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></div></figure><p>侦听器的回调使用与源完全相同的响应式状态是很常见的。例如下面的代码，在每当 <code>todoId</code> 的引用发生变化时使用侦听器来加载一个远程资源：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4efch1lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4efch1lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> todoId = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)<br><br><span class="hljs-title function_">watch</span>(todoId, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>    <span class="hljs-string">`https://jsonplaceholder.typicode.com/todos/<span class="hljs-subst">$&#123;todoId.value&#125;</span>`</span><br>  )<br>  data.<span class="hljs-property">value</span> = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>&#125;, &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></div></figure><p>特别是注意侦听器是如何两次使用 <code>todoId</code> 的，一次是作为源，另一次是在回调中。</p><p>我们可以用<code>watchEffect</code>函数来简化上面的代码。<code>watchEffect()</code> 允许我们自动跟踪回调的响应式依赖。上面的侦听器可以重写为：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7jvf4glqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7jvf4glqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watchEffect</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>    <span class="hljs-string">`https://jsonplaceholder.typicode.com/todos/<span class="hljs-subst">$&#123;todoId.value&#125;</span>`</span><br>  )<br>  data.<span class="hljs-property">value</span> = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>这个例子中，回调会立即执行，不需要指定 <code>immediate: true</code>。在执行期间，它会自动追踪 <code>todoId.value</code> 作为依赖（和计算属性类似）。每当 <code>todoId.value</code> 变化时，回调会再次执行。有了 <code>watchEffect()</code>，我们不再需要明确传递 <code>todoId</code> 作为源值。</p><p>对于这种只有一个依赖项的例子来说，<code>watchEffect()</code> 的好处相对较小。但是对于有多个依赖项的侦听器来说，使用 <code>watchEffect()</code> 可以消除手动维护依赖列表的负担。此外，如果你需要侦听一个嵌套数据结构中的几个属性，<code>watchEffect()</code> 可能会比深度侦听器更有效，因为它将只跟踪回调中被使用到的属性，而不是递归地跟踪所有的属性。</p><p class="note note-info">watchEffect仅会在其同步执行期间，才追踪依赖。在使用异步回调时，只有在第一个await正常工作前访问到的属性才会被追踪。</p><p><code>watch</code> 和 <code>watchEffect</code> 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：</p><ul><li><code>watch</code>只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。<code>watch</code> 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</li><li><code>watchEffect</code>会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</li></ul><p>当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新<strong>之前</strong>被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的 DOM，你需要指明 <code>flush: &#39;post&#39;</code> 选项：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1gbypylqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1gbypylqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(source, callback, &#123;<br>  <span class="hljs-attr">flush</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>&#125;)<br><br><span class="hljs-title function_">watchEffect</span>(callback, &#123;<br>  <span class="hljs-attr">flush</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></div></figure><p>后置刷新的 <code>watchEffect()</code> 有个更方便的别名 <code>watchPostEffect()</code>：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-q90k25lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-q90k25lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; watchPostEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">watchPostEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 在 Vue 更新后执行 */</span><br>&#125;)<br></code></pre></td></tr></table></div></figure><p><mark>停止侦听器</mark>：在 <code>setup()</code> 或 <code>&lt;script setup&gt;</code> 中用同步语句创建的侦听器，会自动绑定到宿主组件实例上，并且会在宿主组件卸载时自动停止。因此，在大多数情况下，你无需关心怎么停止一个侦听器。</p><p>一个关键点是，侦听器必须用<strong>同步</strong>语句创建：如果用异步回调创建一个侦听器，那么它不会绑定到当前组件上，你必须手动停止它，以防内存泄漏。例如：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-syvyinlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-syvyinlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; watchEffect &#125; from &#x27;vue&#x27;<br><br>&lt;!--它会自动停止--&gt;<br>watchEffect(() =&gt; &#123;&#125;)<br><br>&lt;!--这个则不会--&gt;<br>setTimeout(() =&gt; &#123;<br>  watchEffect(() =&gt; &#123;&#125;)<br>&#125;, 100)<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>要手动停止一个侦听器，请调用 <code>watch</code> 或 <code>watchEffect</code> 返回的函数：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wk2erblqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wk2erblqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> unwatch = <span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)<br><br><span class="hljs-comment">/* ...当该侦听器不再需要时 */</span><br><span class="hljs-title function_">unwatch</span>()<br></code></pre></td></tr></table></div></figure><p>注意，需要异步创建侦听器的情况很少，请尽可能选择同步创建。如果需要等待一些异步数据，你可以使用条件式的侦听逻辑：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fogxculqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fogxculqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 需要异步请求得到的数据 */</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)<br><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (data.<span class="hljs-property">value</span>) &#123;<br>    <span class="hljs-comment">/* 数据加载后执行某些操作... */</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></div></figure><p><code>handler</code>函数也常用于<code>watch</code>和<code>computed</code>等功能中，用于监听数据变化并进行相应的处理。<code>handler</code>函数通常接受两个参数：</p><ul><li>newVal：表示数据发生变化后的新值。</li><li>oldVal：表示数据发生变化前的旧值。</li></ul><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-j6k1emlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-j6k1emlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-string">&#x27;obj.a&#x27;</span>: &#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params">newName, oldName</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj.a changed&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">/* deep: true */</span><br>  &#125;<br>&#125; <br></code></pre></td></tr></table></div></figure><hr><p>使用 <code>v-model</code> 指令来实现 <code>el-dialog</code> 的显示和隐藏。这个指令可以让你双向绑定一个值，并自动更新该值的状态：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3pdik1lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3pdik1lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-button @click=&quot;showDialog = true&quot;&gt;打开对话框&lt;/el-button&gt;<br><br>    &lt;el-dialog v-model=&quot;showDialog&quot; title=&quot;对话框标题&quot;&gt;<br>      &lt;!-- 对话框内容 --&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>export default &#123;<br>  setup() &#123;<br>    const showDialog = ref(false);<br><br>    return &#123;<br>      showDialog,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>在上面的示例中，我们创建了一个名为 <code>showDialog</code> 的响应式变量，并将其初始值设为 <code>false</code> ，表示对话框默认是隐藏的。当点击按钮时，我们将 <code>showDialog</code> 的值设为 <code>true</code> ，对话框将显示出来。</p><p>通过使用 <code>v-model=&quot;showDialog&quot;</code>，我们将 <code>showDialog</code> 的值与 <code>el-dialog</code> 组件的 <code>visible</code> 属性进行了绑定。当 <code>showDialog</code> 的值发生变化时，<code>el-dialog</code> 组件的显示状态也会相应地发生变化。</p><hr><p>数组深拷贝：</p><ol><li>使用 <code>Array.from()</code> 方法进行浅拷贝，再结合 <code>map()</code> 或者 <code>JSON.parse(JSON.stringify())</code> 方法进行深拷贝：</li></ol><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zv5um4lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zv5um4lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*  浅拷贝  */</span> <br><span class="hljs-keyword">const</span> shallowCopy = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(originalArray);<br><br><span class="hljs-comment">/*  深拷贝方式一：使用 map()  */</span> <br><span class="hljs-keyword">const</span> deepCopy1 = originalArray.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (&#123;...item&#125;));<br><br><span class="hljs-comment">/*  深拷贝方式二：使用 JSON.parse(JSON.stringify())  */</span> <br><span class="hljs-keyword">const</span> deepCopy2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(originalArray));<br></code></pre></td></tr></table></div></figure><ol start="2"><li>使用扩展运算符 <code>...</code> 进行深拷贝：</li></ol><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mgnhbqlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mgnhbqlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> deepCopy = [...originalArray];<br></code></pre></td></tr></table></div></figure><p>需要注意的是，上述方法在深拷贝过程中只适用于纯数据（例如字符串、数字、布尔值、对象和数组）。如果数组中的元素是引用类型（如对象），则仅拷贝了引用，而不是创建新的对象。如果需要完全复制对象及其嵌套属性，可以考虑使用第三方库如 <code>lodash.cloneDeep()</code>。</p><p>例如，在 Vue 3 组件中，你可以这样使用 <code>lodash</code> 进行深拷贝：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gyzhiilqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gyzhiilqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> cloneDeep <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash/cloneDeep&#x27;</span>;<br><br><span class="hljs-keyword">const</span> deepCopy = <span class="hljs-title function_">cloneDeep</span>(originalArray);<br></code></pre></td></tr></table></div></figure><p>请注意，深拷贝数组可能会导致性能问题，特别是对于包含大量数据的数组。在处理大型数据集时，请谨慎使用深拷贝。</p><hr><p>url替换所有的空格：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ctsxz8lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ctsxz8lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;handleDecode(item)&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;textDecoration:&#x27;none&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-awabpblqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-awabpblqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDecode</span>=(<span class="hljs-params">item:string</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> decodeUrl=<span class="hljs-string">&#x27;/api/&#x27;</span>+decodeURIComponenr(item)<br>    <span class="hljs-keyword">let</span> replaceUrl=decodeUrl.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/ /g</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> replaceUrl<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>区分同一组件呈现不同页面：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1was21lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1was21lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-row</span> <span class="hljs-attr">:gutter</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;$route.name==&#x27;navigation&#x27; ? &#x27;el-row-navigation&#x27; : &#x27;el-row-chat&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;$route.name==&#x27;navigation&#x27; ? &#x27;left left-navigation&#x27; : &#x27;left left-chat&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>全局引入element plus：</p><figure class="highlight shell"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g5ia8vlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g5ia8vlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i element-plus --save<br></code></pre></td></tr></table></div></figure><p>完整引入elementplus：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f56cwylqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f56cwylqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/*  main.ts  */</span> <br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></div></figure><p>如果您使用 Volar，在 <code>tsconfig.json</code> 中通过 <code>compilerOptions.type</code> 指定全局组件类型。</p><figure class="highlight json"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-rq5xm8lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-rq5xm8lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/*  tsconfig.json  */</span> <br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;element-plus/global&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></div></figure><hr><p>使用element plus内置图标：<a href="https://element-plus.org/zh-CN/component/icon.html#icon-collection">https://element-plus.org/zh-CN/component/icon.html#icon-collection</a></p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qb0cvzlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qb0cvzlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install @element-plus/icons --save-dev<br></code></pre></td></tr></table></div></figure><p>main.ts：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4b6qptlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4b6qptlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElementPlusIconsVue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, component] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(<span class="hljs-title class_">ElementPlusIconsVue</span>)) &#123;<br>    app.<span class="hljs-title function_">component</span>(key, component)<br>&#125;<br></code></pre></td></tr></table></div></figure><p>直接使用icon属性：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-s02n08lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-s02n08lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;Search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>element plus的分页  &#x2F;page和Go to改为中文：</p><p>main.ts：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b43vytlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b43vytlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> zhCn <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;elementplus/dist/locale/zh-cn.mjs&#x27;</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>,&#123;<br>    <span class="hljs-attr">locale</span>: zhCn,<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>src文件夹下面新建<code>element-plus.d.ts</code>：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-dvvyallqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-dvvyallqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;element-plus/dist/locale/zh-cn.mjs&#x27;</span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">zhCn</span>: <span class="hljs-built_in">any</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> znCn<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>el-table滚动条到最底部：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4n5m1olqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4n5m1olqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tableRef&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8at02elqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8at02elqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">()=&gt;</span>tableRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>,tableRef.<span class="hljs-property">value</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">bodyWrapper</span>.<span class="hljs-property">scrollHeight</span>)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>设置el-button点击多次只触发一次方法：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3d06orlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3d06orlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-button @click=&quot;handleClick&quot; :disabled=&quot;isButtonDisabled&quot;&gt;按钮&lt;/el-button&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const isButtonDisabled = ref(false);<br><br>const handleClick = () =&gt; &#123;<br>  if (!isButtonDisabled.value) &#123;<br>    isButtonDisabled.value = true;<br>    setTimeout(() =&gt; &#123;<br>      isButtonDisabled.value = false;<br>    &#125;, 1000); <br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><hr><p>el-tooltip的内容可滚动：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-if6diqlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-if6diqlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-tooltip</span> <span class="hljs-attr">:enterable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:popper-style</span>=<span class="hljs-string">&quot;&#123;width: px2rem(&#x27;400&#x27;)&#125;&quot;</span> <span class="hljs-attr">:popper-options</span>=<span class="hljs-string">&quot;&#123;modifies:&#123;preventOverflow:&#123;boundariesElement:&#x27;window&#x27;&#125;&#125;&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        &#123;&#123;item&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">content</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;maxHeight:px2rem(&#x27;350&#x27;),overflowY: &#x27;scroll&#x27;,lineHeight:px2rem(&#x27;25&#x27;)&#125;&quot;</span>&gt;</span><br>            &#123;&#123;item&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-tooltip</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>使用iconfont图标：</p><ol><li><p><a href="https://www.iconfont.cn/%EF%BC%9A%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%8A%A0%E5%85%A5%E8%B4%AD%E7%89%A9%E8%BD%A6">https://www.iconfont.cn/：创建项目，加入购物车</a></p></li><li><p>使用font class方式下载文件夹到本地：</p><img src="image-20231122173730836.png" alt="image-20231122173730836" style="zoom:50%;" /></li><li><p>放在assets文件夹下：</p><img src="image-20231122173926927.png" alt="image-20231122173926927" style="zoom:40%;" /></li><li><p>在main.ts中引入：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4dp6f6lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4dp6f6lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/assets/iconfont/iconfont.css&#x27;</span><br></code></pre></td></tr></table></div></figure></li></ol><hr><p>使用svg有色图标：</p><ol><li><p>在 components 目录下新建 SvgIcon.vue 文件</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-abahhrlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-abahhrlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- src/components/SvgIcon.vue --&gt;<br>&lt;template&gt;<br>  &lt;svg :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot;&gt;<br>    &lt;use :xlink:href=&quot;iconClassName&quot; :fill=&quot;color&quot; /&gt;<br>  &lt;/svg&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; computed &#125; from &#x27;vue&#x27;;<br>const props = defineProps(&#123;<br>  iconName: &#123;<br>    type: String,<br>    required: true<br>  &#125;,<br>  className: &#123;<br>    type: String,<br>    default: &#x27;&#x27;<br>  &#125;,<br>  color: &#123;<br>    type: String,<br>    default: &#x27;#409eff&#x27;<br>  &#125;<br>&#125;);<br><br>const iconClassName = computed(()=&gt;&#123;<br>  return `#$&#123;props.iconName&#125;`;<br>&#125;)<br><br>const svgClass = computed(() =&gt; &#123;<br>  if (props.className) &#123;<br>    return `svg-icon $&#123;props.className&#125;`;<br>  &#125;<br>  return &#x27;svg-icon&#x27;;<br>&#125;);<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>.svg-icon &#123;<br>  width: 1em;<br>  height: 1em;<br>  position: relative;<br>  fill: currentColor;<br>  vertical-align: -2px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure></li><li><p>在 main.ts 中全局注册：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5jdex0lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5jdex0lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SvgIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/SvgIcon.vue&#x27;</span><br><br>app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;SvgIcon&#x27;</span>, <span class="hljs-title class_">SvgIcon</span>);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></div></figure></li><li><p>引入iconfont图标：在项目 assets 目录下新建svg.js文件，然后将 iconfont 在线地址中提供的代码全部复制过来。【加载较慢】</p><img src="image-20231127093308886.png" alt="image-20231127093308886" style="zoom:50%;" /></li><li><p>具体使用：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wlacc2lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wlacc2lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">iconName</span>=<span class="hljs-string">&quot;icon-gongzuoleixing&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ol><p>修改svg图标颜色，保存为副本：</p><img src="image-20231023162606697.png" alt="image-20231023162606697" style="zoom:50%;" /><hr><p>去除首尾空行：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yg5ymjlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yg5ymjlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;inputText&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr><p>css样式覆盖：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f1abpjlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f1abpjlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.tocbot-list</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.95rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* 覆盖前一个样式 */</span><br><span class="hljs-selector-class">.tocbot-list</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.75rem</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><h2 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h2><p>设置<code>&lt;img src=&quot;&quot; class=&quot;align&quot;&gt;</code>的居中方式：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-h5wt73lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-h5wt73lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">//水平靠左<br><span class="hljs-selector-class">.align</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br> <br>//水平靠右<br><span class="hljs-selector-class">.align</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br> <br>//水平居中<br><span class="hljs-selector-class">.align</span> &#123;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>div里的img标签实现水平垂直居中<code>&lt;div&gt;&lt;img src=&quot;&quot;&gt;&lt;/div&gt;</code>：</p><ol><li>将display设置成table-cell，水平居中设置text-align为center，垂直居中设置vertical-align为middle：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-sq3yk6lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-sq3yk6lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 150px;<br>        height: 100px;<br>        display: table-cell;<br>        vertical-align: middle;<br>        text-align: center;<br>        border: 1px solid #000;<br>    &#125;<br>    img &#123;<br>        width: 50px;<br>        height: 50px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="2"><li>通过position定位实现。将div设置成相对定位relative，将img设置成绝对定位absolute，left:50%，top:50%,此时图片的左上角位于div的中心，要是图片的中心位于div的中心，就需要将图片向上移动图片高度的一半，并向左移动图片宽度的一半：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-wyqn5wlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-wyqn5wlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 150px;<br>        height: 100px;<br>        position: relative;<br>        border: 1px solid #000;<br>    &#125;<br>    img &#123;<br>        width: 50px;<br>        height: 50px;<br>        position: absolute;<br>        top: 50%;<br>        left: 50%;<br>        margin-top: -25px; // 高度的一半<br>        margin-left: -25px; // 宽度的一半<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="3"><li>用于不清楚图片或元素的真实宽高情况：通过position定位来实现。将div设置成相对定位relative，将img设置成绝对定位absolute，left:50%，top:50%，此时图片的左上角位于div的中心，要是图片的中心位于div的中心，就需要将图片向上移动图片高度的一半，并向左移动图片宽度的一半，如果不知道元素的宽高，可以用transform: translate(-50%,-50%)：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-g22311lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-g22311lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 150px;<br>        height: 100px;<br>        position: relative;<br>        border: 1px solid #000;<br>    &#125;<br>    img &#123;<br>        width: 50px;<br>        height: 50px;<br>        position: absolute;<br>        top: 50%;<br>        left: 50%;<br>        transform: translate(-50%,-50%);<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="4"><li>弹性布局flex：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5o321ylqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5o321ylqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 150px;<br>        height: 100px;<br>        border: 1px solid #000;<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        margin: 0 auto;<br>    &#125;<br>    img &#123;<br>        width: 50px;<br>        height: 50px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="5"><li>设置父div为table-cell属性：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-4snggplqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-4snggplqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 200px;<br>        height: 200px;<br>        border: 1px solid #000;<br>        display: table-cell;<br>        text-align: center;<br>        vertical-align: middle;<br>    &#125;<br>    img &#123;<br>        width: 100px;<br>        height: 100px;<br>        display: inline-block;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="6"><li>无固定宽高：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-db1swolqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-db1swolqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 200px;<br>        height: 200px;<br>        margin: 0 auto;<br>        text-align: center;<br>        position: relative;<br>        border: 1px solid #000;<br>    &#125;<br>    img &#123;<br>        width: 100px;<br>        height: 100px;<br>        position: absolute;<br>        border: 1px solid #000;<br>        left: 50%;<br>        top: 50%;<br>        -webkit-transform: translate(-50%,-50%);<br>        -moz-transform:translate(-50%,-50%);<br>        -ms-transform: translate(-50%,-50%);<br>        -o-transform: translate(-50%,-50%);<br>        transform: translate(-50%,-50%);<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><ol start="7"><li>固定宽高：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-w6g597lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-w6g597lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style type=&quot;text/css&quot;&gt;<br>    *&#123;<br>        margin: 0;<br>        padding: 0;<br>    &#125;<br>    div&#123;<br>        width: 200px;<br>        height: 200px;<br>        border: 1px solid #000;<br>        margin: 0 auto;<br>        text-align: center;<br>        position: relative;<br>    &#125;<br>    img &#123;<br>        width: 100px;<br>        height: 100px;<br>        position: absolute;<br>        border: 1px solid #000;<br>        left: 50%;<br>        top: 50%;<br>        margin-top: -50px;<br>        margin-left: -50px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><hr><p>点击按钮复制文字：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-tiyjn4lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-tiyjn4lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>text.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">textToCopy</span>;<br><span class="hljs-comment">/*  检查浏览器是否支持剪贴板 API 并且页面处于安全上下文中  */</span><br> <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">clipboard</span> &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">isSecureContext</span>) &#123;<br> <span class="hljs-title class_">ElMessage</span>(&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;复制成功&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>    &#125;)<br>     <span class="hljs-keyword">return</span> navigator.<span class="hljs-property">clipboard</span>.<span class="hljs-title function_">writeText</span>(text.<span class="hljs-property">value</span>);<br> &#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">/* 将textarea添加到文档中 */</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(textarea);<br>    <span class="hljs-comment">/* 选中textarea中的文本 */</span> <br>    textarea.<span class="hljs-title function_">select</span>();<br>    <span class="hljs-title class_">ElMessage</span>(&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;复制成功&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(res,rej)=&gt;&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>) ? <span class="hljs-title function_">res</span>(<span class="hljs-string">&#x27;复制成功&#x27;</span>) : <span class="hljs-title function_">rej</span>(<span class="hljs-string">&#x27;复制失败&#x27;</span>)<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(text)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>或</p><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-9tw76olqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-9tw76olqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">copyToClip</span>(<span class="hljs-params">text: string</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> <span class="hljs-attr">input</span>: <span class="hljs-title class_">HTMLTextAreaElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;textarea&#x27;</span>)<br>      input.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;readonly&#x27;</span>, <span class="hljs-string">&#x27;readonly&#x27;</span>)<br>      input.<span class="hljs-property">value</span> = text<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(input)<br>      input.<span class="hljs-title function_">select</span>()<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>))<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>)<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(input)<br>      <span class="hljs-title function_">resolve</span>(text)<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight jsx"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-mrwe42lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-mrwe42lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCopy</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">copyToClip</span>(props.<span class="hljs-property">text</span> || <span class="hljs-string">&#x27;&#x27;</span>)<br>    message.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;复制成功&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">catch</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;复制失败&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>调用接口，结果返回数据是从缓存中拿到的而非实际接口中——from disk cache：在utils文件夹下的request.ts文件中加入：</p><figure class="highlight typescript"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ypehaulqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ypehaulqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> instance=axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></div></figure><hr><p>获取Promise对象中的PromiseResult中的数据：Promise 简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作的结果。</p><img src="image-20231018144700439.png" alt="image-20231018144700439" style="zoom:50%;" /><ol><li>异步获取Promise对象的值还可以使用Promise对象的then方法，但是then方法是在接口请求对象的里面执行数据处理的操作。</li></ol><figure class="highlight javascript"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6h88etlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6h88etlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getqueryAIRecommend</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></div></figure><ol start="2"><li>通过 async await 来获取：async 用于申明一个function是异步的；而await则可以认为是 async await的简写形式，是等待一个异步方法执行完成的。</li></ol><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-a8sz7dlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-a8sz7dlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">getShelfList</span>(<span class="hljs-params">id</span>) &#123;<br>  letlist = [];<br>  list = <span class="hljs-keyword">await</span> <span class="hljs-title function_">infoStore</span>(id)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<br>&#125;<br></code></pre></td></tr></table></div></figure><p>async&#x2F;awiat的使用规则：</p><ol><li>async和await要一起用；</li><li>async 表示这是一个async函数， await只能用在async函数里面，不能单独使用；</li><li>async 返回的是一个Promise对象，await就是等待这个promise的返回结果后，再继续执行；</li><li>await 等待的是一个Promise对象，后面必须跟一个Promise对象，但是不必写then()，直接就可以得到返回值。</li></ol><hr><p>单行省略：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x0ltxglqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x0ltxglqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ellipsis</span> &#123;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>多行省略：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8opzn0lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8opzn0lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ellipsis</span> &#123;<br>  <span class="hljs-attribute">display</span>: -webkit-box;<br>  -webkit-line-clamp: <span class="hljs-number">2</span>;<br>  -webkit-box-orient: vertical;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><code>-webkit-line-clamp</code> CSS 属性可以把块容器中的内容限制为指定的行数。它只有在 display 属性设置成 -webkit-box 或者 -webkit-inline-box 并且 box-orient 属性设置成 vertical时才有效果。在大部分情况下，也需要设置 overflow 属性为 hidden，否则，里面的内容不会被裁减，并且在内容显示为指定行数后还会显示省略号。</p><hr><p>tab标签页：要让 <code>label</code> 的值为 &quot;制度1&quot;、&quot;制度2&quot; 等，你可以在模板中使用插值表达式和字符串拼接的方式。</p><ol><li><p>方法一：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-0oz2gylqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-0oz2gylqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-tab-pane</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, xindex) in tmp&quot;</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;&#x27;制度&#x27; + (xindex + 1)&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 其他内容 --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">el-tab-pane</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>在这里，<code>(xindex + 1)</code> 表示索引 <code>xindex</code> 的值加 1，然后将其与字符串 &quot;制度&quot; 进行拼接，得到最终的 <code>label</code> 值。</p><p class="note note-success" style="border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;">不加括号：制度01 制度11 制度21</p></li><li><p>方法二：插槽</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-irh0aylqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-irh0aylqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-tab-pane</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, xindex) in tmp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">label</span>&gt;</span>制度&#123;&#123;xindex + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其他内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-tab-pane</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ol><p>修改el-tab-pane的label字体大小：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-asg2d2lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-asg2d2lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">:<span class="hljs-built_in">deep</span>(.el-tabs__item)&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>Vue应用中代码高亮：官网<a href="https://highlightjs.org/">https://highlightjs.org/</a></p><p>Github仓库<a href="https://github.com/highlightjs/highlight.js">https://github.com/highlightjs/highlight.js</a></p><p><a href="https://github.com/highlightjs/vue-plugin">https://github.com/highlightjs/vue-plugin</a></p><p>文档教程<a href="https://highlightjs.readthedocs.io/en/latest/">https://highlightjs.readthedocs.io/en/latest/</a></p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-gf9n0qlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-gf9n0qlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install highlight.js<br>npm install --save @highlightjs/vue-plugin<br></code></pre></td></tr></table></div></figure><p>main.ts：</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8laz4glqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8laz4glqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;highlight.js/styles/github-dark-dimmed.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;highlight.js/lib/common&#x27;</span>;<br><span class="hljs-keyword">import</span> hljsVuePlugin <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@highlightjs/vue-plugin&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(router)<br>app.<span class="hljs-title function_">use</span>(hljsVuePlugin)<br></code></pre></td></tr></table></div></figure><img src="image-20231027140707342.png" alt="image-20231027140707342" style="zoom:50%;" /><p>home.vue：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-zu9vknlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-zu9vknlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; px2rem &#125; from &#x27;@/utils/index&#x27;<br>const code = `<br>CREATE TABLE &quot;topic&quot; (<br>    &quot;id&quot; integer NOT NULL PRIMARY KEY,<br>    &quot;forum_id&quot; integer NOT NULL,<br>    &quot;subject&quot; varchar(255) NOT NULL<br>);<br>ALTER TABLE &quot;topic&quot;<br>ADD CONSTRAINT forum_id FOREIGN KEY (&quot;forum_id&quot;)<br>REFERENCES &quot;forum&quot; (&quot;id&quot;);<br><br>-- Initials<br>insert into &quot;topic&quot; (&quot;forum_id&quot;, &quot;subject&quot;)<br>values (2, &#x27;D&#x27;&#x27;artagnian&#x27;);<br>`<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;p class=&quot;input&quot; :style=&quot;&#123; fontSize: px2rem(&#x27;20px&#x27;) &#125;&quot;&gt;你好&lt;/p&gt;<br>  &lt;highlightjs autodetect :code=&quot;code&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></div></figure><img src="image-20231027141156678.png" alt="image-20231027141156678" style="zoom:50%;" /><p>实现效果：</p><img src="image-20231027142222797.png" alt="image-20231027142222797" style="zoom:40%;" /><hr><p>web富文本编辑器：<a href="https://www.wangeditor.com/v5">https://www.wangeditor.com/v5</a></p><figure class="highlight bash"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-y3h6vllqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-y3h6vllqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install @wangeditor/editor --save<br>npm install @wangeditor/editor-for-vue@next --save<br></code></pre></td></tr></table></div></figure><p class="note note-danger" style="border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;">无法找到模块@wangeditor,/editor-for-vue”的声明文件。“d:/桌面/vite-project/node modules/@wangeditor/editor-for-vue/dist/index.esm.js'隐式拥有"any"类型。There are types at'd:/桌面/vite-project/node_modules/@wangeditor/editor-for-vue/dist/src/index.d.ts',butthis result could not be resolved when respecting package.json "exports".The '@wangeditor/editor-for-vue'library may need to update itspackage.json or typings.ts(7016)</p><img src="image-20231027150932023.png" alt="image-20231027150932023" style="zoom:50%;" /><p>将 wangEditor 用于 Typescript：解决方法：新建typings.d.ts文件</p><figure class="highlight ts"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hn7zt7lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hn7zt7lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">SlateDescendant</span>, <span class="hljs-title class_">SlateElement</span>, <span class="hljs-title class_">SlateText</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@wangeditor/editor&#x27;</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;@wangeditor/editor&#x27;</span> &#123;<br>    <span class="hljs-comment">/*  扩展 Text  */</span> <br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SlateText</span> &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span><br>    &#125;<br><br>    <span class="hljs-comment">/*  扩展 Element  */</span> <br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SlateElement</span> &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span><br>        <span class="hljs-attr">children</span>: <span class="hljs-title class_">SlateDescendant</span>[]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231027154725474.png" alt="image-20231027154725474" style="zoom:50%;" /><p>保证typings.d.ts文件在 <code>tsconfig.json</code> 的 <code>include</code> 中：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5fea5dlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5fea5dlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;src/**/*.ts&quot;</span>, <span class="hljs-string">&quot;src/**/*.d.ts&quot;</span>, <span class="hljs-string">&quot;src/**/*.tsx&quot;</span>, <span class="hljs-string">&quot;src/**/*.vue&quot;</span>],<br></code></pre></td></tr></table></div></figure><img src="image-20231125183648137.png" alt="image-20231125183648137" style="zoom:50%;" /><hr><p>多类选择器：<code>CSS</code>中类选择器用点号表示。实际项目中一个<code>div</code>元素为了能被多个样式表匹配到（样式复用），通常<code>div</code>的<code>class</code>中由好几段组成，如<code>&lt;div class=&quot;user login&quot;&gt;</code>能被<code>.user</code>和<code>.login</code>两个选择器选中。如果这两个选择器中有相同的属性值，则该属性值先被改为<code>.user</code>中的值，再被改为<code>.login</code>中的值，即重复的属性以最后一个选择器中的属性值为准。测试如下：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-h7xa6rlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-h7xa6rlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> </span><br><span class="language-css"><span class="hljs-selector-class">.user</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.login</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:blue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;user&#x27;</span>&gt;</span>你好。这是一个 DIV 元素，class=&#x27;user&#x27;。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;login&#x27;</span>&gt;</span>你好。这是一个 DIV 元素，class=&#x27;login&#x27;。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;user login&#x27;</span>&gt;</span>你好。这是一个 DIV 元素，class=&#x27;user login&#x27;。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>第三个<code>div</code>元素的背景颜色以<code>.login</code>中的为准，效果如下图：</p><img src="image-20231127093336620.png" alt="image-20231127093336620" style="zoom:50%;" /><p><code>CSS</code>中多个类选择器之间有没有空格是怎样的匹配规则？<code>.user.login</code>和<code>.user .login</code>（中间有空格）的区别？</p><p>电商项目中的导航栏，包括用户的登录&#x2F;注册&#x2F;注销，以及购物车等信息。</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-d716dblqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-d716dblqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user not-login&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link js-login&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link js-register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user login&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link-text&quot;</span>&gt;</span><br>                    欢迎，<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span>&gt;</span>退出<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 右侧的导航链接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./cart.html&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-shopping-cart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    购物车(<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cart-cont&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./order-list.html&quot;</span>&gt;</span>我的订单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./user-center.html&quot;</span>&gt;</span>我的MMall<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./about.html&quot;</span>&gt;</span>关于MMall<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1gw85jlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1gw85jlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav</span>&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><br><span class="hljs-comment">/* 用户部分 */</span><br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.user</span>&#123;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.login</span>&#123;<br>    <span class="hljs-attribute">display</span>: none;<br>&#125;<br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.user</span> <span class="hljs-selector-class">.link</span>&#123;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 导航链接部分 */</span><br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.nav-list</span>&#123;<br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.nav-list</span> <span class="hljs-selector-class">.nav-item</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>观察上面代码的运行结果可知：</p><ul><li><code>.nav .user</code>（中间有空格）匹配到<code>class</code>含有<code>nav</code>的元素下面的<code>class</code>含有<code>user</code>的元素，是<code>&lt;span class=&quot;user not-login&quot;&gt;</code>和<code>&lt;span class=&quot;user login&quot;&gt;</code>。</li><li><code>.user.login</code>（中间没有空格）匹配到<code>class</code>同时含有<code>user</code>和<code>login</code>的元素，是<code>&lt;span class=&quot;user login&quot;&gt;</code>。</li><li><code>.nav .user.login</code>（<code>.nav</code>和<code>.user</code>中间有空格，<code>.user</code>和<code>.login</code>中间没有空格）匹配到<code>class</code>含有<code>nav</code>的元素下面的<code>class</code>同时含有<code>user</code>和<code>login</code>的元素，是<code>&lt;span class=&quot;user login&quot;&gt;</code>。</li></ul><hr><p><code>white-space</code> 是 CSS 的一个属性，用于控制元素内空格、换行符和连续空格的处理方式。</p><p>该属性有以下几个取值：</p><ul><li><code>normal</code>：合并连续空格和换行符，忽略换行符前后的空格。</li><li><code>nowrap</code>：合并连续空格和换行符，但不允许文本换行。</li><li><code>pre</code>：保留连续空格和换行符，但不允许文本换行。</li><li><code>pre-wrap</code>：保留连续空格和换行符，允许文本换行。</li><li><code>pre-line</code>：合并连续空格和换行符，允许文本换行。</li></ul><p>例如，如果将 <code>white-space</code> 属性设置为 <code>pre</code>，那么在 HTML 中出现的所有空格和换行符都会被保留，而不会被浏览器忽略或合并。这在需要保留代码格式或排版的情况下非常有用。</p><p>另外，<code>white-space</code> 属性还可以与 <code>text-overflow</code> 属性一起使用，来控制文本溢出的处理方式。例如，将 <code>white-space</code> 设置为 <code>nowrap</code>，并将 <code>text-overflow</code> 设置为 <code>ellipsis</code>，可以在文本过长时自动截断并显示省略号。</p><hr><p>要在 flex 容器中的两行之间添加间距，你可以使用 <code>gap</code> 属性。这个属性定义了 flex 容器内各个项目之间的间距，包括行与行之间的间距。</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2vf5mjlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2vf5mjlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置行与行之间的间距为 10px */</span><br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>出现<code>hairlines</code>类：【未知原因：引入了库导致修改了全局样式】</p><img src="image-20231124154048307.png" alt="image-20231124154048307" style="zoom:50%;" /><hr><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2><p><mark>ChatGPT 打字机消息回复实现原理</mark>：<a href="https://juejin.cn/post/7229632570374783034">https://juejin.cn/post/7229632570374783034</a></p><p>在使用 ChatGPT 时，发现输入 prompt 后，页面是逐步给出回复的，起初以为使用了 WebSckets 持久化连接协议，查看其网络请求，发现这个接口的通信方式并非传统的 http 接口或者 WebSockets，而是基于 EventStream 的事件流，像打字机一样，一段一段的返回答案。</p><p>ChatGPT 是一个基于深度学习的大型语言模型，处理自然语言需要大量的计算资源和时间，响应速度肯定比普通的读数据库要慢的多，普通 http 接口等待时间过长，显然并不合适。对于这种单项对话场景，ChagtGPT 将先计算出的数据“推送”给用户，边计算边返回，避免用户因为等待时间过长关闭页面。而这，可以采用 SSE 技术。</p><p>Server-Sent Events 服务器推送事件，简称 SSE，是一种服务端实时<mark>主动</mark>向浏览器推送消息的技术。</p><p>SSE 是 HTML5 中一个与通信相关的 API，主要由两部分组成：服务端与浏览器端的通信协议（<code>HTTP</code> 协议）及浏览器端可供 JavaScript 使用的 <code>EventSource</code> 对象。 该API 与 WebSockets API 的不同之处在于：</p><table><thead><tr><th>Server-Sent Events API</th><th>WebSockets API</th></tr></thead><tbody><tr><td>基于 HTTP 协议</td><td>基于 TCP 协议</td></tr><tr><td>单工，只能服务端单向发送消息</td><td>全双工，可以同时发送和接收消息</td></tr><tr><td>轻量级，使用简单</td><td>相对复杂</td></tr><tr><td>内置断线重连和消息追踪的功能</td><td>不在协议范围内，需手动实现</td></tr><tr><td>文本或使用 Base64 编码和 gzip 压缩的二进制消息</td><td>类型广泛</td></tr><tr><td>支持自定义事件类型</td><td>不支持自定义事件类型</td></tr><tr><td>连接数 HTTP&#x2F;1.1 6 个，HTTP&#x2F;2 可协商（默认 100）</td><td>连接数无限制</td></tr></tbody></table><hr><p>服务端实现：</p><p>协议：SSE 协议非常简单，本质是浏览器发起 http 请求，服务器在收到请求后，返回状态与数据，并附带以下 headers：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-r7s4y6lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-r7s4y6lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span>: text/event-stream<br><span class="hljs-title class_">Cache</span>-<span class="hljs-title class_">Control</span>: no-cache<br><span class="hljs-title class_">Connection</span>: keep-alive<br></code></pre></td></tr></table></div></figure><ul><li>SSE API规定推送事件流的 MIME 类型为 <code>text/event-stream</code>。</li><li>必须指定浏览器不缓存服务端发送的数据，以确保浏览器可以实时显示服务端发送的数据。</li><li>SSE 是一个一直保持开启的 TCP 连接，所以 Connection 为 keep-alive。</li></ul><p>消息格式：</p><ul><li>EventStream（事件流）为 <code>UTF-8</code> 格式编码的<code>文本</code>或使用 Base64 编码和 gzip 压缩的二进制消息。</li><li>每条消息由一行或多行字段（<code>event</code>、<code>id</code>、<code>retry</code>、<code>data</code>）组成，每个字段组成形式为：<code>字段名:字段值</code>。字段以行为单位，每行一个（即以 <code>\n</code> 结尾）。以<code>冒号</code>开头的行为注释行，会被浏览器忽略。</li><li>每次推送，可由多个消息组成，每个消息之间以空行分隔（即最后一个字段以<code>\n\n</code>结尾）。</li></ul><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">注意：<br/>- 除上述四个字段外，其他所有字段都会被忽略。<br/>- 如果一行字段中不包含冒号，则整行文本将被视为字段名，字段值为空。<br/>- 注释行可以用来防止链接超时，服务端可以定期向浏览器发送一条消息注释行，以保持连接不断。</p><p>event：</p><ul><li><p>事件类型。如果指定了该字段，则在浏览器收到该条消息时，会在当前 <code>EventSource</code> 对象（见 4）上触发一个事件，事件类型就是该字段的字段值。可以使用 <code>addEventListener</code> 方法在当前 <code>EventSource</code> 对象上监听任意类型的命名事件。</p></li><li><p>如果该条消息没有 <code>event</code> 字段，则会触发 <code>EventSource</code> 对象 <code>onmessage</code> 属性上的事件处理函数。</p></li></ul><p>id：</p><ul><li>事件ID。事件的唯一标识符，浏览器会跟踪事件ID，如果发生断连，浏览器会把收到的最后一个事件ID放到 HTTP Header <code>Last-Event-Id</code> 中进行重连，作为一种简单的同步机制。</li><li>例如可以在服务端将每次发送的事件ID值自动加 1，当浏览器接收到该事件ID后，下次与服务端建立连接后再请求的 Header 中将同时提交该事件ID，服务端检查该事件ID是否为上次发送的事件ID，如果与上次发送的事件ID不一致则说明浏览器存在与服务器连接失败的情况，本次需要同时发送前几次浏览器未接收到的数据。</li></ul><p>retry：</p><ul><li>重连时间。整数值，单位 ms，如果与服务器的连接丢失，浏览器将等待指定时间，然后尝试重新连接。如果该字段不是整数值，会被忽略。</li><li>当服务端没有指定浏览器的重连时间时，由浏览器自行决定每隔多久与服务端建立一次连接（一般为 30s）。</li></ul><p>data：</p><ul><li>消息数据。数据内容只能以一个字符串的文本形式进行发送，如果需要发送一个对象时，需要将该对象以一个 JSON 格式的字符串的形式进行发送。在浏览器接收到该字符串后，再把它还原为一个 JSON 对象。</li></ul><hr><p>浏览器 API：在浏览器端，可以使用 JavaScript 的 EventSource API 创建 <code>EventSource</code> 对象监听服务器发送的事件。一旦建立连接，服务器就可以使用 HTTP 响应的 &#39;text&#x2F;event-stream&#39; 内容类型发送事件消息，浏览器则可以通过监听 EventSource 对象的 <code>onmessage</code>、<code>onopen</code> 和 <code>onerror</code> 事件来处理这些消息。</p><p>建立连接：</p><ul><li>EventSource 接受两个参数：URL 和 options。</li><li>URL 为 http 事件来源，一旦 EventSource 对象被创建后，浏览器立即开始对该 URL 地址发送过来的事件进行监听。</li><li>options 是一个可选的对象，包含 withCredentials 属性，表示是否发送凭证（cookie、HTTP认证信息等）到服务端，默认为 false。</li></ul><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-7oeyf6lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-7oeyf6lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> eventSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventSource</span>(<span class="hljs-string">&#x27;http_api_url&#x27;</span>, &#123; <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></div></figure><p>与 XMLHttpRequest 对象类型，EventSource 对象有一个 readyState 属性值，具体含义如下表：</p><table><thead><tr><th>readyState</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>浏览器与服务端尚未建立连接或连接已被关闭</td></tr><tr><td>1</td><td>浏览器与服务端已成功连接，浏览器正在处理接收到的事件及数据</td></tr><tr><td>2</td><td>浏览器与服务端建立连接失败，客户端不再继续建立与服务端之间的连接</td></tr></tbody></table><p>可以使用 EventSource 对象的 <code>close</code> 方法关闭与服务端之间的连接，使浏览器不再建立与服务端之间的连接。</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-corpt4lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-corpt4lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*  初始化 eventSource 等省略  */</span> <br><br><span class="hljs-comment">/*  关闭连接  */</span> <br>eventSource.<span class="hljs-title function_">close</span>()<br></code></pre></td></tr></table></div></figure><p>监听事件：EventSource 对象本身继承自 EventTarget 接口，因此可以使用 addEventListener() 方法来监听事件。EventSource 对象触发的事件主要包括以下三种：</p><ul><li>open 事件：当成功连接到服务端时触发。</li><li>message 事件：当接收到服务器发送的消息时触发。该事件对象的 data 属性包含了服务器发送的消息内容。</li><li>error 事件：当发生错误时触发。该事件对象的 event 属性包含了错误信息。</li></ul><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ct635blqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ct635blqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*  初始化 eventSource 等省略  */</span> <br><br>eventSource.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Connection opened&#x27;</span>)<br>&#125;)<br><br>eventSource.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Received message: &#x27;</span> + event.<span class="hljs-property">data</span>);<br>&#125;)<br><br><span class="hljs-comment">/*  监听自定义事件  */</span> <br>eventSource.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Received message: &#x27;</span> + event.<span class="hljs-property">data</span>);<br>&#125;)<br><br>eventSource.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Error occurred: &#x27;</span> + event.<span class="hljs-property">event</span>);<br>&#125;)<br></code></pre></td></tr></table></div></figure><p>也可以采用属性监听（<code>onopen</code>、<code>onmessage</code>、<code>onerror</code>）的形式。</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-2cb794lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-2cb794lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*  初始化 eventSource 等省略  */</span><br><br>eventSource.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Connection opened&#x27;</span>)<br>&#125;<br><br>eventSource.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Received message: &#x27;</span> + event.<span class="hljs-property">data</span>);<br>&#125;<br><br>eventSource.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Error occurred: &#x27;</span> + event.<span class="hljs-property">event</span>);<br>&#125;)<br></code></pre></td></tr></table></div></figure><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">注意：<br/>- `EventSource` 对象的属性监听只能监听预定义的事件类型（`open`、`message`、`error`）。</br/>- 不能用于监听自定义事件类型。如果要实现自定义事件类型的监听，可以使用 `addEventListener()` 方法。</p><p>使用 Node.js 实现 SSE 的简单示例：</p><p>服务端server.js：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-x057o5lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-x057o5lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*  eslint-disable-next-line no-undef  */</span> <br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-comment">/*  eslint-disable-next-line no-undef  */</span> <br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br>  <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/&#x27;</span> || url === <span class="hljs-string">&#x27;index.html&#x27;</span>) &#123;<br>    <span class="hljs-comment">/*  如果请求根路径，返回 index.html 文件  */</span> <br>    <span class="hljs-comment">/*  eslint-disable-next-line no-undef  */</span> <br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">500</span>)<br>        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Error loading&#x27;</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>&#125;)<br>        res.<span class="hljs-title function_">end</span>(data)<br>      &#125;<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/sse&#x27;</span>)) &#123;<br>    <span class="hljs-comment">/*  如果请求 /events 路径，建立 SSE 连接  */</span> <br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/event-stream&#x27;</span>,<br>      <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>      <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>      <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-comment">/*  允许跨域  */</span> <br>    &#125;)<br><br>    <span class="hljs-comment">/*  每隔 1 秒发送一条消息  */</span> <br>    <span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">const</span> intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      res.<span class="hljs-title function_">write</span>(<span class="hljs-string">`event: customEvent\n`</span>)<br>      res.<span class="hljs-title function_">write</span>(<span class="hljs-string">`id: <span class="hljs-subst">$&#123;id&#125;</span>\n`</span>)<br>      res.<span class="hljs-title function_">write</span>(<span class="hljs-string">`retry: 30000\n`</span>)<br>      <span class="hljs-keyword">const</span> params = url.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;?&#x27;</span>)[<span class="hljs-number">1</span>]<br>      <span class="hljs-keyword">const</span> data = &#123; id, <span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toISOString</span>(), params &#125;<br>      res.<span class="hljs-title function_">write</span>(<span class="hljs-string">`data: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(data)&#125;</span>\n\n`</span>)<br>      id++<br>      <span class="hljs-keyword">if</span> (id &gt;= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-built_in">clearInterval</span>(intervalId)<br>        res.<span class="hljs-title function_">end</span>()<br>      &#125;<br>    &#125;, <span class="hljs-number">1000</span>)<br><br>    <span class="hljs-comment">/*  当客户端关闭连接时停止发送消息  */</span><br>    req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">clearInterval</span>(intervalId)<br>      id = <span class="hljs-number">0</span><br>      res.<span class="hljs-title function_">end</span>()<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">/*  如果请求的路径无效，返回 404 状态码  */</span> <br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">404</span>)<br>    res.<span class="hljs-title function_">end</span>()<br>  &#125;<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server listening on port 3000&#x27;</span>)<br></code></pre></td></tr></table></div></figure><p>浏览器index-eventsource.html：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qgmyr3lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qgmyr3lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- &lt;!DOCTYPE html&gt;</span><br><span class="hljs-comment">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="hljs-comment">  &lt;head&gt;</span><br><span class="hljs-comment">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="hljs-comment">    &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot;&gt;</span><br><span class="hljs-comment">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="hljs-comment">    &lt;title&gt;Vite App&lt;/title&gt;</span><br><span class="hljs-comment">  &lt;/head&gt;</span><br><span class="hljs-comment">  &lt;body&gt;</span><br><span class="hljs-comment">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-comment">    &lt;script type=&quot;module&quot; src=&quot;/src/main.ts&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">  &lt;/body&gt;</span><br><span class="hljs-comment">&lt;/html&gt; --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SSE Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>SSE Demo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;connectSSE()&quot;</span>&gt;</span>建立 SSE 连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;closeSSE()&quot;</span>&gt;</span>断开 SSE 连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> messageElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;message&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> eventSource</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/*  建立 SSE 连接  */</span> </span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">connectSSE</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">      eventSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventSource</span>(<span class="hljs-string">&#x27;http://127.0.0.1:3000/sse?content=xxx&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">/*  监听消息事件  */</span> </span><br><span class="language-javascript">      eventSource.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;customEvent&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(event.<span class="hljs-property">data</span>)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;data&#x27;</span>,data);</span><br><span class="language-javascript">        messageElement.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">`<span class="hljs-subst">$&#123;data.id&#125;</span> --- <span class="hljs-subst">$&#123;data.time&#125;</span> --- params参数：<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(data.params)&#125;</span>`</span> + <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span></span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      eventSource.<span class="hljs-property">onopen</span> = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        messageElement.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">`SSE 连接成功，状态<span class="hljs-subst">$&#123;eventSource.readyState&#125;</span>&lt;br /&gt;`</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      eventSource.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        messageElement.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">`SSE 连接错误，状态<span class="hljs-subst">$&#123;eventSource.readyState&#125;</span>&lt;br /&gt;`</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/*  断开 SSE 连接  */</span> </span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">closeSSE</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">      eventSource.<span class="hljs-title function_">close</span>()</span><br><span class="language-javascript">      messageElement.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">`SSE 连接关闭，状态<span class="hljs-subst">$&#123;eventSource.readyState&#125;</span>&lt;br /&gt;`</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>在命令行中执行 <code>node server-eventsource.js</code> 启动服务端，然后在浏览器中打开 <code>http://localhost:3000</code> 即可看到 SSE 效果：</p><img src="eventsource.gif" alt="eventsource" style="zoom:50%;" /><img src="image-20231127113148975.png" alt="image-20231127113148975" style="zoom:50%;" /><img src="image-20231127110654448.png" alt="image-20231127110654448" style="zoom:50%;" /><img src="image-20231127110628347.png" alt="image-20231127110628347" style="zoom:50%;" /><p>SSE 已具有广泛的的浏览器<a href="https://link.juejin.cn/?target=https://caniuse.com/?search=Server%20-sent%20events">兼容性</a>，几乎除 IE 之外的浏览器均已支持。</p><p>对于不支持 EventSource 的浏览器，可以使用 <a href="https://link.juejin.cn/?target=https://www.npmjs.com/package/eventsource">polyfill</a> 实现。判断浏览器是否支持 EventSource：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-kkn8kqlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-kkn8kqlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-title function_">typeof</span>(<span class="hljs-title class_">EventSource</span>) !== “<span class="hljs-literal">undefined</span>”) &#123;<br><span class="hljs-comment">/*  支持  */</span> <br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*  不支持，使用 polyfill  */</span> <br>&#125;<br></code></pre></td></tr></table></div></figure><p>虽然使用 SSE 技术可以实现 ChatGPT 一样的打字机效果，但是通过上文请求 type 对比可以发现，<mark>在使用 SSE 时，type 为 <code>eventSource</code>，而 ChatGPT 为 <code>fetch</code></mark>。<mark>且受浏览器 EventSource API 限制，在使用 SSE 时不能自定义请求头、只能发出 GET 请求，且在大多数浏览器中，URL 限制 <a href="https://link.juejin.cn/?target=https://stackoverflow.com/questions/417142">2000个字符</a>，也无法满足 ChatGPT 参数传递需求。</mark></p><p>此时，可以使用 Fetch API 实现一个替代接口，用于<strong>模拟</strong> SSE 实现。</p><p>Fetch API 是一种通用的 HTTP 请求和响应模型，它可以用于发送和接收任何类型的 HTTP 请求，支持文本和二进制数据。由于其对流（Stream）的支持，可以模拟 Server-Sent Events (SSE)，需要手动处理重连和流式数据。</p><p>在某些情况下，你可能会选择使用 Fetch API 模拟 SSE，而不是直接使用 SSE：</p><ul><li>发送二进制数据：如果你需要发送或接收二进制数据，你必须使用 Fetch API 或其他技术，因为 SSE 只支持文本数据。</li><li>双向通信：如果你需要进行双向通信，你必须使用 Fetch API 或其他技术，因为 SSE 只支持单向通信。</li><li>更大的灵活性：Fetch API 提供了更大的灵活性，例如，你可以控制请求头、请求方法、响应处理等。</li></ul><p>简单实现如下：</p><p>服务端server-fetch.js：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-shrqkrlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-shrqkrlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*  eslint-disable-next-line no-undef  */</span> <br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-comment">/*  eslint-disable-next-line no-undef  */</span> <br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br>  <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/&#x27;</span> || url === <span class="hljs-string">&#x27;index-fetch.html&#x27;</span>) &#123;<br>    <span class="hljs-comment">/*  如果请求根路径，返回 ndex-fetch.html 文件  */</span> <br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index-fetch.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">500</span>)<br>        res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Error loading&#x27;</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>&#125;)<br>        res.<span class="hljs-title function_">end</span>(data)<br>      &#125;<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/fetch-sse&#x27;</span>)) &#123;<br>    <span class="hljs-comment">/*  如果请求 /events-fetch 路径，建立连接  */</span> <br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/event-stream&#x27;</span>,<br>      <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>      <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>      <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-comment">/*  允许跨域  */</span><br>    &#125;)<br>    <span class="hljs-keyword">let</span> body = <span class="hljs-string">&#x27;&#x27;</span><br>    req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;<br>      body += chunk<br>    &#125;)<br>    <br>    <span class="hljs-comment">/*  每隔 1 秒发送一条消息  */</span> <br>    <span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">const</span> intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> data = &#123; id, <span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toISOString</span>(), <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(body) &#125;<br>      res.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>      id++<br>      <span class="hljs-keyword">if</span> (id &gt;= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-built_in">clearInterval</span>(intervalId)<br>        res.<span class="hljs-title function_">end</span>()<br>      &#125;<br>    &#125;, <span class="hljs-number">1000</span>)<br><br>    <span class="hljs-comment">/*  当客户端关闭连接时停止发送消息  */</span><br>    req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">clearInterval</span>(intervalId)<br>      id = <span class="hljs-number">0</span><br>      res.<span class="hljs-title function_">end</span>()<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">/*  如果请求的路径无效，返回 404 状态码  */</span> <br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">404</span>)<br>    res.<span class="hljs-title function_">end</span>()<br>  &#125;<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3001</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server listening on port 3001&#x27;</span>)<br></code></pre></td></tr></table></div></figure><p>客户端index.html：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-plc6xklqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-plc6xklqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>fetchSSE Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>fetchSSE Demo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;connectFetch()&quot;</span>&gt;</span>建立 fetchSSE 连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;closeSSE()&quot;</span>&gt;</span>断开 fetchSSE 连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    const messageElement = document.getElementById(&#x27;message&#x27;)</span></span><br><span class="language-xml"><span class="language-handlebars">    let controller</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!-- 建立 FETCH-SSE 连接  --&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    const connectFetch = () =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">      controller = new AbortController()</span></span><br><span class="language-xml"><span class="language-handlebars">      fetchEventSource(&#x27;http://127.0.0.1:3001/fetch-sse&#x27;, &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        method: &#x27;POST&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">        body: JSON.stringify(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          content: &#x27;xxx&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;),</span></span><br><span class="language-xml"><span class="language-handlebars">        signal: controller.signal,</span></span><br><span class="language-xml"><span class="language-handlebars">        onopen: () =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          messageElement.innerHTML += `FETCH 连接成功<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>`</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        onclose: () =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          messageElement.innerHTML += `FETCH 连接关闭<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>`</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        onmessage: (event) =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          const data = JSON.parse(event)</span></span><br><span class="language-xml"><span class="language-handlebars">          messageElement.innerHTML += `$&#123;data.id&#125; --- $&#123;data.time&#125; --- body参数：$&#123;JSON.stringify(data.body)&#125;` + &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        onerror: (e) =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          console.log(e)</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">      &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!-- 断开 FETCH-SSE 连接  --&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    const closeSSE = () =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">      if (controller) &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        controller.abort()</span></span><br><span class="language-xml"><span class="language-handlebars">        controller = undefined</span></span><br><span class="language-xml"><span class="language-handlebars">        messageElement.innerHTML += `FETCH 连接关闭<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>`</span></span><br><span class="language-xml"><span class="language-handlebars">      &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    const fetchEventSource = (url, options) =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">      fetch(url, options)</span></span><br><span class="language-xml"><span class="language-handlebars">        .then(response =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          if (response.status === 200) &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            options.onopen &amp;&amp; options.onopen()</span></span><br><span class="language-xml"><span class="language-handlebars">            return response.body</span></span><br><span class="language-xml"><span class="language-handlebars">          &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">        .then(rb =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          const reader = rb.getReader()</span></span><br><span class="language-xml"><span class="language-handlebars">            const push = () =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">              <span class="hljs-comment">&lt;!-- done 为数据流是否接收完成，boolean  --&gt;</span> </span></span><br><span class="language-xml"><span class="language-handlebars">              <span class="hljs-comment">&lt;!--  value 为返回数据，Uint8Array --&gt;</span> </span></span><br><span class="language-xml"><span class="language-handlebars">              return reader.read().then((&#123;done, value&#125;) =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                if (done) &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                  options.onclose &amp;&amp; options.onclose()</span></span><br><span class="language-xml"><span class="language-handlebars">                  return</span></span><br><span class="language-xml"><span class="language-handlebars">                &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">                options.onmessage &amp;&amp; options.onmessage(new TextDecoder().decode(value))</span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-comment">&lt;!--  持续读取流信息 --&gt;</span> </span></span><br><span class="language-xml"><span class="language-handlebars">                return push()</span></span><br><span class="language-xml"><span class="language-handlebars">              &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-comment">&lt;!--  开始读取流信息 --&gt;</span> </span></span><br><span class="language-xml"><span class="language-handlebars">            return push()</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">        .catch((e) =&gt; &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">          options.error &amp;&amp; options.error(e)</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>不同于 <code>XMLHttpRequest</code>，<code>fetch</code> 并未原生提供终止操作方法，可以通过 DOM API <code>[AbortController](https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController)</code> 和 <code>AbortSignal</code> 实现 fetch 请求终止操作。</p><p>SSE 技术是一种轻量级的实时通信技术，基于 HTTP 协议，具有服务端推送、断线重连、简单轻量等优点。但是，SSE 技术也有一些缺点，如不能进行双向通信、连接数受限、仅支持 get 请求等。</p><p>SSE 可以在 Web 应用程序中实现诸如股票在线数据、日志推送、聊天室实时人数等即时数据推送功能。需要注意的是，SSE 并不是适用于所有的实时推送场景。在需要高并发、高吞吐量和低延迟的场景下，WebSockets 可能更加适合。而在需要更轻量级的推送场景下，SSE 可能更加适合。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events">https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events</a></p><p><a href="https://github.com/Azure/fetch-event-source">https://github.com/Azure/fetch-event-source</a></p><p>openai官方文档：<a href="https://platform.openai.com/docs/introduction">https://platform.openai.com/docs/introduction</a></p><hr><p>链接a去掉下划线：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-w112jelqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-w112jelqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;textDecoration: &#x27;none&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></div></figure><hr>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
      <tag>CSS</tag>
      
      <tag>HTML</tag>
      
      <tag>TypeScript</tag>
      
      <tag>ElementPlus</tag>
      
      <tag>Vite</tag>
      
      <tag>pinia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二.搭建博客</title>
    <link href="/2023/08/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/08/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-参考教程"><a href="#1-参考教程" class="headerlink" title="1.参考教程"></a>1.参考教程</h1><p><code>https://blog.senqiweb.cn/2022/08/26/kv1ltl/#设置公钥和私钥</code></p><p>hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>hexo主题之fluid：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>hexo fluid文档：<a href="https://hexo.fluid-dev.com/docs/guide">https://hexo.fluid-dev.com/docs/guide</a></p><ul><li>创建文件：hexo new 搭建博客</li><li>生成静态文件：hexo g</li><li>预览博客：hexo s</li><li>部署网站：hexo d</li></ul><p><mark>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</mark></p><h1 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h1><p class="note note-success" style="border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;">遇到想要修改的样式第一步是打开控制台！！！</p><p>图片显示问题：<a href="https://zhuanlan.zhihu.com/p/265077468">https://zhuanlan.zhihu.com/p/265077468</a></p><img src="image-20230827182307675.png" alt="image-20230827182307675" style="zoom:30%;" /><p>设置图片根目录：</p><img src="image-20230825134728552.png" style="zoom:50%;" /><p>必须是以下格式：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-hhd280lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-hhd280lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image-20230918163131185.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;image-20230918163131185&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></div></figure><p>typora自带格式不生效：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-n5oynplqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-n5oynplqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">![image-20230918170715840](/image-20230918170715840.png)<br></code></pre></td></tr></table></div></figure><hr><p>添加樱花效果：<code>https://cnhuazhu.gitee.io/2021/02/19/Hexo魔改/Hexo添加樱花动态效果背景/</code></p><p>添加到主题下的layout文件夹：</p><img src="image-20230825111055130.png" style="zoom:50%;" /><p>git clone到本地的代码：</p><ol><li>删除node_modules</li><li>npm install</li><li>重新下载fluid主题文件夹  复制到themes\fluid目录下</li></ol><hr><p><mark>.deploy_git</mark>是git部署用的文件。当你为 git 部署选项运行hexo d命令时，Hexo 会创建一个名为.deploy_git的文件夹，并将生成的文件复制到该文件夹。</p><img src="image-20230827181423475.png" alt="image-20230827181423475" style="zoom:40%;" /><ol><li>删除.deploy_git文件夹</li><li>输入<mark>git config --global core.autocrlf false</mark></li><li>依次执行：hexo clean    hexo g    hexo d</li></ol><hr><p>新建.gitignore：过滤node_modules和dist文件夹</p><img src="image-20230827184313722.png" alt="image-20230827184313722" style="zoom:40%;" /><hr><p>hexo中高亮不显示：<code>==我高亮了==</code>→使用<code>&lt;mark&gt;我高亮了&lt;/mark&gt;</code></p><p>英文高亮统一用&#96;&#96;，中文高亮统一用mark。</p><hr><p>github贡献图：<a href="https://github.com/2016rshah/githubchart-api">https://github.com/2016rshah/githubchart-api</a></p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-75ur3glqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-75ur3glqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ghchart.rshah.org/409ba5/lan720&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%&quot;</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20230918163131185.png" alt="image-20230918163131185" style="zoom:50%;" /><img src="image-20230919160147542.png" alt="image-20230919160147542" style="zoom:50%;" /><p>或者</p><figure class="highlight yml"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-5zfpgglqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-5zfpgglqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">githubcalendar:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">enable_page:</span> <span class="hljs-string">/archives/</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">lan720</span><br>  <span class="hljs-attr">layout:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">class</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">container</span><br>    <span class="hljs-attr">index:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">githubcalendar_html:</span> <span class="hljs-string">&#x27;&lt;div id=&quot;github-calendar&quot; style=&quot;width:100%;height:auto;padding:10px;margin-bottom:20px&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br>  <span class="hljs-attr">pc_minheight:</span> <span class="hljs-string">200px</span><br>  <span class="hljs-attr">mobile_minheight:</span> <span class="hljs-string">0px</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot;</span><br>  <span class="hljs-attr">api:</span> <span class="hljs-string">https://python-github-calendar-api.vercel.app/api</span><br>  <span class="hljs-comment"># api: https://gitcalendar.zfe.space/api</span><br>  <span class="hljs-comment"># api: https://python-gitee-calendar-api.vercel.app/api</span><br>  <span class="hljs-attr">calendar_js:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span><br>  <span class="hljs-attr">plus_style:</span> <span class="hljs-string">&quot;#github_container &gt; .position-relative &gt; .border&#123;border:0!important&#125;#github-calendar&#123;position: relative;margin-top: -2rem;background-color: var(--board-bg-color);transition: background-color 0.2s ease-in-out;border-radius: 0.5rem;z-index: 3;-webkit-box-shadow: 0 12px 15px 0 rgb(0 0 0 / 24%), 0 17px 50px 0 rgb(0 0 0 / 19%);box-shadow: 0 12px 15px 0 rgb(0 0 0 / 24%), 0 17px 50px 0 rgb(0 0 0 / 19%);&#125;&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p class="note note-success" style="border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);">添加新样式</p><p>修改鼠标样式和文字选中样式，在themes&#x2F;fluid&#x2F;source&#x2F;css&#x2F;my&#x2F;mouse.styl中添加。</p><p class="note note-success" style="border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;">不是public/css/my文件夹！直接修改main.css文件无效！</p><img src="image-20230921162312844.png" alt="image-20230921162312844" style="zoom:50%;" /><p>在main.styl中引入，不是main：</p><img src="image-20230921162342641.png" alt="image-20230921162342641" style="zoom:50%;" /><hr><p>插入便签：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ebce6wlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ebce6wlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20230925140109254.png" alt="image-20230925140109254" style="zoom:40%;" /><p>由于Typora仅支持普通的html标签，不支持class、id、data-*等自定义属性，所以修改主题文件夹不生效，只能添加行内样式：</p><ol><li><p>primary：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-m2hehflqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-m2hehflqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #6f42c1;padding: 10px 15px;color: #777;background-color: #f5f0fa;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>secondary：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-e9yas5lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-e9yas5lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-secondary&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #777777;padding: 10px 15px;color: #777;background-color: #f7f7f7;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>success：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6tipfulqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6tipfulqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-success&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #42b983;padding: 10px 15px;color: #777;background-color: rgba(66, 185, 131, .1);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>danger：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3ssg7mlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3ssg7mlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>warning：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-fbv6xmlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-fbv6xmlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-warning&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #f0ad4e;padding: 10px 15px;color: #777;background-color: #fdf8ea;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>info：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-3apcsflqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-3apcsflqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-info&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-left: 4px solid #428bca;padding: 10px 15px;color: #777;background-color: rgb(238, 247, 250);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ol><p>插入标签：</p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-ati26rlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-ati26rlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20230926175453969.png" alt="image-20230926175453969" style="zoom:60%;" /><hr><p>解决浏览器端的语法高亮库highlight.js不支持vue代码高亮：</p><p><a href="https://github.com/highlightjs/highlightjs-vue/">https://github.com/highlightjs/highlightjs-vue/</a></p><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-qz6rlalqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-qz6rlalqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/highlightjs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/highlightjs-vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  hljs.<span class="hljs-title function_">registerLanguage</span>(<span class="hljs-string">&quot;vue&quot;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">hljsDefineVue</span>);</span><br><span class="language-javascript">  hljs.<span class="hljs-title function_">initHighlightingOnLoad</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20230926175206543.png" alt="image-20230926175206543" style="zoom:50%;" /><p>不能单独使用<code>&lt;script&gt;&lt;/script&gt;</code>，在<code>&lt;script&gt;&lt;/script&gt;</code>前面一定要先加<code>&lt;template&gt;&lt;/template&gt;</code>才能生效！</p><hr><p>必须使用<code>&lt;br/&gt;</code>才能换行：</p><img src="image-20231010144758522.png" alt="image-20231010144758522" style="zoom:50%;" /><hr><p>修改目录样式：</p><img src="image-20231013101526690.png" alt="image-20231013101526690" style="zoom:50%;" /><hr><p>hexo中使用iconfont图标：</p><ol><li><p>生成阿里在线链接：</p><img src="image-20231013162830707.png" alt="image-20231013162830707" style="zoom:50%;" /></li><li><p>修改custom_css：</p><img src="image-20231013162936840.png" alt="image-20231013162936840" style="zoom:50%;" /><p class="note note-success" style="border-left: 4px solid #d9534f;padding: 10px 15px;color: #777;background-color: #fcf1f2;">在_config.fluid.yml主题文件夹下修改，不是_config.yml文件夹，否则样式不生效或者样式被覆盖！</p></li><li><p>使用iconfont图标：</p><img src="image-20231013163014621.png" alt="image-20231013163014621" style="zoom:50%;" /><p>使用彩色iconfont图标：勾选彩色</p><img src="image-20231024145633308.png" alt="image-20231024145633308" style="zoom:50%;" /></li></ol><hr><p>代码块折叠：</p><img src="image-20231012145306284.png" alt="image-20231012145306284" style="zoom:50%;" /><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-xtzbk6lqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-xtzbk6lqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUuid</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>) + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>);<br>&#125;<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<br>  <span class="hljs-string">&quot;after_post_render&quot;</span>,<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; line_number, lib &#125; = hexo.<span class="hljs-property">theme</span>.<span class="hljs-property">config</span>.<span class="hljs-property">code</span>.<span class="hljs-property">highlight</span>;<br><br>    <span class="hljs-keyword">let</span> reg;<br>    <span class="hljs-keyword">if</span> (lib === <span class="hljs-string">&quot;highlightjs&quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (line_number) &#123;<br>        reg = <span class="hljs-regexp">/(&lt;figure class=&quot;highlight.+?&gt;)(.+?hljs (.*?)&quot;.+?)(&lt;\/figure&gt;)/gim</span>s;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reg = <span class="hljs-regexp">/(&lt;div class=&quot;code-wrapper.+?&gt;)(.+?hljs (.*?)&quot;.+?)(&lt;\/div&gt;)/gim</span>s;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lib === <span class="hljs-string">&quot;prismjs&quot;</span>) &#123;<br>      reg = <span class="hljs-regexp">/(&lt;div class=&quot;code-wrapper.+?&gt;)(.+?data-language=&quot;(.*?)&quot;.+?)(&lt;\/div&gt;)/gim</span>s;<br>    &#125;<br><br>    data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(reg, <span class="hljs-function">(<span class="hljs-params">match, begin, inner, lang, end, offset, string</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> collapseId = <span class="hljs-string">`collapse-<span class="hljs-subst">$&#123;getUuid()&#125;</span>`</span>;<br>      <span class="hljs-keyword">const</span> collapseBtn = <span class="hljs-string">`&lt;i class=&quot;iconfont icon-github-fill&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#<span class="hljs-subst">$&#123;collapseId&#125;</span>&quot;&gt;&lt;/i&gt;`</span>;<br>      <span class="hljs-keyword">const</span> collapseDiv = <span class="hljs-string">`&lt;div class=&quot;collapse show&quot; id=&quot;<span class="hljs-subst">$&#123;collapseId&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;inner&#125;</span>&lt;/div&gt;`</span>;<br>      <span class="hljs-keyword">const</span> langSpan = <span class="hljs-string">`&lt;span&gt;<span class="hljs-subst">$&#123;lang&#125;</span>&lt;/span&gt;`</span>;<br>      <span class="hljs-keyword">return</span> begin + collapseBtn + langSpan + collapseDiv + end;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;,<br>  <span class="hljs-number">10000</span><br>);<br></code></pre></td></tr></table></div></figure><img src="image-20231012145352943.png" alt="image-20231012145352943" style="zoom:50%;" /><figure class="highlight stylus"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-b0oy9alqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-b0oy9alqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">230</span>, <span class="hljs-number">235</span>, <span class="hljs-number">241</span>);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.5rem</span>;<br><br>    <span class="hljs-selector-tag">table</span> &#123;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.5rem</span> <span class="hljs-number">0.5rem</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.fas</span><span class="hljs-selector-class">.fa-angle-down</span> &#123;<br>        <span class="hljs-attribute">transform</span>: none;<br>        <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.2s</span> ease-in-out;<br><br>        &amp;<span class="hljs-selector-class">.collapsed</span> &#123;<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">90deg</span>);<br>        &#125;<br>    &#125;<br><br>    &gt; <span class="hljs-selector-tag">i</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2rem</span>;<br>    &#125;<br><br>    &gt; <span class="hljs-selector-tag">span</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">font-weight</span>: bold;<br>    &#125;<br><br>    <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>        <span class="hljs-attribute">position</span>: sticky;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><hr><p>修改本文最后更新于的时间的显示格式：</p><figure class="highlight avrasm"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-6ps5qelqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-6ps5qelqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">date_format:</span> <span class="hljs-string">&quot;LL HH:mm&quot;</span><br></code></pre></td></tr></table></div></figure><img src="image-20231013101210574.png" alt="image-20231013101210574" style="zoom:50%;" /><hr><p>添加和风天气组件：<a href="https://widget.qweather.com/">https://widget.qweather.com/</a></p><img src="image-20231016161018794.png" alt="image-20231016161018794" style="zoom:50%;" /><figure class="highlight html"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-r2czrzlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-r2czrzlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;weather-plugin&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;he-plugin-simple&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable constant_">WIDGET</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&quot;CONFIG&quot;</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-string">&quot;modules&quot;</span>: <span class="hljs-string">&quot;012&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;background&quot;</span>: <span class="hljs-string">&quot;5&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;tmpColor&quot;</span>: <span class="hljs-string">&quot;FFFFFF&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;tmpSize&quot;</span>: <span class="hljs-string">&quot;16&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;cityColor&quot;</span>: <span class="hljs-string">&quot;FFFFFF&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;citySize&quot;</span>: <span class="hljs-string">&quot;16&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;aqiColor&quot;</span>: <span class="hljs-string">&quot;FFFFFF&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;aqiSize&quot;</span>: <span class="hljs-string">&quot;16&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;weatherIconSize&quot;</span>: <span class="hljs-string">&quot;24&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;alertIconSize&quot;</span>: <span class="hljs-string">&quot;18&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">// &quot;padding&quot;: &quot;10px 10px 10px 10px&quot;,</span></span><br><span class="language-javascript">            <span class="hljs-string">&quot;shadow&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;language&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;borderRadius&quot;</span>: <span class="hljs-string">&quot;5&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;fixed&quot;</span>: <span class="hljs-string">&quot;false&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;vertical&quot;</span>: <span class="hljs-string">&quot;top&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;horizontal&quot;</span>: <span class="hljs-string">&quot;left&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;9cf07a14c8a74c4198ee7f49b868e0c8&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><img src="image-20231016160942811.png" alt="image-20231016160942811" style="zoom:50%;" /><img src="image-20231016160722999.png" alt="image-20231016160722999" style="zoom:50%;" /><hr><p>添加打赏功能：</p><figure class="highlight plaintext"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-1b880klqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-1b880klqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 添加打赏模块 --&gt;<br>&lt;div class=&quot;reward-container&quot;&gt;<br>    &lt;% if (theme.donate.enable) &#123; %&gt;<br>    &lt;button id=&quot;rewardBtn&quot; class=&quot;reward-btn&quot;&gt;<br>        &lt;% if (config.language==&#x27;zh-CN&#x27; ) &#123; %&gt;<br>        ❤ 打赏<br>        &lt;% &#125; else &#123; %&gt;<br>        Donate<br>        &lt;% &#125; %&gt;<br>    &lt;/button&gt;<br>    &lt;p class=&quot;tea&quot;&gt;“&lt;%= theme.donate.message %&gt;”&lt;/p&gt;<br>    &lt;div id=&quot;rewardImgContainer&quot; class=&quot;reward-img-container&quot;&gt;<br>        &lt;div class=&quot;singleImgContainer&quot;&gt;<br>            &lt;img id=&quot;wechatImg&quot; class=&quot;reward-img&quot; src=&quot;&lt;%= theme.donate.wechatpay %&gt;&quot; alt=&quot;微信二维码&quot;&gt;<br>            &lt;p class=&quot;wechatPay&quot;&gt;微信支付&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;singleImgContainer&quot;&gt;<br>            &lt;img id=&quot;alipayImg&quot; class=&quot;reward-img&quot; src=&quot;&lt;%= theme.donate.alipay %&gt;&quot; alt=&quot;支付宝二维码&quot;&gt;<br>            &lt;p class=&quot;aliPay&quot;&gt;支付宝支付&lt;/p&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;% &#125; %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></div></figure><img src="image-20231017105504390.png" alt="image-20231017105504390" style="zoom:50%;" /><p>添加主题配置：</p><figure class="highlight yaml"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-td3i0clqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-td3i0clqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Donate 自己为 Fluid 主题增加的打赏功能</span><br><span class="hljs-comment"># `message` 是打赏提示语，可自定义</span><br><span class="hljs-comment"># `alipay` 是支付宝付款码， `wechatpay` 是微信付款码。</span><br><span class="hljs-attr">donate:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">觉得不错的话，给个打赏吧</span> <span class="hljs-string">୧(๑•̀⌄•́๑)૭</span> <br>  <span class="hljs-attr">alipay:</span> <span class="hljs-string">/image/alipay.png</span><br>  <span class="hljs-attr">wechatpay:</span> <span class="hljs-string">/image/wechatpay.png</span><br></code></pre></td></tr></table></div></figure><img src="image-20231017105639727.png" alt="image-20231017105639727" style="zoom:50%;" /><p>图片添加在img文件夹下：</p><img src="image-20231017111859101.png" alt="image-20231017111859101" style="zoom:50%;" /><p>添加css样式：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-m8122xlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-m8122xlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.reward-container</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: column;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br><br>    <span class="hljs-selector-class">.tea</span>&#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8125em</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.reward-btn</span>&#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">24px</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>        <span class="hljs-attribute">background-color</span>: lavender;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#e3a850</span>;<br>        <span class="hljs-attribute">border</span>: none;<br>        <span class="hljs-attribute">cursor</span>: pointer;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.reward-img-container</span>&#123;<br>        <span class="hljs-attribute">display</span>: none;<br>        <span class="hljs-comment">/* 图片容器的透明度 */</span><br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">/* 过渡效果,使动画更平滑 */</span><br>        <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">2s</span> ease;<br>    &#125;<br><br>    <span class="hljs-selector-class">.reward-img</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 单个图片的容器 */</span><br>    <span class="hljs-selector-class">.singleImgContainer</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 微信支付和支付宝支付的文字样式 */</span><br>    <span class="hljs-selector-class">.wechatPay</span>,<span class="hljs-selector-class">.aliPay</span>&#123;<br>        <span class="hljs-attribute">text-align</span>: center;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8125em</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>        <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">0px</span>;<br>        <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">0px</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231026104933191.png" alt="image-20231026104933191" style="zoom:50%;" /><p>main.styl中引入css文件：</p><img src="image-20231017110023550.png" alt="image-20231017110023550" style="zoom:50%;" /><p>添加js文件：</p><figure class="highlight js"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-f3muvjlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-f3muvjlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> rewardBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;rewardBtn&#x27;</span>);<br><span class="hljs-keyword">const</span> rewardImgContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;rewardImgContainer&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(rewardBtn)&#123;<br>rewardBtn.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = (rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> === <span class="hljs-string">&#x27;none&#x27;</span> || rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> === <span class="hljs-string">&#x27;&#x27;</span>) ? <span class="hljs-string">&#x27;inline-flex&#x27;</span> : <span class="hljs-string">&#x27;none&#x27;</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> = (rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> === <span class="hljs-string">&#x27;0&#x27;</span> || rewardImgContainer.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> === <span class="hljs-string">&#x27;&#x27;</span>) ? <span class="hljs-string">&#x27;1&#x27;</span> : <span class="hljs-string">&#x27;0&#x27;</span><br>&#125;, <span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231017105921936.png" alt="image-20231017105921936" style="zoom:50%;" /><p>引入js文件：</p><img src="image-20231017105843646.png" alt="image-20231017105843646" style="zoom:50%;" /><hr><p>媒体查询：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-yb05uglqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-yb05uglqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">100vh</span>)<br>#board &#123;<br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">1rem</span> <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">83%</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231019110918493.png" alt="image-20231019110918493" style="zoom:50%;" /><hr><p>解决移动端字体不生效问题：</p><p class="note note-success" style="border-left: 4px solid #428bca;padding: 10px 15px;color: #777;background-color: #eef7fa;">中文字体可以在http://www.reeji.com/上查找</p><ol><li>下载ttf文件：</li></ol><img src="image-20231020101213689.png" alt="image-20231020101213689" style="zoom:50%;" /><ol start="2"><li>使用<code>@font-face</code>：允许网页开发者为其网页指定在线字体；字体能从远程服务器或者用户本地安装的字体加载。如果提供了 local() 函数，从用户本地查找指定的字体名称，并且找到了一个匹配项，本地字体就会被使用。否则，字体就会使用 url() 函数下载的资源。在同时使用 url() 和 local() 功能时，为了用户已经安装的字体副本在需要使用时被使用，如果在用户本地没有找到字体副本就会去使用户下载的副本查找字体。@font-face 规则不仅仅使用在 CSS 的顶层，还可以用在任何 CSS 条件组规则中。</li></ol><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-96vhthlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-96vhthlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;KaiTi&#x27;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./mycustom/ttf/KaiTi.ttf&#x27;</span>); <br>&#125;<br><br><span class="hljs-keyword">@font-face</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Times New Roman&#x27;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./mycustom/ttf/Times New Roman.ttf&#x27;</span>); <br>&#125;<br><br><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Times New Roman&#x27;</span>,KaiTi <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.markdown-body</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Times New Roman&#x27;</span>,KaiTi <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><img src="image-20231020111623065.png" alt="image-20231020111623065" style="zoom:50%;" /><p>不能在一个 CSS 选择器中定义<code>@font-face</code>。例如，这样写是无效的：</p><figure class="highlight css"><i class="iconfont icon-window-down" type="button" data-toggle="collapse" data-target="#collapse-8yv21qlqv4htb0" style="font-size:1.5em;"></i><div class="collapse show" id="collapse-8yv21qlqv4htb0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.className</span> &#123;<br>  <span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: MyHelvetica;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&quot;Helvetica Neue Bold&quot;</span>), <span class="hljs-built_in">local</span>(<span class="hljs-string">&quot;HelveticaNeue-Bold&quot;</span>),<br>      <span class="hljs-built_in">url</span>(<span class="hljs-string">MgOpenModernaBold.ttf</span>);<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>  &#125;<br></code></pre></td></tr></table></div></figure><ol start="3"><li>在main.styl中引用：</li></ol><img src="image-20231020102237376.png" alt="image-20231020102237376" style="zoom:50%;" /><p>效果：</p><img src="image-20231020103554840.png" alt="image-20231020103554840" style="zoom:50%;" /><hr><p>修改主题明暗背景色：</p><img src="image-20231025172617227.png" alt="image-20231025172617227" style="zoom:50%;" /><hr><p>设置分页：修改<code>per_page</code>的值</p><img src="image-20231229154630421.png" alt="image-20231229154630421" style="zoom:50%;" />]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一.上传大文件到Github</title>
    <link href="/2023/08/24/%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%B0Github/"/>
    <url>/2023/08/24/%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%B0Github/</url>
    
    <content type="html"><![CDATA[<p>Github文档：<a href="https://docs.github.com/zh">https://docs.github.com/zh</a></p><p>上传超过100M的单个文件到github：可先进行pdf压缩</p><p>下载lfs：<a href="https://git-lfs.com/">https://git-lfs.com/</a></p><ol><li><p>Github新建空仓库</p></li><li><p>本地新建空文件夹</p></li><li><p>git lfs install</p></li><li><p>git init</p></li><li><p>git lfs track &quot;*.zip&quot; </p><ol><li>追踪单个文件：<code>git lfs track &quot;FrameworkFold/XXXFramework/xxx&quot;</code></li><li>追踪指定类型的文件：<code>git lfs track &quot;*.dmg&quot;</code></li><li>不再使用 Git LFS 管理指定的文件：<code>git lfs untrack &quot;*.dmg&quot;</code></li><li>追踪指定目录下的文件：<code>git lfs track &quot;FrameworkFold/*&quot;</code></li><li>枚举目前所有被 Git LFS 管理的具体文件：<code>git lfs ls-files</code></li></ol></li><li><p>git add .gitattributes</p></li><li><p>git config --global user.email &quot;<a href="mailto:&#x32;&#49;&#x39;&#x37;&#57;&#x31;&#51;&#54;&#54;&#x35;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;">&#x32;&#49;&#x39;&#x37;&#57;&#x31;&#51;&#54;&#54;&#x35;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;</a>&quot;</p></li><li><p>git config --global <a href="http://user.name/">user.name</a> &quot;lan720&quot;</p></li><li><p>git commit -m &quot;提交 .gitattributes 文件&quot;</p></li><li><p>git remote add origin <a href="mailto:git@github.com">git@github.com</a>:lan720&#x2F;study.git</p></li><li><p>git push origin master</p></li><li><p>加入 代码随想录1.assets.zip</p></li><li><p>git add .</p></li><li><p>git commit -m &quot;提交&quot;</p></li><li><p>git push origin master</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>lfs</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
