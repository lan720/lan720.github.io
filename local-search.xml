<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>四.git常用命令</title>
    <link href="/2023/09/06/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/09/06/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Git文档：<a href="https://git-scm.com/docs">https://git-scm.com/docs</a></p><ul><li>推送代码：<code>git add .</code>           git commit -m &quot;1&quot;             git push</li><li>拉取代码：<ol><li>git checkout master</li><li>git pull</li><li>git checkout dev-lan777</li><li>git merge master —no-commit</li><li>git push【sync changes】</li><li>npm run dev</li></ol></li><li>合并分支：<ol><li>git add .</li><li>git commit -m &quot;1&quot;</li><li>git push</li><li>git checkout master</li><li>git pull</li><li>git merge dev-lan777 —no-commit<ol><li>【处理merge冲突的代码后保存】</li><li>git add .</li><li>git commit -m &quot;2&quot;</li></ol></li><li>git push【maintainer角色】</li></ol></li><li>打包部署：<ol><li>npm run build:test</li><li>git add .</li><li>git commit -m &quot;2&quot;</li><li>git push</li></ol></li><li>删除文件夹：git bash命令：rm -rf node_modules</li><li>切换分支：git checkout -b dev-lan777</li><li>暂存修改：git stash<ul><li><code>git stash pop</code> 的作用是将最近一次暂存的修改应用到当前分支，并将该暂存记录从存储堆栈中移除。它的执行过程如下：<ol><li>将最近一次的暂存修改从存储堆栈中取出。</li><li>将这些修改应用到当前所在分支上。</li><li>如果应用成功，则将该暂存记录从存储堆栈中移除。</li></ol></li></ul></li><li>查看日志：git log —oneline</li><li>git rebase dev-lan777</li><li>上下箭头返回之前的git命令</li><li>git回退到commit_id的状态：<ol><li>git log：查看commit的历史记录及其对应的commit_id</li><li>git reset --hard commit_id</li><li>git push origin HEAD --force：使本地和远程的内容都回退到commit_id对应的状态。</li></ol></li><li><code>Auto packing the repository in background for optimum performance.See &quot;git help gc&quot; for manual housekeeping.</code>：<ol><li>git fsck --lost-found：出现很多&quot;dangling commit&quot;</li><li>git gc --prune&#x3D;now</li></ol></li><li>git推送lan-blog中的fluid：<ol><li>cd themes&#x2F;fluid</li><li>git add .</li><li>git commit -m &quot;1&quot;</li><li>git push   即可推送到fluid仓库</li></ol></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三.暑期实习问题总结</title>
    <link href="/2023/08/27/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/27/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><mark>debugger</mark></p><p>div设置圆角边框：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>; <span class="hljs-comment">/* 设置边框样式 */</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 设置圆角半径 */</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>设置水平垂直居中：</p><ol><li>使用 Flexbox：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-comment">/* 水平居中 */</span><br>  <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* 垂直居中 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，父容器 <code>.container</code> 需要具有一定的高度和宽度，并且设置为 <code>display: flex;</code>。通过设置 <code>justify-content: center;</code> 和 <code>align-items: center;</code> 可以将子元素水平和垂直居中。</p><ol start="2"><li>使用绝对定位和 transform：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.centered-element</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，父容器 <code>.container</code> 需要设置为 <code>position: relative;</code>，然后在要居中的子元素上添加 <code>.centered-element</code> 类。通过设置 <code>top: 50%;</code>、<code>left: 50%;</code> 和 <code>transform: translate(-50%, -50%);</code> 可以将子元素水平和垂直居中。</p><hr><p><code>&lt;el-col&gt;</code> 是 Element UI 库中的栅格布局组件，用于创建响应式的网格系统。通过使用 <code>:xs</code>、<code>:sm</code>、<code>:md</code>、<code>:lg</code> 和 <code>:xl</code> 这些属性，可以定义在不同屏幕尺寸下 <code>&lt;el-col&gt;</code> 元素所占据的列数。</p><p>对于你提供的代码 <code>&lt;el-col :xs=&quot;8&quot; :sm=&quot;6&quot; :md=&quot;4&quot; :lg=&quot;3&quot; :xl=&quot;1&quot;&gt;</code>，这表示在不同屏幕尺寸下，列元素 <code>&lt;el-col&gt;</code> 分别占据的列数。具体设置如下：</p><ul><li><code>:xs=&quot;8&quot;</code>：在超小屏幕设备（&lt;768px 宽度）下，该列元素占据 8 列的宽度。</li><li><code>:sm=&quot;6&quot;</code>：在小屏幕设备（≥768px 宽度）下，该列元素占据 6 列的宽度。</li><li><code>:md=&quot;4&quot;</code>：在中等屏幕设备（≥992px 宽度）下，该列元素占据 4 列的宽度。</li><li><code>:lg=&quot;3&quot;</code>：在大屏幕设备（≥1200px 宽度）下，该列元素占据 3 列的宽度。</li><li><code>:xl=&quot;1&quot;</code>：在超大屏幕设备（≥1920px 宽度）下，该列元素占据 1 列的宽度。</li></ul><p>这些属性值代表了 <code>&lt;el-col&gt;</code> 元素在不同屏幕尺寸下所占据的相对宽度比例。</p><hr><p>父组件中引用子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;ChildComponent /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;; // 导入子组件<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><p>要实现上下两栏固定，中间栏自适应的布局：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; <span class="hljs-comment">/* 设置容器高度为视窗高度 */</span></span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.header</span>,</span><br><span class="language-css">  <span class="hljs-selector-class">.footer</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">50px</span>; <span class="hljs-comment">/* 固定高度为 50px */</span></span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* 剩余空间自适应 */</span></span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>上栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>中栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>下栏内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>.container</code> 是一个具有 Flex 布局的容器，它的 <code>flex-direction</code> 属性被设置为 <code>column</code>，使子元素按垂直方向排列。</p><p><code>.header</code> 和 <code>.footer</code> 类分别表示上栏和下栏，它们都设置了固定的高度（这里为 50px），通过 <code>flex: 0 0 50px</code> 指定不可伸缩、初始大小为 50px。</p><p><code>.content</code> 类表示中栏，它的 <code>flex</code> 属性被设置为 <code>1</code>，表示它会占据剩余的所有空间，从而实现自适应的效果。</p><hr><p>要修改 <code>&lt;el-input&gt;</code> 组件的 placeholder 字体大小，你可以使用 CSS 来覆盖默认样式。下面是一种常用的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-input class=&quot;input&quot; placeholder=&quot;请输入内容&quot;&gt;&lt;/el-input&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.input&#123;<br>    :deep .el-input__inner &#123;<br>        font-size: 14px; /* 设置占位符字体大小 */<br>    &#125;<br>    :deep .el-input__wrapper &#123;<br>        border-radius: 14px !important; /* 设置输入框圆角边框 */<br>    &#125;<br>&#125; <br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><hr><p>要在 <code>&lt;el-input&gt;</code> 输入框内的右侧放置一个图片，你可以使用输入框的附加内容（<code>append</code>）来实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-input placeholder=&quot;请输入内容&quot;&gt;<br>    &lt;template #suffix&gt;<br>      &lt;img src=&quot;your-image-url&quot; alt=&quot;图片&quot;&gt;<br>    &lt;/template&gt;<br>  &lt;/el-input&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><hr><p>div里包裹三个p设置div为flex布局，前两个p在一排，第三个p在第二排：如果你想在 <code>&lt;div&gt;</code> 中包裹三个 <code>&lt;p&gt;</code> 元素，并设置前两个 <code>&lt;p&gt;</code> 元素在一行显示，第三个 <code>&lt;p&gt;</code> 元素在第二行，可以通过使用 CSS 的 Flex 布局来实现。<template></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;p&gt;第一个段落&lt;/p&gt;<br>    &lt;p&gt;第二个段落&lt;/p&gt;<br>    &lt;p&gt;第三个段落&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br>.container &#123;<br>  display: flex;<br>  flex-wrap: wrap;<br>&#125;<br><br>.container p &#123;<br>  width: 50%; /* 每个段落占据容器的一半宽度 */<br>&#125;<br><br>.container p:nth-child(3) &#123;<br>  width: 100%; /* 第三个段落占据整个容器宽度 */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>通过将 <code>.container</code> 类的 <code>display</code> 属性设置为 <code>flex</code>，并设置 <code>flex-wrap</code> 属性为 <code>wrap</code>，可以让容器内的元素自动换行。</p><p>然后，我们给每个 <code>&lt;p&gt;</code> 元素设置了宽度。在示例中，前两个 <code>&lt;p&gt;</code> 元素的宽度被设置为容器宽度的一半（50%），而第三个 <code>&lt;p&gt;</code> 元素的宽度被设置为整个容器的宽度（100%）。</p><p>这样，前两个 <code>&lt;p&gt;</code> 元素会在一行显示，而第三个 <code>&lt;p&gt;</code> 元素会独占一行。</p><hr><p>设置文本折行，：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;text-wrapper&quot;&gt;<br>    &#123;&#123; longText &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br>.text-wrapper &#123;<br>  word-wrap: break-word; /* 当单词过长时自动换行 */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>使用了 <code>word-wrap: break-word</code> 样式来实现单词过长时自动换行。</p><hr><p>在父组件内容被撑大出现滚动条时，如何让子组件始终固定在父组件的右下角：父组件div设置<code>position:relative;</code>，子组件div设置<code>position:absolute;bottom:40px;right:0;</code>。</p><hr><p>点击上箭头按钮返回页面顶部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>    const scrollToTop=()=&gt;&#123;<br>        if(container.value)&#123;<br>            container.value.scrollTo(&#123;<br>                top: 0,<br>                behavior: &#x27;smooth&#x27;,<br>            &#125;)<br>    &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>    &lt;div ref=&quot;container&quot;&gt;<br>        &lt;ChatTool/&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><hr><p>将元素 <code>a</code> 的滚动位置设置为它的内容的高度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">a.<span class="hljs-property">scrollTop</span>=a.<span class="hljs-property">scrollHeight</span><br></code></pre></td></tr></table></figure><hr><p>要设置不同el-tree层级的图标不同，你可以通过判断节点的层级来动态地为每个层级设置不同的图标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-tree :data=&quot;treeData&quot;&gt;<br>    &lt;template v-slot=&quot;&#123; node, data &#125;&quot;&gt;<br>      &lt;span class=&quot;tree-node-icon&quot;&gt;<br>        &lt;i :class=&quot;getIconClass(node.level)&quot;&gt;&lt;/i&gt;<br>      &lt;/span&gt;<br>      &lt;span&gt;&#123;&#123; node.label &#125;&#125;&lt;/span&gt;<br>    &lt;/template&gt;<br>  &lt;/el-tree&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const treeData = ref([<br>  // 树型数据的数组<br>]);<br><br>const getIconClass = (level: number): string =&gt; &#123;<br>  if (level === 1) &#123;<br>    return &#x27;iconfont icon-level1&#x27;;<br>  &#125; else if (level === 2) &#123;<br>    return &#x27;iconfont icon-level2&#x27;;<br>  &#125; else &#123;<br>    return &#x27;iconfont icon-default&#x27;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>要在树形结构的各个层级之间添加间隙，你可以使用 CSS 的 <code>margin</code> 属性来实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">:deep .el-tree&#123;<br>    <span class="hljs-selector-class">.el-tree-node__children</span>&#123;<br>        <span class="hljs-selector-class">.el-tree-node__content</span>&#123;<br>            <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;<br>        &#125;<br>        .<span class="hljs-selector-class">.el-tree-node__children</span>&#123;<br>            <span class="hljs-attribute">padding-left</span>:<span class="hljs-number">10px</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>要设置每个 <code>el-table-column</code> 的宽度占比，你可以使用 <code>width</code> 属性配合百分比来实现。<template></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot;&gt;<br>    &lt;el-table-column<br>      prop=&quot;name&quot;<br>      label=&quot;姓名&quot;<br>      min-width=&quot;20%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;age&quot;<br>      label=&quot;年龄&quot;<br>      min-width=&quot;10%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;gender&quot;<br>      label=&quot;性别&quot;<br>      min-width=&quot;15%&quot;<br>    &gt;&lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>设置el-table滚动：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">max-height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>设置el-table-column的字体颜色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-table :data=&quot;tableData&quot;  :header-cell-style=&quot;&#123; color: &#x27;red&#x27; &#125;&quot; :cell-style=&quot;rowCellStyle&quot;&gt;<br>    &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column prop=&quot;age&quot; label=&quot;年龄&quot;&gt;<br>    &lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const tableData = ref([<br>  &#123; name: &#x27;张三&#x27;, age: 20 &#125;,<br>  &#123; name: &#x27;李四&#x27;, age: 25 &#125;<br>]);<br><br>const rowCellStyle = (&#123; row, column &#125;: &#123; row: any, column: any &#125;) =&gt; &#123;<br>  if (column.property === &#x27;name&#x27;) &#123;<br>    return &#123; color: &#x27;green&#x27; &#125;;<br>  &#125;<br>  // 可以根据需要在这里设置其他列的字体颜色<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><blockquote><p>父组件向子组件传值</p></blockquote><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>        &lt;Metainfo :parentMessage=&quot;parentMessage&quot;&gt;&lt;/Metainfo&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>const props = defineProps(&#123;<br>  parentMessage: &#123;<br>    type: String,<br>    required: true<br>  &#125;<br>&#125;);<br><br>const &#123;parentMessage&#125; = toRefs(props);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>子组件向父组件传值</p></blockquote><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;sendValueToParent&quot;&gt;点击发送值给父组件&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>const $emit = defineEmits([&#x27;changeValue&#x27;,&#x27;value2&#x27;]);<br><br>const sendValueToParent = () =&gt; &#123;<br>  const value = &#x27;这是子组件传递给父组件的值&#x27;;<br>  $emits(&#x27;changeValue&#x27;, true);<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;ChildComponent @changeValue=&quot;changeValue&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const receivedValue = ref(&#x27;&#x27;);<br>const changeValue = (value: string) =&gt; &#123;<br>  receivedValue.value = value;<br>&#125;;<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>【未生效】provide inject传值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 模板内容 --&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; provide &#125; from &#x27;vue&#x27;;<br><br>const setup = () =&gt; &#123;<br>  const valueToProvide: string = &#x27;这是要传递的值&#x27;;<br>  provide(&#x27;myValue&#x27;, valueToProvide);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>接收方组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 模板内容 --&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; inject &#125; from &#x27;vue&#x27;;<br><br>const receivedValue: string = inject(&#x27;myValue&#x27;);<br><br>console.log(receivedValue); // 输出：这是要传递的值<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><p>鼠标悬浮到el-table的某行后在该行的第一列显示出加号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-table :data=&quot;tableData&quot; @cell-mouse-enter=&quot;cellMouseEnter&quot; @cell-mouse-leave=&quot;cellMouseLeave&quot;&gt;<br>      &lt;!-- 第一列使用作用域插槽自定义内容 --&gt;<br>      &lt;el-table-column label=&quot;加号&quot;&gt;<br>        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;<br>          &lt;span v-if=&quot;row.showAddIcon&quot;&gt;+&lt;/span&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;;<br><br>interface TableRow &#123;<br>  name: string;<br>  age: number;<br>  gender: string;<br>  showAddIcon?: boolean;<br>&#125;<br><br>const tableData: TableRow[] = reactive([<br>  &#123; name: &#x27;张三&#x27;, age: 20, gender: &#x27;男&#x27;, showAddIcon: false &#125;,<br>  &#123; name: &#x27;李四&#x27;, age: 25, gender: &#x27;女&#x27;, showAddIcon: false &#125;,<br>  &#123; name: &#x27;王五&#x27;, age: 30, gender: &#x27;男&#x27;, showAddIcon: false &#125;<br>]);<br>    <br>const cellMouseEnter=(row:number)=&gt;&#123;<br>    row.showAddIcon=true<br>&#125;<br>const cellMouseLeave=(row:number)=&gt;&#123;<br>    row.showAddIcon=false<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><p>要在 <code>el-table</code> 的最后一行中插入一个 <code>el-select</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-table :data=&quot;tableData&quot;&gt;<br>        &lt;el-table-column label=&quot;表名&quot;&gt;<br>            &lt;template #default=&quot;&#123; row &#125;&quot;&gt;<br>                &lt;template v-if=&quot;row.showAddIcon===true&quot;&gt;<br>                    &lt;el-select v-model=&quot;select&quot; placeholder=&quot;请选择&quot; @change=&quot;(val:any)=&gt;selectChange(val,row)&quot;&gt;<br>                        &lt;el-option v-for=&quot;i in options&quot; :key=&quot;i.value&quot; :label=&quot;i.label&quot; :value=&quot;i.value&quot;&gt;<br>                        &lt;/el-option&gt;<br>                    &lt;/el-select&gt;<br>                &lt;/template&gt;<br>                &lt;template v-else&gt;<br>                    &#123;&#123;row.name&#125;&#125;<br>                &lt;/template&gt;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;el-table-column label=&quot;操作&quot;&gt;<br>            &lt;template #default=&quot;scope&quot;&gt;<br>        &lt;svg-icon iconName=&quot;icon-a-shanchu1&quot; @click=&quot;handleDelete(scope.row,scope.$index)&quot;&gt;&lt;/svg-icon&gt;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>&lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><hr><p>自定义el-button禁用时的click事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-button :disabled=&quot;isDisabled&quot; @click=&quot;handleClick&quot;&gt;Click me&lt;/el-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const isDisabled = ref(true); // 设置默认值为 true<br><br>// 点击事件处理函数<br>const handleClick = () =&gt; &#123;<br>  if (!isDisabled.value) &#123;<br>    // 执行点击事件的逻辑<br>    console.log(&#x27;Button clicked!&#x27;);<br>  &#125;<br>&#125;;<br><br>// 其他逻辑...<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><p><code>trim()</code> 是  字符串的内置函数，用于删除字符串的首尾空格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;  Hello, World!  &#x27;</span>;<br><span class="hljs-keyword">const</span> trimmedStr = str.<span class="hljs-title function_">trim</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(trimmedStr); <span class="hljs-comment">// 输出: &quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure><hr><p>Proxy对象的[[TARGET]]:Array(4)，怎么获取到这个数组：<code>toRaw(tmp)</code></p><hr><p>随机生成id：可以使用 UUID（Universally Unique Identifier）或 GUID（Globally Unique Identifier）。这些是用于生成全局唯一标识符的算法。在  中，可以使用第三方库 <code>uuid</code> 来生成 UUID。</p><p>首先，确保你已经安装了 <code>uuid</code> 库。可以使用 npm 包管理器运行以下命令进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install uuid<br></code></pre></td></tr></table></figure><p>安装完成后，可以使用以下代码生成一个完全不重复的随机 ID：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">v4</span>: uuidv4 &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uuid&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">generateUniqueId</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> uniqueId = <span class="hljs-title function_">uuidv4</span>();<br>  <span class="hljs-keyword">return</span> uniqueId;<br>&#125;<br><br><span class="hljs-keyword">const</span> id = <span class="hljs-title function_">generateUniqueId</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id);<br></code></pre></td></tr></table></figure><p>上述代码中，<code>uuid</code> 库的 <code>v4</code> 方法被引入并命名为 <code>uuidv4</code>。<code>generateUniqueId</code> 函数使用 <code>uuidv4</code> 方法来生成一个完全不重复的随机 ID。</p><p>每次调用 <code>generateUniqueId</code> 函数时，都会生成一个全局唯一的 ID。这是由 UUID 算法的特性决定的。</p><hr><p>当你刷新页面时，页面的值消失的原因可能是因为数据没有被正确地保存或恢复。</p><p>在 Web 开发中，浏览器提供了 <code>localStorage</code> 和 <code>sessionStorage</code> 这两个 API 来存储数据。这些 API 允许你在页面之间保持持久的数据存储或会话级别的数据存储。</p><p>如果页面的值在刷新后消失，可能是因为你没有正确地使用这些存储机制。</p><ul><li><code>localStorage</code>：<code>localStorage</code> 是一个持久性存储，数据将在浏览器关闭后仍然保留。你可以使用 <code>localStorage.setItem(key, value)</code> 方法将值存储到 <code>localStorage</code> 中，并使用 <code>localStorage.getItem(key)</code> 方法检索值。</li><li><code>sessionStorage</code>：<code>sessionStorage</code> 是一个会话级别的存储，数据将在会话结束时被清除（当用户关闭标签页或浏览器窗口时）。你可以使用 <code>sessionStorage.setItem(key, value)</code> 方法将值存储到 <code>sessionStorage</code> 中，并使用 <code>sessionStorage.getItem(key)</code> 方法检索值。</li></ul><p>请确保在存储值时使用正确的 API，并在页面加载时从存储中恢复值。例如，在加载页面时，你可以在  中使用以下代码来恢复 <code>localStorage</code> 中的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> storedValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;myVariable&#x27;</span>);<br><span class="hljs-keyword">if</span> (storedValue) &#123;<br>  <span class="hljs-comment">// 执行值恢复的逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样，即使在刷新页面后，数据仍然可以从 <code>localStorage</code> 中获取并恢复。</p><hr><p><code>watch</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref, watch &#125; from &#x27;vue&#x27;;<br><br>// 定义 count 变量并初始化为 0<br>const count = ref(0);<br><br>// 定义 increment 方法来增加 count 的值<br>function increment() &#123;<br>  count.value++;<br>&#125;<br><br>// 使用 watch 函数来观察 count 的变化<br>watch(count, (newValue, oldValue) =&gt; &#123;<br>  console.log(&#x27;count 发生变化&#x27;, newValue, oldValue);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们使用了 <code>&lt;script setup&gt;</code> 语法来定义组件的逻辑部分。在 <code>&lt;script setup&gt;</code> 中，我们导入了 <code>ref</code> 和 <code>watch</code> 函数，并使用 <code>ref</code> 创建了一个名为 <code>count</code> 的响应式变量，并初始化为 0。</p><p>我们还定义了一个名为 <code>increment</code> 的方法来增加 <code>count</code> 的值。在模板中，我们可以直接绑定 <code>count</code> 变量和 <code>increment</code> 方法。</p><p>最后，我们使用 <code>watch</code> 函数来观察 <code>count</code> 的变化，并在每次变化时输出日志。</p><hr><p>前端报错<code>Access to XMLHttpRequest at &#39; http ://10.114.49.20:8000/ private / knowledge / compl etion &#39; from origin &#39; http :// localhost :8085&#39; has been bloc ked by CORS policy : Respons e to preflight request doesn &#39; t pass access control check : No &#39; Access- Control-Allow-Origin &#39; header is present on the requested resource</code>：这个错误是由于浏览器的跨域安全策略（CORS）导致的。</p><p>CORS策略要求服务器在响应中添加特定的头部信息，以允许来自不同源（Origin）的请求访问资源。在你的错误信息中，报告了来自本地开发服务器（<code>http://localhost:8085</code>）对另一个域（<code>http://10.114.49.20:8000</code>）的请求被阻止了。</p><p>要解决这个问题，你可以尝试以下几种方法：</p><ol><li><p><strong>后端配置：</strong> 在 <code>http://10.114.49.20:8000</code> 的服务器端代码中，添加合适的响应头来允许跨域请求。具体而言，你需要在响应中添加 <code>Access-Control-Allow-Origin</code> 头，将其值设置为 <code>http://localhost:8085</code>。</p></li><li><p><strong>使用代理：</strong> 如果你在开发环境中使用的是 Vite 或类似的工具，你可以尝试配置开发服务器的代理，将请求转发到正确的地址。在 Vite 中，你可以通过修改 <code>vite.config.js</code> 文件来配置代理，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 其他配置项...</span><br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/private&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://10.114.49.20:8000&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这样，所有以 <code>/private</code> 开头的请求将被代理到 <code>http://10.114.49.20:8000</code> 地址。</p></li><li><p><strong>修改前端开发服务器的地址：</strong> 如果你有权限更改后端服务器的配置，可以考虑将前端开发服务器的地址设置为与后端服务器相同的地址（例如 <code>http://10.114.49.20:8000</code>），这样就不存在跨域问题了。</p></li></ol><hr><p>使用 <code>v-model</code> 指令来实现 <code>el-dialog</code> 的显示和隐藏。这个指令可以让你双向绑定一个值，并自动更新该值的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-button @click=&quot;showDialog = true&quot;&gt;打开对话框&lt;/el-button&gt;<br><br>    &lt;el-dialog v-model=&quot;showDialog&quot; title=&quot;对话框标题&quot;&gt;<br>      &lt;!-- 对话框内容 --&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>export default &#123;<br>  setup() &#123;<br>    const showDialog = ref(false);<br><br>    return &#123;<br>      showDialog,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们创建了一个名为 <code>showDialog</code> 的响应式变量，并将其初始值设为 <code>false</code> ，表示对话框默认是隐藏的。当点击按钮时，我们将 <code>showDialog</code> 的值设为 <code>true</code> ，对话框将显示出来。</p><p>通过使用 <code>v-model=&quot;showDialog&quot;</code>，我们将 <code>showDialog</code> 的值与 <code>el-dialog</code> 组件的 <code>visible</code> 属性进行了绑定。当 <code>showDialog</code> 的值发生变化时，<code>el-dialog</code> 组件的显示状态也会相应地发生变化。</p><hr><p>数组深拷贝：</p><ol><li>使用 <code>Array.from()</code> 方法进行浅拷贝，再结合 <code>map()</code> 或者 <code>JSON.parse(JSON.stringify())</code> 方法进行深拷贝：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝</span><br><span class="hljs-keyword">const</span> shallowCopy = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(originalArray);<br><br><span class="hljs-comment">// 深拷贝方式一：使用 map()</span><br><span class="hljs-keyword">const</span> deepCopy1 = originalArray.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (&#123;...item&#125;));<br><br><span class="hljs-comment">// 深拷贝方式二：使用 JSON.parse(JSON.stringify())</span><br><span class="hljs-keyword">const</span> deepCopy2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(originalArray));<br></code></pre></td></tr></table></figure><ol start="2"><li>使用扩展运算符 <code>...</code> 进行深拷贝：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> deepCopy = [...originalArray];<br></code></pre></td></tr></table></figure><p>需要注意的是，上述方法在深拷贝过程中只适用于纯数据（例如字符串、数字、布尔值、对象和数组）。如果数组中的元素是引用类型（如对象），则仅拷贝了引用，而不是创建新的对象。如果需要完全复制对象及其嵌套属性，可以考虑使用第三方库如 <code>lodash.cloneDeep()</code>。</p><p>例如，在 Vue 3 组件中，你可以这样使用 <code>lodash</code> 进行深拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> cloneDeep <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash/cloneDeep&#x27;</span>;<br><br><span class="hljs-comment">// 深拷贝</span><br><span class="hljs-keyword">const</span> deepCopy = <span class="hljs-title function_">cloneDeep</span>(originalArray);<br></code></pre></td></tr></table></figure><p>请注意，深拷贝数组可能会导致性能问题，特别是对于包含大量数据的数组。在处理大型数据集时，请谨慎使用深拷贝。</p><hr><p>url替换所有的空格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;handleDecode(item)&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;textDecoration:&#x27;none&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDecode</span>=(<span class="hljs-params">item:string</span>)=&gt;&#123;<br>    <span class="hljs-keyword">let</span> decodeUrl=<span class="hljs-string">&#x27;/api/&#x27;</span>+decodeURIComponenr(item)<br>    <span class="hljs-keyword">let</span> replaceUrl=decodeUrl.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/ /g</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> replaceUrl<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>element plus的分页  &#x2F;page和Go to改为中文：</p><p>main.ts：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> zhCn <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;elementplus/dist/locale/zh-cn.mjs&#x27;</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>,&#123;<br>    <span class="hljs-attr">locale</span>: zhCn,<br>&#125;)<br></code></pre></td></tr></table></figure><p>src下面新建<code>element-plus.d.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;element-plus/dist/locale/zh-cn.mjs&#x27;</span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">zhCn</span>: <span class="hljs-built_in">any</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> znCn<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>el-table滚动条到最底部：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tableRef&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">()=&gt;</span>tableRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>,tableRef.<span class="hljs-property">value</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">bodyWrapper</span>.<span class="hljs-property">scrollHeight</span>)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>设置el-button点击多次只触发一次方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-button @click=&quot;handleClick&quot; :disabled=&quot;isButtonDisabled&quot;&gt;按钮&lt;/el-button&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br><br>const isButtonDisabled = ref(false);<br><br>const handleClick = () =&gt; &#123;<br>  if (!isButtonDisabled.value) &#123;<br>    // 在此处添加您要执行的方法<br><br>    isButtonDisabled.value = true;<br><br>    setTimeout(() =&gt; &#123;<br>      isButtonDisabled.value = false;<br>    &#125;, 1000); // 设置延迟时间，确保在指定时间后按钮重新可点击<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><p>el-tooltip的内容可滚动：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-tooltip</span> <span class="hljs-attr">:enterable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:popper-style</span>=<span class="hljs-string">&quot;&#123;width: px2rem(&#x27;400&#x27;)&#125;&quot;</span> <span class="hljs-attr">:popper-options</span>=<span class="hljs-string">&quot;&#123;modifies:&#123;preventOverflow:&#123;boundariesElement:&#x27;window&#x27;&#125;&#125;&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        &#123;&#123;item&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">content</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;maxHeight:px2rem(&#x27;350&#x27;),overflowY: &#x27;scroll&#x27;,lineHeight:px2rem(&#x27;25&#x27;)&#125;&quot;</span>&gt;</span><br>            &#123;&#123;item&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-tooltip</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>svg-icon：</p><ol><li><p>在 components 目录下新建 SvgIcon.vue 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">// src/components/SvgIcon.vue<br>&lt;template&gt;<br>  &lt;svg :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot;&gt;<br>    &lt;use :xlink:href=&quot;iconClassName&quot; :fill=&quot;color&quot; /&gt;<br>  &lt;/svg&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; computed &#125; from &#x27;vue&#x27;;<br>const props = defineProps(&#123;<br>  iconName: &#123;<br>    type: String,<br>    required: true<br>  &#125;,<br>  className: &#123;<br>    type: String,<br>    default: &#x27;&#x27;<br>  &#125;,<br>  color: &#123;<br>    type: String,<br>    default: &#x27;#409eff&#x27;<br>  &#125;<br>&#125;);<br>// 图标在 iconfont 中的名字<br>const iconClassName = computed(()=&gt;&#123;<br>  return `#$&#123;props.iconName&#125;`;<br>&#125;)<br>// 给图标添加上类名<br>const svgClass = computed(() =&gt; &#123;<br>  if (props.className) &#123;<br>    return `svg-icon $&#123;props.className&#125;`;<br>  &#125;<br>  return &#x27;svg-icon&#x27;;<br>&#125;);<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>.svg-icon &#123;<br>  width: 1em;<br>  height: 1em;<br>  position: relative;<br>  fill: currentColor;<br>  vertical-align: -2px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 main.ts 中全局注册：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SvgIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/SvgIcon/SvgIcon.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/iconfont/iconfont.js&#x27;</span>;<br>app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;SvgIcon&#x27;</span>, <span class="hljs-title class_">SvgIcon</span>);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>引入iconfont：在项目 assets 目录下新建 iconfont 目录，在该目录下新建 iconfont.js 文件，然后将 iconfont 在线地址中提供的代码全部复制过来。</p><img src="88e768a38fb54e8eb533fb4a875020f8.png" alt="在这里插入图片描述" style="zoom:50%;" /></li><li><p>具体使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">iconName</span>=<span class="hljs-string">&quot;icon-gongzuoleixing&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue3</tag>
      
      <tag>CSS</tag>
      
      <tag>HTML</tag>
      
      <tag>TypeScript</tag>
      
      <tag>ElementPlus</tag>
      
      <tag>Vite</tag>
      
      <tag>pinia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二.搭建博客</title>
    <link href="/2023/08/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/08/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-参考教程"><a href="#1-参考教程" class="headerlink" title="1.参考教程"></a>1.参考教程</h1><p><code>https://blog.senqiweb.cn/2022/08/26/kv1ltl/#设置公钥和私钥</code></p><p>hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>hexo主题之fluid：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>hexo fluid文档：<a href="https://hexo.fluid-dev.com/docs/guide">https://hexo.fluid-dev.com/docs/guide</a></p><ul><li>创建文件：<code>hexo new 搭建博客</code></li><li>生成静态文件：<code>hexo g</code></li><li>预览博客：<code>hexo s</code></li><li>部署网站：<code>hexo d</code></li></ul><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><h1 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h1><p>图片显示问题：<a href="https://zhuanlan.zhihu.com/p/265077468">https://zhuanlan.zhihu.com/p/265077468</a></p><img src="image-20230827182307675.png" alt="image-20230827182307675" style="zoom:30%;" /><ul><li><p>设置图片根目录：</p><img src="image-20230825134728552.png" style="zoom:50%;" /></li></ul><p>必须是以下格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image-20230918163131185.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;image-20230918163131185&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>typora自带格式不生效：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">![image-20230918170715840](/image-20230918170715840.png)<br></code></pre></td></tr></table></figure><hr><p>添加樱花效果：<a href="https://cnhuazhu.gitee.io/2021/02/19/Hexo%E9%AD%94%E6%94%B9/Hexo%E6%B7%BB%E5%8A%A0%E6%A8%B1%E8%8A%B1%E5%8A%A8%E6%80%81%E6%95%88%E6%9E%9C%E8%83%8C%E6%99%AF/">https://cnhuazhu.gitee.io/2021/02/19/Hexo魔改/Hexo添加樱花动态效果背景/</a></p><ul><li><p>添加到主题下的layout文件夹：</p><img src="image-20230825111055130.png" style="zoom:50%;" /></li></ul><p><code>git clone</code>到本地的代码：</p><ol><li>删除node_modules</li><li>npm install</li><li>重新下载fluid主题文件夹  复制到themes\fluid目录下</li></ol><hr><img src="image-20230827181423475.png" alt="image-20230827181423475" style="zoom:40%;" /><ol><li>删除<code>.deploy_git</code>文件夹</li><li>输入<code>git config --global core.autocrlf false</code></li><li>依次执行：<code>hexo clean</code>    <code>hexo g</code>    <code>hexo d</code></li></ol><hr><p>新建.gitignore：过滤node_modules和dist文件夹</p><img src="image-20230827184313722.png" alt="image-20230827184313722" style="zoom:40%;" /><hr><p>hexo中高亮不显示：<code>==我高亮了==</code>→使用<code>&lt;mark&gt;我高亮了&lt;/mark&gt;</code></p><hr><p>github贡献图：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ghchart.rshah.org/409ba5/lan720&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="image-20230918163131185.png" alt="image-20230918163131185" style="zoom:50%;" /><img src="image-20230919160147542.png" alt="image-20230919160147542" style="zoom:50%;" /><p>或者</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">githubcalendar:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">enable_page:</span> <span class="hljs-string">/archives/</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">lan720</span><br>  <span class="hljs-attr">layout:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">class</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">container</span><br>    <span class="hljs-attr">index:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">githubcalendar_html:</span> <span class="hljs-string">&#x27;&lt;div id=&quot;github-calendar&quot; style=&quot;width:100%;height:auto;padding:10px;margin-bottom:20px&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br>  <span class="hljs-attr">pc_minheight:</span> <span class="hljs-string">200px</span><br>  <span class="hljs-attr">mobile_minheight:</span> <span class="hljs-string">0px</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot;</span><br>  <span class="hljs-attr">api:</span> <span class="hljs-string">https://python-github-calendar-api.vercel.app/api</span><br>  <span class="hljs-comment"># api: https://gitcalendar.zfe.space/api</span><br>  <span class="hljs-comment"># api: https://python-gitee-calendar-api.vercel.app/api</span><br>  <span class="hljs-attr">calendar_js:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span><br>  <span class="hljs-attr">plus_style:</span> <span class="hljs-string">&quot;#github_container &gt; .position-relative &gt; .border&#123;border:0!important&#125;#github-calendar&#123;position: relative;margin-top: -2rem;background-color: var(--board-bg-color);transition: background-color 0.2s ease-in-out;border-radius: 0.5rem;z-index: 3;-webkit-box-shadow: 0 12px 15px 0 rgb(0 0 0 / 24%), 0 17px 50px 0 rgb(0 0 0 / 19%);box-shadow: 0 12px 15px 0 rgb(0 0 0 / 24%), 0 17px 50px 0 rgb(0 0 0 / 19%);&#125;&quot;</span><br></code></pre></td></tr></table></figure><hr><p>修改鼠标样式和文字选中样式：</p><img src="image-20230921162312844.png" alt="image-20230921162312844" style="zoom:50%;" /><p>在main.styl中引入：</p><img src="image-20230921162342641.png" alt="image-20230921162342641" style="zoom:50%;" /><hr><p>插入便签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="image-20230925140109254.png" alt="image-20230925140109254" style="zoom:50%;" />]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一.上传大文件到Github</title>
    <link href="/2023/08/24/%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%B0Github/"/>
    <url>/2023/08/24/%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%B0Github/</url>
    
    <content type="html"><![CDATA[<p>Github文档：<a href="https://docs.github.com/zh">https://docs.github.com/zh</a></p><p>上传超过100M的单个文件到github：可先进行pdf压缩</p><p>下载lfs：<a href="https://git-lfs.com/">https://git-lfs.com/</a></p><ol><li><p>Github新建空仓库</p></li><li><p>本地新建空文件夹</p></li><li><p>git lfs install</p></li><li><p>git init</p></li><li><p>git lfs track &quot;*.zip&quot; </p><ol><li>追踪单个文件：<code>git lfs track &quot;FrameworkFold/XXXFramework/xxx&quot;</code></li><li>追踪指定类型的文件：<code>git lfs track &quot;*.dmg&quot;</code></li><li>不再使用 Git LFS 管理指定的文件：<code>git lfs untrack &quot;*.dmg&quot;</code></li><li>追踪指定目录下的文件：<code>git lfs track &quot;FrameworkFold/*&quot;</code></li><li>枚举目前所有被 Git LFS 管理的具体文件：<code>git lfs ls-files</code></li></ol></li><li><p>git add .gitattributes</p></li><li><p>git config --global user.email &quot;<a href="mailto:&#x32;&#x31;&#57;&#55;&#x39;&#49;&#x33;&#54;&#x36;&#53;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;">&#x32;&#x31;&#57;&#55;&#x39;&#49;&#x33;&#54;&#x36;&#53;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;</a>&quot;</p></li><li><p>git config --global <a href="http://user.name/">user.name</a> &quot;lan720&quot;</p></li><li><p>git commit -m &quot;提交 .gitattributes 文件&quot;</p></li><li><p>git remote add origin <a href="mailto:git@github.com">git@github.com</a>:lan720&#x2F;study.git</p></li><li><p>git push origin master</p></li><li><p>加入 代码随想录1.assets.zip</p></li><li><p>git add .</p></li><li><p>git commit -m &quot;提交&quot;</p></li><li><p>git push origin master</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>lfs</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
